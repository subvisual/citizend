{
  "address": "0xcAA33467880DEA2e4851667dECad78c5BeF190fE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalTokensForSale",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paymentTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Purchase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paymentTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Refund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paymentTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CAP_VALIDATION_GAS_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CAP_VALIDATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_investorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allocated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "allocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "end",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "fractalIdToAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "individualCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "investorAmountAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_paymentAmount",
          "type": "uint256"
        }
      ],
      "name": "paymentTokenToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "refundAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "risingTideCache",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sumForCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sumForNextCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "largest",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "risingTideState",
      "outputs": [
        {
          "internalType": "enum RisingTide.RisingTideState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "risingTide_isValidCap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "risingTide_totalAllocatedUncapped",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "risingTide_totalCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "risingTide_validate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "risingTide_validating",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        }
      ],
      "name": "setIndividualCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "start",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "tokenToPaymentToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTokensForSale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUncappedAllocations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "uncappedAllocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc466a4f3476b1c2929333df32c03593a7d0d59a6453e6faad070569f760af646",
  "receipt": {
    "to": null,
    "from": "0x74319C333f26677688e58a72C4C0DafC508728d8",
    "contractAddress": "0xcAA33467880DEA2e4851667dECad78c5BeF190fE",
    "transactionIndex": 0,
    "gasUsed": "1847443",
    "logsBloom": "0x
    "blockHash": "0x92cf820bce77dc667abad5ff0272ac02b3cc9f657a94845f26dc24a5a98075c3",
    "transactionHash": "0xc466a4f3476b1c2929333df32c03593a7d0d59a6453e6faad070569f760af646",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1042897,
        "transactionHash": "0xc466a4f3476b1c2929333df32c03593a7d0d59a6453e6faad070569f760af646",
        "address": "0xcAA33467880DEA2e4851667dECad78c5BeF190fE",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000074319c333f26677688e58a72c4c0dafc508728d8",
          "0x00000000000000000000000074319c333f26677688e58a72c4c0dafc508728d8"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x92cf820bce77dc667abad5ff0272ac02b3cc9f657a94845f26dc24a5a98075c3"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1042897,
        "transactionHash": "0xc466a4f3476b1c2929333df32c03593a7d0d59a6453e6faad070569f760af646",
        "address": "0xcAA33467880DEA2e4851667dECad78c5BeF190fE",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x33ccb9ed30bc572500993b7ca8e527619cf334431f74b8ecd1c841304ef9c603",
          "0x00000000000000000000000074319c333f26677688e58a72c4c0dafc508728d8",
          "0x00000000000000000000000074319c333f26677688e58a72c4c0dafc508728d8"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x92cf820bce77dc667abad5ff0272ac02b3cc9f657a94845f26dc24a5a98075c3"
      }
    ],
    "blockNumber": 1042897,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000100000000000000000001",
    "300000000000",
    1651854600,
    1651856400,
    "10000000000000000000",
    "0xDd697D73Fc8dE870B7FDffbB1652795fD59A6Ec8"
  ],
  "numDeployments": 1,
  "solcInputHash": "1fde58679b23c62ec20958759afe35dc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalTokensForSale\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Refund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paymentTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAP_VALIDATION_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAP_VALIDATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_investorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"allocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"end\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"fractalIdToAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"individualCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"investorAmountAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_paymentAmount\",\"type\":\"uint256\"}],\"name\":\"paymentTokenToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"refundAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"risingTideCache\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumForCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumForNextCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"largest\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"risingTideState\",\"outputs\":[{\"internalType\":\"enum RisingTide.RisingTideState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"risingTide_isValidCap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"risingTide_totalAllocatedUncapped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"risingTide_totalCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"risingTide_validate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"risingTide_validating\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setIndividualCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"tokenToPaymentToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUncappedAllocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"uncappedAllocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allocated()\":{\"returns\":{\"_0\":\"the amount of tokens already allocated\"}},\"allocation(address)\":{\"params\":{\"_who\":\"The address to query\"}},\"buy(uint256)\":{\"details\":\"aUSD allowance must be previously set by spenderActual $CTND allocation is only available once individual cap is setNeeds to be approved by Fractal via the Registry\",\"params\":{\"_paymentAmount\":\"amount in payment token to commit\"}},\"constructor\":{\"params\":{\"_end\":\"End timestamp\",\"_paymentToken\":\"Token accepted as payment\",\"_rate\":\"token:paymentToken exchange rate, multiplied by 10e18\",\"_start\":\"Start timestamp\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"investorAmountAt(uint256)\":{\"returns\":{\"_0\":\"Amount of the nth investor\"}},\"investorCount()\":{\"returns\":{\"_0\":\"How many individual investors exist\"}},\"refund(address)\":{\"params\":{\"to\":\"Address to refund to\"}},\"refundAmount(address)\":{\"params\":{\"to\":\"The address to query\"},\"returns\":{\"_0\":\"The currently claimable amount\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"risingTide_isValidCap()\":{\"returns\":{\"_0\":\"true if current cap is already validated\"}},\"risingTide_totalAllocatedUncapped()\":{\"returns\":{\"_0\":\"Total amount invested\"}},\"risingTide_totalCap()\":{\"returns\":{\"_0\":\"amount corresponding to the total supply available for distribution\"}},\"risingTide_validating()\":{\"returns\":{\"_0\":\"true if validation of current cap is still ongoing\"}},\"setIndividualCap(uint256)\":{\"details\":\"Can only be called once\",\"params\":{\"_cap\":\"new individual cap\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Purchase(address,uint256,uint256)\":{\"notice\":\"Emitted for every public purchase\"},\"Refund(address,uint256)\":{\"notice\":\"Emitted for every refund given\"}},\"kind\":\"user\",\"methods\":{\"CAP_VALIDATION_GAS_LIMIT()\":{\"notice\":\"Min gas required to run one more cap validation iteration\"},\"_investorCount()\":{\"notice\":\"total unique investors\"},\"allocation(address)\":{\"notice\":\"Returns the amount of tokens that have been allocated in this sale for a given address (applying the individual cap)\"},\"buy(uint256)\":{\"notice\":\"Commits an amount of $aUSD to buy $CTND\"},\"end()\":{\"notice\":\"Timestamp at which sale ends\"},\"fractalIdToAddress(bytes32)\":{\"notice\":\"Fractal Id associated with the address to be used in this sale\"},\"individualCap()\":{\"notice\":\"The currently set cap Maximum amount of tokens that each buyer can actually get\"},\"paymentToken()\":{\"notice\":\"See {ISale.paymentToken}\"},\"paymentTokenToToken(uint256)\":{\"notice\":\"How many $CTND will be received for the given payment amount\"},\"rate()\":{\"notice\":\"Fixed price of token, expressed in paymentToken amount\"},\"refund(address)\":{\"notice\":\"Refunds currently refundable amount for the given address\"},\"refundAmount(address)\":{\"notice\":\"Returns the amount of tokens that are meant for refund due to the rising tide mechanism\"},\"registry()\":{\"notice\":\"Fractal Registry address\"},\"risingTideCache()\":{\"notice\":\"Calculation cache\"},\"risingTideState()\":{\"notice\":\"Current state\"},\"risingTide_totalAllocatedUncapped()\":{\"notice\":\"How many allocations have been made, regardless of the future individual cap\"},\"risingTide_totalCap()\":{\"notice\":\"How many tokens are to be distributed in total\"},\"risingTide_validate()\":{\"notice\":\"Continues a pending validation of the individual cap\"},\"setIndividualCap(uint256)\":{\"notice\":\"Sets the individual cap\"},\"start()\":{\"notice\":\"Timestamp at which sale starts\"},\"tokenToPaymentToken(uint256)\":{\"notice\":\"How many $aUSD will be received for the given $CTND amount\"},\"totalUncappedAllocations()\":{\"notice\":\"How many tokens have been allocated, before cap calculation\"},\"withdraw()\":{\"notice\":\"Allows a privileged account to withdraw payment tokens once the sale is overDoes not allow withdrawing funds meant for refunds\"},\"withdrawn()\":{\"notice\":\"Did the admins already withdraw all aUSD from sales\"}},\"notice\":\"Citizend token sale contract Users interact with this contract to deposit $aUSD in exchange for $CTND. The contract should hold all $CTND tokens meant to be distributed in the public sale\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/Sale.sol\":\"Sale\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/RisingTide/RisingTide.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\nimport {Math} from \\\"../libraries/Math.sol\\\";\\n\\n/**\\n * Abstract implementation of a Rising Tide Calculator\\n *\\n * @dev In addition to implementing this interface, the contract must also\\n * ensure no investments are possible once the Rising Tide calculation kicks in\\n */\\nabstract contract RisingTide {\\n    //\\n    // Libraries\\n    //\\n    using Math for uint256;\\n\\n    //\\n    // Structs\\n    //\\n    enum RisingTideState {\\n        NotSet, // cap not yet given, or invalid\\n        Validating, // cap has been given, but still being validated\\n        Finished, // cap is set. claims and refunds are open\\n        Invalid // the current cap was deemed invalid\\n    }\\n\\n    struct RisingTideCache {\\n        uint256 index; // what index are we at\\n        uint256 sumForCap; // cumulative investments with given cap\\n        uint256 sumForNextCap; // cumulative investments with next cap\\n        uint256 largest; // largest investment so far\\n    }\\n\\n    //\\n    // Constants\\n    //\\n\\n    /// Min gas required to run one more cap validation iteration\\n    uint256 public constant CAP_VALIDATION_GAS_LIMIT = 100000;\\n\\n    //\\n    // State\\n    //\\n\\n    /// Current state\\n    RisingTideState public risingTideState;\\n\\n    /// Calculation cache\\n    RisingTideCache public risingTideCache;\\n\\n    /// The currently set cap\\n    /// Maximum amount of tokens that each buyer can actually get\\n    uint256 public individualCap;\\n\\n    //\\n    // Virtual Interface\\n    //\\n\\n    /// @return How many individual investors exist\\n    function investorCount() public view virtual returns (uint256);\\n\\n    /// @return Amount of the nth investor\\n    function investorAmountAt(uint256 n) public view virtual returns (uint256);\\n\\n    /// How many allocations have been made, regardless of the future individual cap\\n    ///\\n    /// @return Total amount invested\\n    function risingTide_totalAllocatedUncapped()\\n        public\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    /// How many tokens are to be distributed in total\\n    ///\\n    /// @return amount corresponding to the total supply available for distribution\\n    function risingTide_totalCap() public view virtual returns (uint256);\\n\\n    /// @return true if validation of current cap is still ongoing\\n    function risingTide_validating() external view returns (bool) {\\n        return risingTideState == RisingTideState.Validating;\\n    }\\n\\n    /// @return true if current cap is already validated\\n    function risingTide_isValidCap() public view returns (bool) {\\n        return risingTideState == RisingTideState.Finished;\\n    }\\n\\n    /// Internal helper to set a new cap and trigger the beginning of the validation logic\\n    ///\\n    /// @param _cap The cap to validate\\n    function _risingTide_setCap(uint256 _cap) internal {\\n        require(\\n            risingTideState == RisingTideState.NotSet ||\\n                risingTideState == RisingTideState.Invalid,\\n            \\\"already set or in progress\\\"\\n        );\\n\\n        individualCap = _cap;\\n        risingTideState = RisingTideState.Validating;\\n        risingTideCache = RisingTideCache(0, 0, 0, 0);\\n\\n        risingTide_validate();\\n    }\\n\\n    /// Continues a pending validation of the individual cap\\n    function risingTide_validate() public {\\n        require(risingTideState == RisingTideState.Validating);\\n\\n        RisingTideCache memory validation = risingTideCache;\\n        uint256 count = investorCount();\\n        uint256 localCap = individualCap;\\n\\n        for (\\n            ;\\n            validation.index < count && gasleft() > CAP_VALIDATION_GAS_LIMIT;\\n            ++validation.index\\n        ) {\\n            uint256 amount = investorAmountAt(validation.index);\\n\\n            validation.sumForCap += amount.min(localCap);\\n            validation.sumForNextCap += amount.min(localCap + 1);\\n            validation.largest = Math.max(validation.largest, amount);\\n        }\\n\\n        risingTideCache = validation;\\n\\n        if (validation.index == count) {\\n            bool _valid = _risingTide_validCap(localCap, validation);\\n            if (_valid) {\\n                risingTideState = RisingTideState.Finished;\\n            } else {\\n                risingTideState = RisingTideState.Invalid;\\n            }\\n        }\\n    }\\n\\n    //\\n    // Internal API\\n    //\\n\\n    /// @dev Determine if the given rising tide cap is valid.\\n    ///\\n    /// If the maximum investment is not reached, the rising tide cap does not\\n    /// have an upper bound. In this scenario, the cap is conventioned to be the\\n    /// largest individual investment.\\n    ///\\n    /// If the maximum investment is reached, the rising tide cap is defined as\\n    /// the highest possible cap such that the sum of all contributions with the\\n    /// cap applied does not exceed the maximum investment. This means that the\\n    /// sum of all contirbutions with any cap above the rising tide cap applied\\n    /// would exceed the maximum investment limit.\\n    ///\\n    /// @param _cap Rising tide cap to be validated, in wei.\\n    /// @param _validation The calculated CapValidation struct\\n    ///\\n    /// @return true if `cap` is a valid rising tide cap for the given parameters.\\n    function _risingTide_validCap(\\n        uint256 _cap,\\n        RisingTideCache memory _validation\\n    ) internal view returns (bool) {\\n        uint256 total = risingTide_totalAllocatedUncapped();\\n        uint256 max = risingTide_totalCap();\\n\\n        require(_validation.largest <= total);\\n        require(_validation.sumForCap <= total);\\n        require(_validation.sumForNextCap <= total);\\n\\n        if (total <= max) {\\n            return _cap == _validation.largest;\\n        } else {\\n            return (_validation.sumForNextCap > max &&\\n                _validation.sumForCap <= max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x43eb8abe4d726db5b8ddedaf379f16031289f530802b704e64725ca33778a463\",\"license\":\"MIT\"},\"contracts/fractal_registry/FractalRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Fractal registry v0\\n/// @author Antoni Dikov and Shelby Doolittle\\ncontract FractalRegistry {\\n    address root;\\n    mapping(address => bool) delegates;\\n\\n    mapping(address => bytes32) fractalIdForAddress;\\n    mapping(string => mapping(bytes32 => bool)) userLists;\\n\\n    constructor(address _root) {\\n        root = _root;\\n    }\\n\\n    /// @param addr is Eth address\\n    /// @return FractalId as bytes32\\n    function getFractalId(address addr) external view returns (bytes32) {\\n        return fractalIdForAddress[addr];\\n    }\\n\\n    /// @notice Adds a user to the mapping of Eth address to FractalId.\\n    /// @param addr is Eth address.\\n    /// @param fractalId is FractalId in bytes32.\\n    function addUserAddress(address addr, bytes32 fractalId) external {\\n        requireMutatePermission();\\n        fractalIdForAddress[addr] = fractalId;\\n    }\\n\\n    /// @notice Removes an address from the mapping of Eth address to FractalId.\\n    /// @param addr is Eth address.\\n    function removeUserAddress(address addr) external {\\n        requireMutatePermission();\\n        delete fractalIdForAddress[addr];\\n    }\\n\\n    /// @notice Checks if a user by FractalId exists in a specific list.\\n    /// @param userId is FractalId in bytes32.\\n    /// @param listId is the list id.\\n    /// @return bool if the user is the specified list.\\n    function isUserInList(bytes32 userId, string memory listId)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return userLists[listId][userId];\\n    }\\n\\n    /// @notice Add user by FractalId to a specific list.\\n    /// @param userId is FractalId in bytes32.\\n    /// @param listId is the list id.\\n    function addUserToList(bytes32 userId, string memory listId) external {\\n        requireMutatePermission();\\n        userLists[listId][userId] = true;\\n    }\\n\\n    /// @notice Remove user by FractalId from a specific list.\\n    /// @param userId is FractalId in bytes32.\\n    /// @param listId is the list id.\\n    function removeUserFromList(bytes32 userId, string memory listId) external {\\n        requireMutatePermission();\\n        delete userLists[listId][userId];\\n    }\\n\\n    /// @notice Only root can add delegates. Delegates have mutate permissions.\\n    /// @param addr is Eth address\\n    function addDelegate(address addr) external {\\n        require(msg.sender == root, \\\"Must be root\\\");\\n        delegates[addr] = true;\\n    }\\n\\n    /// @notice Removing delegates is only posible from root or by himself.\\n    /// @param addr is Eth address\\n    function removeDelegate(address addr) external {\\n        require(\\n            msg.sender == root || msg.sender == addr,\\n            \\\"Not allowed to remove address\\\"\\n        );\\n        delete delegates[addr];\\n    }\\n\\n    function requireMutatePermission() private view {\\n        require(\\n            msg.sender == root || delegates[msg.sender],\\n            \\\"Not allowed to mutate\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xeb758b84c74d60804219786b08dcd51513c411c66fcfdf53a740c3c382f730a3\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\nlibrary Math {\\n    /**\\n     * @dev Return the smallest of the two arguments.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Return the largest of the two arguments.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return b < a ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x669288d65313ac75a0db31864d85f5a95049e37f1dea6e4d6cb86fd264bca899\",\"license\":\"MIT\"},\"contracts/token/ISale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\ninterface ISale {\\n    /// The $aUSD token\\n    function paymentToken() external view returns (address);\\n\\n    /// How many $CTND will be received for the given payment amount\\n    function paymentTokenToToken(uint256 _paymentAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// How many $aUSD will be received for the given $CTND amount\\n    function tokenToPaymentToken(uint256 _tokenAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// Commits an amount of $aUSD to buy $CTND\\n    ///\\n    /// @dev aUSD allowance must be previously set by spender\\n    /// @dev Actual $CTND allocation is only available once individual cap is set\\n    /// @dev Needs to be approved by Fractal via the Registry\\n    ///\\n    /// @param _paymentAmount amount in payment token to commit\\n    function buy(uint256 _paymentAmount) external;\\n\\n    /**\\n     * Refunds currently refundable amount for the given address\\n     *\\n     * @param to Address to refund to\\n     */\\n    function refund(address to) external;\\n\\n    /**\\n     * Returns the amount of tokens that are meant for refund due to the\\n     * rising tide mechanism\\n     *\\n     * @param to The address to query\\n     * @return The currently claimable amount\\n     */\\n    function refundAmount(address to) external view returns (uint256);\\n\\n    /**\\n     * Sets the individual cap for investors, which will then be used when\\n     * claiming or refunding. Only callable by the cap validator role.\\n     *\\n     * @param cap The cap per investor to be set, specified in $CTND\\n     */\\n    function setIndividualCap(uint256 cap) external;\\n\\n    /**\\n     * Returns the amount of tokens that have been allocated in this sale for\\n     * a given address (applying the individual cap)\\n     *\\n     * @param _who The address to query\\n     */\\n    function allocation(address _who) external view returns (uint256);\\n\\n    /**\\n     * Returns the amount of tokens that have been allocated in this sale for\\n     * a given address (ignoring the individual cap)\\n     *\\n     * @param _who The address to query\\n     */\\n    function uncappedAllocation(address _who) external view returns (uint256);\\n\\n    /**\\n     * Allows a privileged account to withdraw payment tokens once the sale is over\\n     *\\n     * @notice Does not allow withdrawing funds meant for refunds\\n     */\\n    function withdraw() external;\\n}\\n\",\"keccak256\":\"0x13d04d4058ddc115117284c4c3f0e16699dc974cefa7b2fb5e94b153c684dc60\",\"license\":\"MIT\"},\"contracts/token/Sale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport {ISale} from \\\"./ISale.sol\\\";\\nimport {RisingTide} from \\\"../RisingTide/RisingTide.sol\\\";\\nimport {FractalRegistry} from \\\"../fractal_registry/FractalRegistry.sol\\\";\\nimport {Math} from \\\"../libraries/Math.sol\\\";\\n\\n/// Citizend token sale contract\\n///\\n/// Users interact with this contract to deposit $aUSD in exchange for $CTND.\\n/// The contract should hold all $CTND tokens meant to be distributed in the public sale\\ncontract Sale is ISale, RisingTide, ERC165, AccessControl, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Math for uint256;\\n\\n    struct Account {\\n        uint256 uncappedAllocation;\\n        bool refunded;\\n    }\\n\\n    //\\n    // Constants\\n    //\\n\\n    bytes32 public constant CAP_VALIDATOR_ROLE =\\n        keccak256(\\\"CAP_VALIDATOR_ROLE\\\");\\n\\n    //\\n    // Events\\n    //\\n\\n    /// Emitted for every public purchase\\n    event Purchase(\\n        address indexed from,\\n        uint256 paymentTokenAmount,\\n        uint256 tokenAmount\\n    );\\n\\n    /// Emitted for every refund given\\n    event Refund(address indexed to, uint256 paymentTokenAmount);\\n\\n    event Withdraw(address indexed to, uint256 paymentTokenAmount);\\n\\n    //\\n    // State\\n    //\\n\\n    /// See {ISale.paymentToken}\\n    address public immutable override(ISale) paymentToken;\\n\\n    /// Fixed price of token, expressed in paymentToken amount\\n    uint256 public immutable rate;\\n\\n    // multiplier used for rate conversions\\n    uint256 immutable mul;\\n\\n    /// Timestamp at which sale starts\\n    uint256 public immutable start;\\n\\n    /// Timestamp at which sale ends\\n    uint256 public immutable end;\\n\\n    uint256 public immutable totalTokensForSale;\\n\\n    /// Token allocations committed by each buyer\\n    mapping(address => Account) accounts;\\n\\n    /// incrementing index => investor address\\n    mapping(uint256 => address) investorByIndex;\\n\\n    /// total unique investors\\n    uint256 public _investorCount;\\n\\n    /// How many tokens have been allocated, before cap calculation\\n    uint256 public totalUncappedAllocations;\\n\\n    /// Fractal Registry address\\n    address public immutable registry;\\n\\n    /// Did the admins already withdraw all aUSD from sales\\n    bool public withdrawn;\\n\\n    /// Fractal Id associated with the address to be used in this sale\\n    mapping(bytes32 => address) public fractalIdToAddress;\\n\\n    /// @param _paymentToken Token accepted as payment\\n    /// @param _rate token:paymentToken exchange rate, multiplied by 10e18\\n    /// @param _start Start timestamp\\n    /// @param _end End timestamp\\n    constructor(\\n        address _paymentToken,\\n        uint256 _rate,\\n        uint256 _start,\\n        uint256 _end,\\n        uint256 _totalTokensForSale,\\n        address _registry\\n    ) {\\n        require(_rate > 0, \\\"can't be zero\\\");\\n        require(_paymentToken != address(0), \\\"can't be zero\\\");\\n        require(_start > 0, \\\"can't be zero\\\");\\n        require(_end > _start, \\\"end must be after start\\\");\\n        require(_totalTokensForSale > 0, \\\"total cannot be 0\\\");\\n\\n        paymentToken = _paymentToken;\\n        rate = _rate;\\n        start = _start;\\n        end = _end;\\n        totalTokensForSale = _totalTokensForSale;\\n        registry = _registry;\\n        mul = 10**IERC20Metadata(_paymentToken).decimals();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(CAP_VALIDATOR_ROLE, msg.sender);\\n    }\\n\\n    /// Ensures we're running during the set sale period\\n    modifier inSale() {\\n        require(\\n            block.timestamp >= start && block.timestamp <= end,\\n            \\\"sale not active\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier afterSale() {\\n        require(block.timestamp > end, \\\"sale not over\\\");\\n        _;\\n    }\\n\\n    /// Ensures the individual cap is already calculated\\n    modifier capCalculated() {\\n        require(risingTide_isValidCap(), \\\"cap not yet set\\\");\\n        _;\\n    }\\n\\n    //\\n    // ISale\\n    //\\n\\n    /// @inheritdoc ISale\\n    function withdraw()\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        capCalculated\\n        nonReentrant\\n    {\\n        require(block.timestamp > end, \\\"sale not ended yet\\\");\\n        require(!withdrawn, \\\"already withdrawn\\\");\\n\\n        withdrawn = true;\\n\\n        uint256 allocatedAmount = allocated();\\n        uint256 paymentTokenAmount = tokenToPaymentToken(allocatedAmount);\\n\\n        emit Withdraw(msg.sender, paymentTokenAmount);\\n\\n        IERC20(paymentToken).transfer(msg.sender, paymentTokenAmount);\\n    }\\n\\n    /// @inheritdoc ISale\\n    function paymentTokenToToken(uint256 _paymentAmount)\\n        public\\n        view\\n        override(ISale)\\n        returns (uint256)\\n    {\\n        return (_paymentAmount * mul) / rate;\\n    }\\n\\n    /// @inheritdoc ISale\\n    function tokenToPaymentToken(uint256 _tokenAmount)\\n        public\\n        view\\n        override(ISale)\\n        returns (uint256)\\n    {\\n        return (_tokenAmount * rate) / mul;\\n    }\\n\\n    /// @inheritdoc ISale\\n    function buy(uint256 _amount) external override(ISale) inSale nonReentrant {\\n        bytes32 fractalId = FractalRegistry(registry).getFractalId(msg.sender);\\n        require(fractalId != 0, \\\"not registered\\\");\\n        require(\\n            fractalIdToAddress[fractalId] == address(0) ||\\n                fractalIdToAddress[fractalId] == msg.sender,\\n            \\\"id registered to another address\\\"\\n        );\\n        require(\\n            FractalRegistry(registry).isUserInList(fractalId, \\\"plus\\\"),\\n            \\\"not full kyc\\\"\\n        );\\n\\n        uint256 paymentAmount = tokenToPaymentToken(_amount);\\n        require(paymentAmount > 0, \\\"can't be zero\\\");\\n\\n        uint256 currentAllocation = accounts[msg.sender].uncappedAllocation;\\n\\n        if (currentAllocation == 0) {\\n            investorByIndex[_investorCount] = msg.sender;\\n            _investorCount++;\\n        }\\n\\n        accounts[msg.sender].uncappedAllocation += _amount;\\n        totalUncappedAllocations += _amount;\\n        fractalIdToAddress[fractalId] = msg.sender;\\n\\n        emit Purchase(msg.sender, paymentAmount, _amount);\\n\\n        IERC20(paymentToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            paymentAmount\\n        );\\n    }\\n\\n    /// @inheritdoc ISale\\n    function refund(address to)\\n        external\\n        override(ISale)\\n        capCalculated\\n        nonReentrant\\n    {\\n        Account storage account = accounts[to];\\n        require(!account.refunded, \\\"already refunded\\\");\\n\\n        uint256 amount = refundAmount(to);\\n        require(amount > 0, \\\"No tokens to refund\\\");\\n\\n        accounts[to].refunded = true;\\n        IERC20(paymentToken).transfer(to, amount);\\n\\n        emit Refund(to, amount);\\n    }\\n\\n    /// @inheritdoc ISale\\n    function refundAmount(address to)\\n        public\\n        view\\n        override(ISale)\\n        returns (uint256)\\n    {\\n        if (!risingTide_isValidCap()) {\\n            return 0;\\n        }\\n\\n        uint256 uncapped = accounts[to].uncappedAllocation;\\n        uint256 capped = allocation(to);\\n\\n        return tokenToPaymentToken(uncapped - capped);\\n    }\\n\\n    function uncappedAllocation(address _to)\\n        public\\n        view\\n        override(ISale)\\n        returns (uint256)\\n    {\\n        return accounts[_to].uncappedAllocation;\\n    }\\n\\n    /// @inheritdoc ISale\\n    function allocation(address _to)\\n        public\\n        view\\n        override(ISale)\\n        returns (uint256)\\n    {\\n        return _applyCap(uncappedAllocation(_to));\\n    }\\n\\n    //\\n    // RisingTide\\n    //\\n\\n    /// @inheritdoc RisingTide\\n    function investorCount()\\n        public\\n        view\\n        override(RisingTide)\\n        returns (uint256)\\n    {\\n        return _investorCount;\\n    }\\n\\n    /// @inheritdoc RisingTide\\n    function investorAmountAt(uint256 i)\\n        public\\n        view\\n        override(RisingTide)\\n        returns (uint256)\\n    {\\n        address addr = investorByIndex[i];\\n        Account storage account = accounts[addr];\\n\\n        return account.uncappedAllocation;\\n    }\\n\\n    /// @inheritdoc RisingTide\\n    function risingTide_totalAllocatedUncapped()\\n        public\\n        view\\n        override(RisingTide)\\n        returns (uint256)\\n    {\\n        return totalUncappedAllocations;\\n    }\\n\\n    /// @inheritdoc RisingTide\\n    function risingTide_totalCap()\\n        public\\n        view\\n        override(RisingTide)\\n        returns (uint256)\\n    {\\n        return totalTokensForSale;\\n    }\\n\\n    //\\n    // Admin API\\n    //\\n\\n    /// Sets the individual cap\\n    /// @dev Can only be called once\\n    ///\\n    /// @param _cap new individual cap\\n    function setIndividualCap(uint256 _cap)\\n        external\\n        onlyRole(CAP_VALIDATOR_ROLE)\\n        afterSale\\n        nonReentrant\\n    {\\n        _risingTide_setCap(_cap);\\n    }\\n\\n    //\\n    // ERC165\\n    //\\n\\n    /// @inheritdoc ERC165\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC165, AccessControl)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(ISale).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    //\\n    // Other public APIs\\n    //\\n\\n    /// @return the amount of tokens already allocated\\n    function allocated() public view returns (uint256) {\\n        return Math.min(totalUncappedAllocations, totalTokensForSale);\\n    }\\n\\n    //\\n    // Internal API\\n    //\\n\\n    /**\\n     * Applies the individual cap to the given amount\\n     *\\n     * @param _amount amount to apply cap to\\n     * @return capped amount\\n     */\\n    function _applyCap(uint256 _amount) internal view returns (uint256) {\\n        if (!risingTide_isValidCap()) {\\n            return 0;\\n        }\\n\\n        if (_amount >= individualCap) {\\n            return individualCap;\\n        }\\n\\n        return _amount;\\n    }\\n}\\n\",\"keccak256\":\"0x21e90a6bba4e52c4c2c1021202e279c887abd70d00c03d64f8ca75d66a0ebae0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200249038038062002490833981016040819052620000359162000357565b6001600755846200007d5760405162461bcd60e51b815260206004820152600d60248201526c63616e2774206265207a65726f60981b60448201526064015b60405180910390fd5b6001600160a01b038616620000c55760405162461bcd60e51b815260206004820152600d60248201526c63616e2774206265207a65726f60981b604482015260640162000074565b60008411620001075760405162461bcd60e51b815260206004820152600d60248201526c63616e2774206265207a65726f60981b604482015260640162000074565b838311620001585760405162461bcd60e51b815260206004820152601760248201527f656e64206d757374206265206166746572207374617274000000000000000000604482015260640162000074565b600082116200019e5760405162461bcd60e51b81526020600482015260116024820152700746f74616c2063616e6e6f74206265203607c1b604482015260640162000074565b6001600160a01b03808716608081905260a087905260e0869052610100859052610120849052908216610140526040805163313ce56760e01b8152905163313ce567916004808201926020929091908290030181865afa15801562000207573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200022d9190620003b4565b6200023a90600a620004f3565b60c0526200024a60003362000282565b620002767f33ccb9ed30bc572500993b7ca8e527619cf334431f74b8ecd1c841304ef9c6033362000282565b50505050505062000504565b6200028e82826200030d565b620003095760008281526006602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620002c83390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b80516001600160a01b03811681146200035257600080fd5b919050565b60008060008060008060c087890312156200037157600080fd5b6200037c876200033a565b955060208701519450604087015193506060870151925060808701519150620003a860a088016200033a565b90509295509295509295565b600060208284031215620003c757600080fd5b815160ff81168114620003d957600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620004375781600019048211156200041b576200041b620003e0565b808516156200042957918102915b93841c9390800290620003fb565b509250929050565b600082620004505750600162000334565b816200045f5750600062000334565b81600181146200047857600281146200048357620004a3565b600191505062000334565b60ff841115620004975762000497620003e0565b50506001821b62000334565b5060208310610133831016604e8410600b8410161715620004c8575081810a62000334565b620004d48383620003f6565b8060001904821115620004eb57620004eb620003e0565b029392505050565b6000620003d960ff8416836200043f565b60805160a05160c05160e051610100516101205161014051611ec8620005c8600039600081816103e201528181610df50152610f4501526000818161037d0152818161040601528181610a2601526116640152600081816105bc015281816107b201528181610c0a0152610d240152600081816104c50152610cf901526000818161097b01526111880152600081816102d40152818161095701526111ac015260008181610310015281816108d30152818161115301526113690152611ec86000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c8063acde5d281161013b578063d0a24e47116100b8578063ed7196bc1161007c578063ed7196bc146105af578063efbe1c1c146105b7578063f00a46f3146105de578063fa89401a146105f1578063fca89df01461060457600080fd5b8063d0a24e4714610522578063d547741f1461054b578063d7e64c001461055e578063d96a094a14610566578063e8448f021461057957600080fd5b8063c0cd9ce2116100ff578063c0cd9ce2146104e7578063c4878883146104ef578063c80ec522146104f8578063cbf2cc2b14610505578063cd2b30261461050f57600080fd5b8063acde5d281461046b578063b03aee4e1461047e578063b304b2e1146104a5578063b81b8630146104ad578063be9a6555146104c057600080fd5b806336568abe116101c9578063711a9f351161018d578063711a9f35146103d55780637b103999146103dd5780637b8db5861461040457806391d148541461042a578063a217fddf1461046357600080fd5b806336568abe1461034a5780633ccfd60b1461035d578063533319331461036557806360219c7b1461037857806369d917c91461039f57600080fd5b80631c120bc1116102105780631c120bc1146102a4578063248a9ca3146102ac5780632c4e722e146102cf5780632f2ff15d146102f65780633013ce291461030b57600080fd5b806301ffc9a7146102425780630276650b1461026a57806318dfcf7b146102815780631a15c6d71461028a575b600080fd5b610255610250366004611b9f565b61062d565b60405190151581526020015b60405180910390f35b61027360055481565b604051908152602001610261565b610273600a5481565b6000546102979060ff1681565b6040516102619190611bdf565b600b54610273565b6102736102ba366004611c07565b60009081526006602052604090206001015490565b6102737f000000000000000000000000000000000000000000000000000000000000000081565b610309610304366004611c3c565b610658565b005b6103327f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610261565b610309610358366004611c3c565b610683565b610309610706565b610273610373366004611c07565b610953565b6102737f000000000000000000000000000000000000000000000000000000000000000081565b6102736103ad366004611c07565b6000908152600960209081526040808320546001600160a01b03168352600890915290205490565b6102556109aa565b6103327f000000000000000000000000000000000000000000000000000000000000000081565b7f0000000000000000000000000000000000000000000000000000000000000000610273565b610255610438366004611c3c565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b610273600081565b610273610479366004611c68565b6109cc565b6102737f33ccb9ed30bc572500993b7ca8e527619cf334431f74b8ecd1c841304ef9c60381565b610273610a1c565b6102736104bb366004611c68565b610a4f565b6102737f000000000000000000000000000000000000000000000000000000000000000081565b610309610a71565b610273600b5481565b600c546102559060ff1681565b610273620186a081565b61030961051d366004611c07565b610bdd565b610273610530366004611c68565b6001600160a01b031660009081526008602052604090205490565b610309610559366004611c3c565b610cd1565b600a54610273565b610309610574366004611c07565b610cf7565b60015460025460035460045461058f9392919084565b604080519485526020850193909352918301526060820152608001610261565b61025561117b565b6102737f000000000000000000000000000000000000000000000000000000000000000081565b6102736105ec366004611c07565b611184565b6103096105ff366004611c68565b6111d1565b610332610612366004611c07565b600d602052600090815260409020546001600160a01b031681565b60006001600160e01b0319821663854aabcb60e01b1480610652575061065282611426565b92915050565b600082815260066020526040902060010154610674813361145b565b61067e83836114db565b505050565b6001600160a01b03811633146106f85760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b610702828261157d565b5050565b6000610712813361145b565b61071a6109aa565b6107585760405162461bcd60e51b815260206004820152600f60248201526e18d85c081b9bdd081e595d081cd95d608a1b60448201526064016106ef565b600260075414156107ab5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106ef565b60026007557f000000000000000000000000000000000000000000000000000000000000000042116108145760405162461bcd60e51b81526020600482015260126024820152711cd85b19481b9bdd08195b991959081e595d60721b60448201526064016106ef565b600c5460ff161561085b5760405162461bcd60e51b815260206004820152601160248201527030b63932b0b23c903bb4ba34323930bbb760791b60448201526064016106ef565b600c805460ff191660011790556000610872610a1c565b9050600061087f82611184565b60405181815290915033907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a260405163a9059cbb60e01b8152336004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063a9059cbb906044016020604051808303816000875af1158015610924573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109489190611c83565b505060016007555050565b60007f00000000000000000000000000000000000000000000000000000000000000006109a07f000000000000000000000000000000000000000000000000000000000000000084611cbb565b6106529190611cda565b600060025b60005460ff1660038111156109c6576109c6611bc9565b14905090565b60006109d66109aa565b6109e257506000919050565b6001600160a01b03821660009081526008602052604081205490610a0584610a4f565b9050610a146105ec8284611cfc565b949350505050565b6000610a4a600b547f0000000000000000000000000000000000000000000000000000000000000000611600565b905090565b6001600160a01b03811660009081526008602052604081205461065290611618565b600160005460ff166003811115610a8a57610a8a611bc9565b14610a9457600080fd5b60408051608081018252600154815260025460208201526003549181019190915260045460608201526000610ac8600a5490565b6005549091505b825182118015610ae15750620186a05a115b15610b7d5782516000908152600960209081526040808320546001600160a01b031683526008909152902054610b178183611600565b84602001818151610b289190611d13565b905250610b40610b39836001611d13565b8290611600565b84604001818151610b519190611d13565b9052506060840151610b639082611643565b60608501525082518390610b7690611d2b565b9052610acf565b8251600181905560208401516002556040840151600355606084015160045582141561067e576000610baf8285611652565b90508015610bc9576000805460ff19166002179055610bd7565b6000805460ff191660031790555b50505050565b7f33ccb9ed30bc572500993b7ca8e527619cf334431f74b8ecd1c841304ef9c603610c08813361145b565b7f00000000000000000000000000000000000000000000000000000000000000004211610c675760405162461bcd60e51b815260206004820152600d60248201526c39b0b632903737ba1037bb32b960991b60448201526064016106ef565b60026007541415610cba5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106ef565b6002600755610cc8826116ee565b50506001600755565b600082815260066020526040902060010154610ced813361145b565b61067e838361157d565b7f00000000000000000000000000000000000000000000000000000000000000004210158015610d4757507f00000000000000000000000000000000000000000000000000000000000000004211155b610d855760405162461bcd60e51b815260206004820152600f60248201526e73616c65206e6f742061637469766560881b60448201526064016106ef565b60026007541415610dd85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106ef565b60026007556040516368c610b760e11b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d18c216e90602401602060405180830381865afa158015610e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e689190611d46565b905080610ea85760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd081c9959da5cdd195c995960921b60448201526064016106ef565b6000818152600d60205260409020546001600160a01b03161580610ee257506000818152600d60205260409020546001600160a01b031633145b610f2e5760405162461bcd60e51b815260206004820181905260248201527f6964207265676973746572656420746f20616e6f74686572206164647265737360448201526064016106ef565b60405163a535f5e960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a535f5e990610f9a90849060040190815260406020820181905260049082015263706c757360e01b606082015260800190565b602060405180830381865afa158015610fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdb9190611c83565b6110165760405162461bcd60e51b815260206004820152600c60248201526b6e6f742066756c6c206b796360a01b60448201526064016106ef565b600061102183611184565b9050600081116110635760405162461bcd60e51b815260206004820152600d60248201526c63616e2774206265207a65726f60981b60448201526064016106ef565b33600090815260086020526040902054806110ad57600a8054600090815260096020526040812080546001600160a01b03191633179055815491906110a783611d2b565b91905055505b33600090815260086020526040812080548692906110cc908490611d13565b9250508190555083600b60008282546110e59190611d13565b90915550506000838152600d602090815260409182902080546001600160a01b031916339081179091558251858152918201879052917f12cb4648cf3058b17ceeb33e579f8b0bc269fe0843f3900b8e24b6c54871703c910160405180910390a26109486001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330856117c3565b600060016109af565b60007f00000000000000000000000000000000000000000000000000000000000000006109a07f000000000000000000000000000000000000000000000000000000000000000084611cbb565b6111d96109aa565b6112175760405162461bcd60e51b815260206004820152600f60248201526e18d85c081b9bdd081e595d081cd95d608a1b60448201526064016106ef565b6002600754141561126a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016106ef565b60026007556001600160a01b0381166000908152600860205260409020600181015460ff16156112cf5760405162461bcd60e51b815260206004820152601060248201526f185b1c9958591e481c99599d5b99195960821b60448201526064016106ef565b60006112da836109cc565b9050600081116113225760405162461bcd60e51b8152602060048201526013602482015272139bc81d1bdad95b9cc81d1bc81c99599d5b99606a1b60448201526064016106ef565b6001600160a01b03838116600081815260086020526040908190206001908101805460ff191690911790555163a9059cbb60e01b81526004810191909152602481018390527f00000000000000000000000000000000000000000000000000000000000000009091169063a9059cbb906044016020604051808303816000875af11580156113b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d89190611c83565b50826001600160a01b03167fbb28353e4598c3b9199101a66e0989549b659a59a54d2c27fbb183f1932c8e6d8260405161141491815260200190565b60405180910390a25050600160075550565b60006001600160e01b03198216637965db0b60e01b148061065257506301ffc9a760e01b6001600160e01b0319831614610652565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff1661070257611499816001600160a01b0316601461181d565b6114a483602061181d565b6040516020016114b5929190611d8b565b60408051601f198184030181529082905262461bcd60e51b82526106ef91600401611e00565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff166107025760008281526006602090815260408083206001600160a01b03851684529091529020805460ff191660011790556115393390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff16156107025760008281526006602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600081831061160f5781611611565b825b9392505050565b60006116226109aa565b61162e57506000919050565b600554821061163f57505060055490565b5090565b600082821061160f5781611611565b60008061165e600b5490565b905060007f00000000000000000000000000000000000000000000000000000000000000009050818460600151111561169657600080fd5b81846020015111156116a757600080fd5b81846040015111156116b857600080fd5b8082116116ce5750505060608101518214610652565b8084604001511180156116e5575080846020015111155b92505050610652565b6000805460ff16600381111561170657611706611bc9565b14806117285750600360005460ff16600381111561172657611726611bc9565b145b6117745760405162461bcd60e51b815260206004820152601a60248201527f616c726561647920736574206f7220696e2070726f677265737300000000000060448201526064016106ef565b60058190556000805460ff1916600190811782556040805160808101825283815260208101849052908101839052606001829052819055600281905560038190556004556117c0610a71565b50565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610bd79085906119b9565b6060600061182c836002611cbb565b611837906002611d13565b67ffffffffffffffff81111561184f5761184f611e33565b6040519080825280601f01601f191660200182016040528015611879576020820181803683370190505b509050600360fc1b8160008151811061189457611894611e49565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106118c3576118c3611e49565b60200101906001600160f81b031916908160001a90535060006118e7846002611cbb565b6118f2906001611d13565b90505b600181111561196a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061192657611926611e49565b1a60f81b82828151811061193c5761193c611e49565b60200101906001600160f81b031916908160001a90535060049490941c9361196381611e5f565b90506118f5565b5083156116115760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106ef565b6000611a0e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611a8b9092919063ffffffff16565b80519091501561067e5780806020019051810190611a2c9190611c83565b61067e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016106ef565b6060610a148484600085856001600160a01b0385163b611aed5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016106ef565b600080866001600160a01b03168587604051611b099190611e76565b60006040518083038185875af1925050503d8060008114611b46576040519150601f19603f3d011682016040523d82523d6000602084013e611b4b565b606091505b5091509150611b5b828286611b66565b979650505050505050565b60608315611b75575081611611565b825115611b855782518084602001fd5b8160405162461bcd60e51b81526004016106ef9190611e00565b600060208284031215611bb157600080fd5b81356001600160e01b03198116811461161157600080fd5b634e487b7160e01b600052602160045260246000fd5b6020810160048310611c0157634e487b7160e01b600052602160045260246000fd5b91905290565b600060208284031215611c1957600080fd5b5035919050565b80356001600160a01b0381168114611c3757600080fd5b919050565b60008060408385031215611c4f57600080fd5b82359150611c5f60208401611c20565b90509250929050565b600060208284031215611c7a57600080fd5b61161182611c20565b600060208284031215611c9557600080fd5b8151801515811461161157600080fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611cd557611cd5611ca5565b500290565b600082611cf757634e487b7160e01b600052601260045260246000fd5b500490565b600082821015611d0e57611d0e611ca5565b500390565b60008219821115611d2657611d26611ca5565b500190565b6000600019821415611d3f57611d3f611ca5565b5060010190565b600060208284031215611d5857600080fd5b5051919050565b60005b83811015611d7a578181015183820152602001611d62565b83811115610bd75750506000910152565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611dc3816017850160208801611d5f565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611df4816028840160208801611d5f565b01602801949350505050565b6020815260008251806020840152611e1f816040850160208701611d5f565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600081611e6e57611e6e611ca5565b506000190190565b60008251611e88818460208701611d5f565b919091019291505056fea2646970667358221220c28111b3410659fe4342a26c6a38fee22fd84454a1412dd4f3e2ab6601c495f064736f6c634300080c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allocated()": {
        "returns": {
          "_0": "the amount of tokens already allocated"
        }
      },
      "allocation(address)": {
        "params": {
          "_who": "The address to query"
        }
      },
      "buy(uint256)": {
        "details": "aUSD allowance must be previously set by spenderActual $CTND allocation is only available once individual cap is setNeeds to be approved by Fractal via the Registry",
        "params": {
          "_paymentAmount": "amount in payment token to commit"
        }
      },
      "constructor": {
        "params": {
          "_end": "End timestamp",
          "_paymentToken": "Token accepted as payment",
          "_rate": "token:paymentToken exchange rate, multiplied by 10e18",
          "_start": "Start timestamp"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "investorAmountAt(uint256)": {
        "returns": {
          "_0": "Amount of the nth investor"
        }
      },
      "investorCount()": {
        "returns": {
          "_0": "How many individual investors exist"
        }
      },
      "refund(address)": {
        "params": {
          "to": "Address to refund to"
        }
      },
      "refundAmount(address)": {
        "params": {
          "to": "The address to query"
        },
        "returns": {
          "_0": "The currently claimable amount"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "risingTide_isValidCap()": {
        "returns": {
          "_0": "true if current cap is already validated"
        }
      },
      "risingTide_totalAllocatedUncapped()": {
        "returns": {
          "_0": "Total amount invested"
        }
      },
      "risingTide_totalCap()": {
        "returns": {
          "_0": "amount corresponding to the total supply available for distribution"
        }
      },
      "risingTide_validating()": {
        "returns": {
          "_0": "true if validation of current cap is still ongoing"
        }
      },
      "setIndividualCap(uint256)": {
        "details": "Can only be called once",
        "params": {
          "_cap": "new individual cap"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Purchase(address,uint256,uint256)": {
        "notice": "Emitted for every public purchase"
      },
      "Refund(address,uint256)": {
        "notice": "Emitted for every refund given"
      }
    },
    "kind": "user",
    "methods": {
      "CAP_VALIDATION_GAS_LIMIT()": {
        "notice": "Min gas required to run one more cap validation iteration"
      },
      "_investorCount()": {
        "notice": "total unique investors"
      },
      "allocation(address)": {
        "notice": "Returns the amount of tokens that have been allocated in this sale for a given address (applying the individual cap)"
      },
      "buy(uint256)": {
        "notice": "Commits an amount of $aUSD to buy $CTND"
      },
      "end()": {
        "notice": "Timestamp at which sale ends"
      },
      "fractalIdToAddress(bytes32)": {
        "notice": "Fractal Id associated with the address to be used in this sale"
      },
      "individualCap()": {
        "notice": "The currently set cap Maximum amount of tokens that each buyer can actually get"
      },
      "paymentToken()": {
        "notice": "See {ISale.paymentToken}"
      },
      "paymentTokenToToken(uint256)": {
        "notice": "How many $CTND will be received for the given payment amount"
      },
      "rate()": {
        "notice": "Fixed price of token, expressed in paymentToken amount"
      },
      "refund(address)": {
        "notice": "Refunds currently refundable amount for the given address"
      },
      "refundAmount(address)": {
        "notice": "Returns the amount of tokens that are meant for refund due to the rising tide mechanism"
      },
      "registry()": {
        "notice": "Fractal Registry address"
      },
      "risingTideCache()": {
        "notice": "Calculation cache"
      },
      "risingTideState()": {
        "notice": "Current state"
      },
      "risingTide_totalAllocatedUncapped()": {
        "notice": "How many allocations have been made, regardless of the future individual cap"
      },
      "risingTide_totalCap()": {
        "notice": "How many tokens are to be distributed in total"
      },
      "risingTide_validate()": {
        "notice": "Continues a pending validation of the individual cap"
      },
      "setIndividualCap(uint256)": {
        "notice": "Sets the individual cap"
      },
      "start()": {
        "notice": "Timestamp at which sale starts"
      },
      "tokenToPaymentToken(uint256)": {
        "notice": "How many $aUSD will be received for the given $CTND amount"
      },
      "totalUncappedAllocations()": {
        "notice": "How many tokens have been allocated, before cap calculation"
      },
      "withdraw()": {
        "notice": "Allows a privileged account to withdraw payment tokens once the sale is overDoes not allow withdrawing funds meant for refunds"
      },
      "withdrawn()": {
        "notice": "Did the admins already withdraw all aUSD from sales"
      }
    },
    "notice": "Citizend token sale contract Users interact with this contract to deposit $aUSD in exchange for $CTND. The contract should hold all $CTND tokens meant to be distributed in the public sale",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2297,
        "contract": "contracts/token/Sale.sol:Sale",
        "label": "risingTideState",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(RisingTideState)2280"
      },
      {
        "astId": 2301,
        "contract": "contracts/token/Sale.sol:Sale",
        "label": "risingTideCache",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(RisingTideCache)2289_storage"
      },
      {
        "astId": 2304,
        "contract": "contracts/token/Sale.sol:Sale",
        "label": "individualCap",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 24,
        "contract": "contracts/token/Sale.sol:Sale",
        "label": "_roles",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 484,
        "contract": "contracts/token/Sale.sol:Sale",
        "label": "_status",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 8325,
        "contract": "contracts/token/Sale.sol:Sale",
        "label": "accounts",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Account)8274_storage)"
      },
      {
        "astId": 8330,
        "contract": "contracts/token/Sale.sol:Sale",
        "label": "investorByIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 8333,
        "contract": "contracts/token/Sale.sol:Sale",
        "label": "_investorCount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 8336,
        "contract": "contracts/token/Sale.sol:Sale",
        "label": "totalUncappedAllocations",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 8342,
        "contract": "contracts/token/Sale.sol:Sale",
        "label": "withdrawn",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 8347,
        "contract": "contracts/token/Sale.sol:Sale",
        "label": "fractalIdToAddress",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes32,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(RisingTideState)2280": {
        "encoding": "inplace",
        "label": "enum RisingTide.RisingTideState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Account)8274_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Sale.Account)",
        "numberOfBytes": "32",
        "value": "t_struct(Account)8274_storage"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_struct(Account)8274_storage": {
        "encoding": "inplace",
        "label": "struct Sale.Account",
        "members": [
          {
            "astId": 8271,
            "contract": "contracts/token/Sale.sol:Sale",
            "label": "uncappedAllocation",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8273,
            "contract": "contracts/token/Sale.sol:Sale",
            "label": "refunded",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RisingTideCache)2289_storage": {
        "encoding": "inplace",
        "label": "struct RisingTide.RisingTideCache",
        "members": [
          {
            "astId": 2282,
            "contract": "contracts/token/Sale.sol:Sale",
            "label": "index",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2284,
            "contract": "contracts/token/Sale.sol:Sale",
            "label": "sumForCap",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2286,
            "contract": "contracts/token/Sale.sol:Sale",
            "label": "sumForNextCap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2288,
            "contract": "contracts/token/Sale.sol:Sale",
            "label": "largest",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/token/Sale.sol:Sale",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/token/Sale.sol:Sale",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}