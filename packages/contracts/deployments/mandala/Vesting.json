{
  "address": "0xbE659Ca495E7e8D5Cf541A462607e8F77df7d555",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_publicSaleVestingMonths",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_sales",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_privateSaleCap",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "saleContract",
          "type": "address"
        }
      ],
      "name": "AddSale",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimVesting",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRIVATE_SALE_MAX_CLIFF_MONTHS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRIVATE_SALE_VESTING_MONTHS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRIVATE_SELLER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sale",
          "type": "address"
        }
      ],
      "name": "addSale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimablePrivate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "claimablePublic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "cliffMonths",
          "type": "uint16"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "name": "createPrivateSaleVest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "privateAllocations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cliffMonths",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vestingMonths",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "privateSaleCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleCliffMonths",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicSaleVestingMonths",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "refund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "sales",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "totalAllocated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "totalAllocatedPrivate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "totalAllocatedPublic",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPrivateSales",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "usedNonces",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d66a95548472d233ecfa7c8eeaee944158a164bec5f9e40e02f7e5577a639b0",
  "receipt": {
    "to": null,
    "from": "0x0077014b4C74d9b1688847386B24Ed23Fdf14Be8",
    "contractAddress": "0xbE659Ca495E7e8D5Cf541A462607e8F77df7d555",
    "transactionIndex": 0,
    "gasUsed": "1777993",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x5bb01f6bc728fcb38ddd86d1e98268bf67dfc762350d8dc31cee291d18f795eb",
    "transactionHash": "0x7d66a95548472d233ecfa7c8eeaee944158a164bec5f9e40e02f7e5577a639b0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1026521,
        "transactionHash": "0x7d66a95548472d233ecfa7c8eeaee944158a164bec5f9e40e02f7e5577a639b0",
        "address": "0xbE659Ca495E7e8D5Cf541A462607e8F77df7d555",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000077014b4c74d9b1688847386b24ed23fdf14be8",
          "0x0000000000000000000000000077014b4c74d9b1688847386b24ed23fdf14be8"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5bb01f6bc728fcb38ddd86d1e98268bf67dfc762350d8dc31cee291d18f795eb"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1026521,
        "transactionHash": "0x7d66a95548472d233ecfa7c8eeaee944158a164bec5f9e40e02f7e5577a639b0",
        "address": "0xbE659Ca495E7e8D5Cf541A462607e8F77df7d555",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xd0de816a1a8e5ff14e67929176955ab95fac2ee76955cd54d33fac6e55aee234",
          "0x0000000000000000000000000077014b4c74d9b1688847386b24ed23fdf14be8",
          "0x0000000000000000000000000077014b4c74d9b1688847386b24ed23fdf14be8"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x5bb01f6bc728fcb38ddd86d1e98268bf67dfc762350d8dc31cee291d18f795eb"
      }
    ],
    "blockNumber": 1026521,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    3,
    "0x1987495696777904F35a9F7e498F889522eEd98e",
    [],
    1651659600,
    10000
  ],
  "numDeployments": 1,
  "solcInputHash": "dfb224aae55ceb1d52b02ce7efbb10f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicSaleVestingMonths\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_sales\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_privateSaleCap\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"saleContract\",\"type\":\"address\"}],\"name\":\"AddSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_SALE_MAX_CLIFF_MONTHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_SALE_VESTING_MONTHS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRIVATE_SELLER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sale\",\"type\":\"address\"}],\"name\":\"addSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimablePrivate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claimablePublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"cliffMonths\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"name\":\"createPrivateSaleVest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"privateAllocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cliffMonths\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingMonths\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateSaleCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleCliffMonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicSaleVestingMonths\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sales\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"totalAllocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"totalAllocatedPrivate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"totalAllocatedPublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPrivateSales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"usedNonces\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addSale(address)\":{\"params\":{\"_sale\":\"The address of the sale contract\"}},\"claim(address)\":{\"params\":{\"to\":\"Address to claim from\"}},\"claimable(address)\":{\"params\":{\"to\":\"The address to query\"},\"returns\":{\"_0\":\"The currently claimable amount\"}},\"constructor\":{\"params\":{\"_privateSaleCap\":\"Total cap for the private sale\",\"_publicSaleVestingMonths\":\"Number of months of vesting for the public sale\",\"_sales\":\"Addresses for the initial sales contracts\",\"_startTime\":\"Start time of the vesting\",\"_token\":\"Address for the CTND token contract\"}},\"createPrivateSaleVest(address,uint256,uint16,uint64)\":{\"params\":{\"amount\":\"Amount of tokens to vest\",\"cliffMonths\":\"Number of months to wait before the vesting starts\",\"nonce\":\"Nonce used to prevent the same sale from being registered twice*\",\"to\":\"Beneficiary\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"refund(address)\":{\"details\":\"It will trigger a number of transactions equal to the number of sales (assuming all of them have something to refund)It uses the low level `call` function to ensure that even if for some reason an address that does not belong to a sale contract makes its way to the sales list, we can recover from it.\",\"params\":{\"to\":\"Beneficiary*\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalAllocated(address)\":{\"returns\":{\"_0\":\"How many tokens allocated in total for a given address, for private and public sales, including already claimed amount*\"}}},\"stateVariables\":{\"claimed\":{\"return\":\"Amount already claimed by a given address\",\"returns\":{\"_0\":\"Amount already claimed by a given address\"}},\"privateSaleCap\":{\"return\":\"The total cap for the private sale\",\"returns\":{\"_0\":\"The total cap for the private sale\"}},\"publicSaleCliffMonths\":{\"return\":\"The cliff period, in months, for public sale vesting\",\"returns\":{\"_0\":\"The cliff period, in months, for public sale vesting\"}},\"publicSaleVestingMonths\":{\"return\":\"The vesting duration, in months\",\"returns\":{\"_0\":\"The vesting duration, in months\"}},\"startTime\":{\"return\":\"The start time for the vesting\",\"returns\":{\"_0\":\"The start time for the vesting\"}},\"token\":{\"return\":\"The token being vested\",\"returns\":{\"_0\":\"The token being vested\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addSale(address)\":{\"notice\":\"Adds an address to the list of sale contracts. Can only be called by the admin. The sale contract must implement ISale and ERC165\"},\"claim(address)\":{\"notice\":\"Claims currently claimable amount for the given address\"},\"claimable(address)\":{\"notice\":\"Calculates claimable amount of tokens for an address. This should take into account:   - total vested amount   - already claimed amount   - number of months elapsed since the end of the account's cliff period   - total number of months this account is vesting for Vesting should be lienear once cliff ends, but in monthly ticks, instead of a continuous release\"},\"createPrivateSaleVest(address,uint256,uint16,uint64)\":{\"notice\":\"Creates a new vesting with private sale parameters If the address is already registered, it does nothing. If the address has been registered in a public sale, it reverts the transaction Also checks if the private sale cap has been reached, and if so, reverts.\"},\"refund(address)\":{\"notice\":\"Triggers the refund of a given address on all sales\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/Vesting.sol\":\"Vesting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xf7291d7213336b00ee7edbf7cd5034778dd7b0bda2a7489e664f1e5cacc6c24e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/libraries/DateTime.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n// ----------------------------------------------------------------------------\\n// BokkyPooBah's DateTime Library v1.01\\n//\\n// A gas-efficient Solidity date and time library\\n//\\n// https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\\n//\\n// Tested date range 1970/01/01 to 2345/12/31\\n//\\n// Conventions:\\n// Unit      | Range         | Notes\\n// :-------- |:-------------:|:-----\\n// timestamp | >= 0          | Unix timestamp, number of seconds since 1970/01/01 00:00:00 UTC\\n// year      | 1970 ... 2345 |\\n// month     | 1 ... 12      |\\n// day       | 1 ... 31      |\\n// hour      | 0 ... 23      |\\n// minute    | 0 ... 59      |\\n// second    | 0 ... 59      |\\n// dayOfWeek | 1 ... 7       | 1 = Monday, ..., 7 = Sunday\\n//\\n//\\n// Enjoy. (c) BokkyPooBah / Bok Consulting Pty Ltd 2018-2019. The MIT Licence.\\n// ----------------------------------------------------------------------------\\n\\nlibrary DateTime {\\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\\n    uint256 constant SECONDS_PER_MINUTE = 60;\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    uint256 constant DOW_MON = 1;\\n    uint256 constant DOW_TUE = 2;\\n    uint256 constant DOW_WED = 3;\\n    uint256 constant DOW_THU = 4;\\n    uint256 constant DOW_FRI = 5;\\n    uint256 constant DOW_SAT = 6;\\n    uint256 constant DOW_SUN = 7;\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate the number of days from 1970/01/01 to year/month/day using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // days = day\\n    //      - 32075\\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\\n    //      - offset\\n    // ------------------------------------------------------------------------\\n    function _daysFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 _days) {\\n        require(year >= 1970);\\n        int256 _year = int256(year);\\n        int256 _month = int256(month);\\n        int256 _day = int256(day);\\n\\n        int256 __days = _day -\\n            32075 +\\n            (1461 * (_year + 4800 + (_month - 14) / 12)) /\\n            4 +\\n            (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\\n            12 -\\n            (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\\n            4 -\\n            OFFSET19700101;\\n\\n        _days = uint256(__days);\\n    }\\n\\n    // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    function _daysToDate(uint256 _days)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    function timestampFromDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\\n    }\\n\\n    function timestampFromDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (uint256 timestamp) {\\n        timestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            hour *\\n            SECONDS_PER_HOUR +\\n            minute *\\n            SECONDS_PER_MINUTE +\\n            second;\\n    }\\n\\n    function timestampToDate(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function timestampToDateTime(uint256 timestamp)\\n        internal\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day,\\n            uint256 hour,\\n            uint256 minute,\\n            uint256 second\\n        )\\n    {\\n        (year, month, day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n        secs = secs % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n        second = secs % SECONDS_PER_MINUTE;\\n    }\\n\\n    function isValidDate(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day\\n    ) internal pure returns (bool valid) {\\n        if (year >= 1970 && month > 0 && month <= 12) {\\n            uint256 daysInMonth = _getDaysInMonth(year, month);\\n            if (day > 0 && day <= daysInMonth) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isValidDateTime(\\n        uint256 year,\\n        uint256 month,\\n        uint256 day,\\n        uint256 hour,\\n        uint256 minute,\\n        uint256 second\\n    ) internal pure returns (bool valid) {\\n        if (isValidDate(year, month, day)) {\\n            if (hour < 24 && minute < 60 && second < 60) {\\n                valid = true;\\n            }\\n        }\\n    }\\n\\n    function isLeapYear(uint256 timestamp)\\n        internal\\n        pure\\n        returns (bool leapYear)\\n    {\\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n        leapYear = _isLeapYear(year);\\n    }\\n\\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\\n    }\\n\\n    function isWeekDay(uint256 timestamp) internal pure returns (bool weekDay) {\\n        weekDay = getDayOfWeek(timestamp) <= DOW_FRI;\\n    }\\n\\n    function isWeekEnd(uint256 timestamp) internal pure returns (bool weekEnd) {\\n        weekEnd = getDayOfWeek(timestamp) >= DOW_SAT;\\n    }\\n\\n    function getDaysInMonth(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        (uint256 year, uint256 month, ) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        daysInMonth = _getDaysInMonth(year, month);\\n    }\\n\\n    function _getDaysInMonth(uint256 year, uint256 month)\\n        internal\\n        pure\\n        returns (uint256 daysInMonth)\\n    {\\n        if (\\n            month == 1 ||\\n            month == 3 ||\\n            month == 5 ||\\n            month == 7 ||\\n            month == 8 ||\\n            month == 10 ||\\n            month == 12\\n        ) {\\n            daysInMonth = 31;\\n        } else if (month != 2) {\\n            daysInMonth = 30;\\n        } else {\\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\\n        }\\n    }\\n\\n    // 1 = Monday, 7 = Sunday\\n    function getDayOfWeek(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 dayOfWeek)\\n    {\\n        uint256 _days = timestamp / SECONDS_PER_DAY;\\n        dayOfWeek = ((_days + 3) % 7) + 1;\\n    }\\n\\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\\n    }\\n\\n    function getHour(uint256 timestamp) internal pure returns (uint256 hour) {\\n        uint256 secs = timestamp % SECONDS_PER_DAY;\\n        hour = secs / SECONDS_PER_HOUR;\\n    }\\n\\n    function getMinute(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 minute)\\n    {\\n        uint256 secs = timestamp % SECONDS_PER_HOUR;\\n        minute = secs / SECONDS_PER_MINUTE;\\n    }\\n\\n    function getSecond(uint256 timestamp)\\n        internal\\n        pure\\n        returns (uint256 second)\\n    {\\n        second = timestamp % SECONDS_PER_MINUTE;\\n    }\\n\\n    function addYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        year += _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        month += _months;\\n        year += (month - 1) / 12;\\n        month = ((month - 1) % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _days * SECONDS_PER_DAY;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function addSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp + _seconds;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subYears(uint256 timestamp, uint256 _years)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        year -= _years;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMonths(uint256 timestamp, uint256 _months)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        (uint256 year, uint256 month, uint256 day) = _daysToDate(\\n            timestamp / SECONDS_PER_DAY\\n        );\\n        uint256 yearMonth = year * 12 + (month - 1) - _months;\\n        year = yearMonth / 12;\\n        month = (yearMonth % 12) + 1;\\n        uint256 daysInMonth = _getDaysInMonth(year, month);\\n        if (day > daysInMonth) {\\n            day = daysInMonth;\\n        }\\n        newTimestamp =\\n            _daysFromDate(year, month, day) *\\n            SECONDS_PER_DAY +\\n            (timestamp % SECONDS_PER_DAY);\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subDays(uint256 timestamp, uint256 _days)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _days * SECONDS_PER_DAY;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subHours(uint256 timestamp, uint256 _hours)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _hours * SECONDS_PER_HOUR;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subMinutes(uint256 timestamp, uint256 _minutes)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function subSeconds(uint256 timestamp, uint256 _seconds)\\n        internal\\n        pure\\n        returns (uint256 newTimestamp)\\n    {\\n        newTimestamp = timestamp - _seconds;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffYears(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _years)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear, , ) = _daysToDate(fromTimestamp / SECONDS_PER_DAY);\\n        (uint256 toYear, , ) = _daysToDate(toTimestamp / SECONDS_PER_DAY);\\n        _years = toYear - fromYear;\\n    }\\n\\n    function diffMonths(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _months)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        (uint256 fromYear, uint256 fromMonth, ) = _daysToDate(\\n            fromTimestamp / SECONDS_PER_DAY\\n        );\\n        (uint256 toYear, uint256 toMonth, ) = _daysToDate(\\n            toTimestamp / SECONDS_PER_DAY\\n        );\\n        _months = toYear * 12 + toMonth - fromYear * 12 - fromMonth;\\n    }\\n\\n    function diffDays(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _days)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _days = (toTimestamp - fromTimestamp) / SECONDS_PER_DAY;\\n    }\\n\\n    function diffHours(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _hours)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n\\n    function diffMinutes(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _minutes)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _minutes = (toTimestamp - fromTimestamp) / SECONDS_PER_MINUTE;\\n    }\\n\\n    function diffSeconds(uint256 fromTimestamp, uint256 toTimestamp)\\n        internal\\n        pure\\n        returns (uint256 _seconds)\\n    {\\n        require(fromTimestamp <= toTimestamp);\\n        _seconds = toTimestamp - fromTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x2d8bf3276f5c13e6ce88d0f26e32a3ecd418f8090865af9d9f85b3784a089cef\",\"license\":\"MIT\"},\"contracts/token/ISale.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\ninterface ISale {\\n    /// The $aUSD token\\n    function paymentToken() external view returns (address);\\n\\n    /// How many $CTND will be received for the given payment amount\\n    function paymentTokenToToken(uint256 _paymentAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// How many $aUSD will be received for the given $CTND amount\\n    function tokenToPaymentToken(uint256 _tokenAmount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /// Commits an amount of $aUSD to buy $CTND\\n    ///\\n    /// @dev aUSD allowance must be previously set by spender\\n    /// @dev Actual $CTND allocation is only available once individual cap is set\\n    /// @dev Needs to be approved by Fractal via the Registry\\n    ///\\n    /// @param _paymentAmount amount in payment token to commit\\n    function buy(uint256 _paymentAmount) external;\\n\\n    /**\\n     * Refunds currently refundable amount for the given address\\n     *\\n     * @param to Address to refund to\\n     */\\n    function refund(address to) external;\\n\\n    /**\\n     * Returns the amount of tokens that are meant for refund due to the\\n     * rising tide mechanism\\n     *\\n     * @param to The address to query\\n     * @return The currently claimable amount\\n     */\\n    function refundAmount(address to) external view returns (uint256);\\n\\n    /**\\n     * Sets the individual cap for investors, which will then be used when\\n     * claiming or refunding. Only callable by the cap validator role.\\n     *\\n     * @param cap The cap per investor to be set, specified in $CTND\\n     */\\n    function setIndividualCap(uint256 cap) external;\\n\\n    /**\\n     * Returns the amount of tokens that have been allocated in this sale for\\n     * a given address (applying the individual cap)\\n     *\\n     * @param _who The address to query\\n     */\\n    function allocation(address _who) external view returns (uint256);\\n\\n    /**\\n     * Returns the amount of tokens that have been allocated in this sale for\\n     * a given address (ignoring the individual cap)\\n     *\\n     * @param _who The address to query\\n     */\\n    function uncappedAllocation(address _who) external view returns (uint256);\\n\\n    /**\\n     * Allows a privileged account to withdraw payment tokens once the sale is over\\n     *\\n     * @notice Does not allow withdrawing funds meant for refunds\\n     */\\n    function withdraw() external;\\n}\\n\",\"keccak256\":\"0x13d04d4058ddc115117284c4c3f0e16699dc974cefa7b2fb5e94b153c684dc60\",\"license\":\"MIT\"},\"contracts/token/IVesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\ninterface IVesting {\\n    /// @return The cliff period, in months, for public sale vesting\\n    function publicSaleCliffMonths() external view returns (uint256);\\n\\n    /// @return The vesting duration, in months\\n    function publicSaleVestingMonths() external view returns (uint256);\\n\\n    /// @return The token being vested\\n    function token() external view returns (address);\\n\\n    /// @return The start time for the vesting\\n    function startTime() external view returns (uint256);\\n\\n    /// @return The total cap for the private sale\\n    function privateSaleCap() external view returns (uint256);\\n\\n    /**\\n     * @return How many tokens allocated in total for a given\\n     * address, for private and public sales, including already\\n     * claimed amount\\n     **/\\n    function totalAllocated(address to) external view returns (uint256);\\n\\n    /// @return Amount already claimed by a given address\\n    function claimed(address to) external view returns (uint256);\\n\\n    /**\\n     * Calculates claimable amount of tokens for an address.\\n     * This should take into account:\\n     *   - total vested amount\\n     *   - already claimed amount\\n     *   - number of months elapsed since the end of the account's cliff period\\n     *   - total number of months this account is vesting for\\n     * Vesting should be lienear once cliff ends, but in monthly ticks, instead of a continuous release\\n     *\\n     * @param to The address to query\\n     * @return The currently claimable amount\\n     */\\n    function claimable(address to) external view returns (uint256);\\n\\n    /**\\n     * Claims currently claimable amount for the given address\\n     *\\n     * @param to Address to claim from\\n     */\\n    function claim(address to) external;\\n\\n    /**\\n     * Creates a new vesting with private sale parameters\\n     * If the address is already registered, it does nothing. If the address\\n     * has been registered in a public sale, it reverts the transaction\\n     *\\n     * Also checks if the private sale cap has been reached, and if so,\\n     * reverts.\\n     *\\n     * @param to Beneficiary\\n     * @param amount Amount of tokens to vest\\n     * @param cliffMonths Number of months to wait before the vesting starts\\n     * @param nonce Nonce used to prevent the same sale from being registered twice\\n     **/\\n    function createPrivateSaleVest(\\n        address to,\\n        uint256 amount,\\n        uint16 cliffMonths,\\n        uint64 nonce\\n    ) external;\\n\\n    /**\\n     * Triggers the refund of a given address on all sales\\n     *\\n     * @dev It will trigger a number of transactions equal to the number of\\n     * sales (assuming all of them have something to refund)\\n     * @dev It uses the low level `call` function to ensure that even if for\\n     * some reason an address that does not belong to a sale contract makes its\\n     * way to the sales list, we can recover from it.\\n     *\\n     * @param to Beneficiary\\n     **/\\n    function refund(address to) external;\\n}\\n\",\"keccak256\":\"0xe60889fcc90f1f8b68969205fd5b41bea888c6a4665380d4da2ff8b8feaa5090\",\"license\":\"MIT\"},\"contracts/token/Vesting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {ERC165Checker} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport {ISale} from \\\"./ISale.sol\\\";\\nimport {IVesting} from \\\"./IVesting.sol\\\";\\nimport {DateTime} from \\\"../libraries/DateTime.sol\\\";\\n\\ncontract Vesting is IVesting, AccessControl, ReentrancyGuard {\\n    using DateTime for uint256;\\n    using SafeERC20 for IERC20;\\n    using ERC165Checker for address;\\n\\n    //\\n    // Structs\\n    //\\n\\n    struct PrivateAllocation {\\n        uint256 amount;\\n        uint256 claimedAmount;\\n        uint256 cliffMonths;\\n        uint256 vestingMonths;\\n    }\\n\\n    //\\n    // State\\n    //\\n\\n    /// @inheritdoc IVesting\\n    mapping(address => uint256) public override(IVesting) claimed;\\n\\n    mapping(address => PrivateAllocation) public privateAllocations;\\n\\n    mapping(uint64 => bool) public usedNonces;\\n\\n    address public immutable token;\\n    uint256 public immutable startTime;\\n    uint256 public immutable publicSaleVestingMonths;\\n    uint256 public immutable publicSaleCliffMonths;\\n    uint256 public immutable privateSaleCap;\\n    uint256 public totalPrivateSales;\\n    address[] public sales;\\n\\n    uint256 public constant PRIVATE_SALE_VESTING_MONTHS = 36;\\n    uint256 public constant PRIVATE_SALE_MAX_CLIFF_MONTHS = 6;\\n    bytes32 public constant PRIVATE_SELLER_ROLE =\\n        keccak256(\\\"PRIVATE_SELLER_ROLE\\\");\\n\\n    event ClaimVesting(address indexed to, uint256 amount);\\n    event AddSale(address indexed saleContract);\\n\\n    /// @param _publicSaleVestingMonths Number of months of vesting for the public sale\\n    /// @param _token Address for the CTND token contract\\n    /// @param _sales Addresses for the initial sales contracts\\n    /// @param _startTime Start time of the vesting\\n    /// @param _privateSaleCap Total cap for the private sale\\n    constructor(\\n        uint256 _publicSaleVestingMonths,\\n        address _token,\\n        address[] memory _sales,\\n        uint256 _startTime,\\n        uint256 _privateSaleCap\\n    ) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(PRIVATE_SELLER_ROLE, msg.sender);\\n\\n        publicSaleVestingMonths = _publicSaleVestingMonths;\\n        publicSaleCliffMonths = 0;\\n        token = _token;\\n        startTime = _startTime;\\n        privateSaleCap = _privateSaleCap;\\n\\n        for (uint256 i = 0; i < _sales.length; ++i) {\\n            addSale(_sales[i]);\\n        }\\n    }\\n\\n    modifier useNonce(uint64 nonce) {\\n        require(!usedNonces[nonce], \\\"nonce already used\\\");\\n        usedNonces[nonce] = true;\\n        _;\\n    }\\n\\n    //\\n    // IVesting\\n    //\\n    /// @inheritdoc IVesting\\n    function totalAllocated(address to)\\n        external\\n        view\\n        override(IVesting)\\n        returns (uint256)\\n    {\\n        return totalAllocatedPublic(to) + totalAllocatedPrivate(to);\\n    }\\n\\n    /// @inheritdoc IVesting\\n    function claimable(address to)\\n        public\\n        view\\n        override(IVesting)\\n        returns (uint256)\\n    {\\n        return claimablePublic(to) + claimablePrivate(to);\\n    }\\n\\n    /// @inheritdoc IVesting\\n    function claim(address to) external override(IVesting) nonReentrant {\\n        uint256 claimableAmount = claimable(to);\\n        require(claimableAmount > 0, \\\"No claimable amount\\\");\\n\\n        claimed[to] += claimableAmount;\\n\\n        IERC20(token).transfer(to, claimableAmount);\\n\\n        emit ClaimVesting(to, claimableAmount);\\n    }\\n\\n    /// @inheritdoc IVesting\\n    function refund(address to) external override(IVesting) nonReentrant {\\n        uint256 len = sales.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address saleAddress = sales[i];\\n            ISale(saleAddress).refund(to);\\n        }\\n    }\\n\\n    //\\n    // Admin API\\n    //\\n\\n    /**\\n     * Adds an address to the list of sale contracts. Can only be called by the\\n     * admin.\\n     * The sale contract must implement ISale and ERC165\\n     *\\n     * @param _sale The address of the sale contract\\n     */\\n    function addSale(address _sale)\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        nonReentrant\\n    {\\n        require(\\n            _sale.supportsInterface(type(ISale).interfaceId),\\n            \\\"not an ISale\\\"\\n        );\\n\\n        sales.push(_sale);\\n\\n        emit AddSale(_sale);\\n    }\\n\\n    /// @inheritdoc IVesting\\n    function createPrivateSaleVest(\\n        address to,\\n        uint256 amount,\\n        uint16 cliffMonths,\\n        uint64 nonce\\n    )\\n        external\\n        override(IVesting)\\n        onlyRole(PRIVATE_SELLER_ROLE)\\n        nonReentrant\\n        useNonce(nonce)\\n    {\\n        require(\\n            cliffMonths <= PRIVATE_SALE_MAX_CLIFF_MONTHS,\\n            \\\"Cliff months too big\\\"\\n        );\\n        require(\\n            totalPrivateSales + amount <= privateSaleCap,\\n            \\\"Private sale cap reached\\\"\\n        );\\n        PrivateAllocation storage vesting = privateAllocations[to];\\n        require(\\n            vesting.amount == 0 || vesting.cliffMonths == cliffMonths,\\n            \\\"vesting already exists with different cliff\\\"\\n        );\\n\\n        vesting.cliffMonths = cliffMonths;\\n        vesting.vestingMonths = PRIVATE_SALE_VESTING_MONTHS;\\n        vesting.amount += amount;\\n\\n        totalPrivateSales += amount;\\n    }\\n\\n    //\\n    // Other Public API\\n    //\\n\\n    function totalAllocatedPublic(address to) public view returns (uint256) {\\n        uint256 total = 0;\\n        uint256 len = sales.length;\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            total += ISale(sales[i]).allocation(to);\\n        }\\n\\n        return total;\\n    }\\n\\n    function totalAllocatedPrivate(address to) public view returns (uint256) {\\n        return privateAllocations[to].amount;\\n    }\\n\\n    function claimablePublic(address to) public view returns (uint256) {\\n        uint256 localClaimed = claimed[to];\\n        uint256 total = totalAllocatedPublic(to);\\n        uint256 elapsed = _numberOfPeriodsElapsed();\\n        uint256 cliff = publicSaleCliffMonths;\\n        uint256 vesting = publicSaleVestingMonths;\\n\\n        if (total == 0) {\\n            return 0;\\n        }\\n\\n        if (cliff >= elapsed) {\\n            return 0;\\n        }\\n\\n        if (elapsed >= vesting + cliff) {\\n            return total - localClaimed;\\n        }\\n\\n        uint256 perMonth = total / vesting;\\n        return (perMonth * (elapsed - cliff)) - localClaimed;\\n    }\\n\\n    function claimablePrivate(address to) public view returns (uint256) {\\n        PrivateAllocation storage allocation = privateAllocations[to];\\n        uint256 localClaimed = claimed[to];\\n        uint256 total = allocation.amount;\\n        uint256 elapsed = _numberOfPeriodsElapsed();\\n        uint256 cliff = allocation.cliffMonths;\\n        uint256 vesting = allocation.vestingMonths;\\n\\n        if (total == 0) {\\n            return 0;\\n        }\\n\\n        if (cliff >= elapsed) {\\n            return 0;\\n        }\\n\\n        if (elapsed >= vesting + cliff) {\\n            return total - localClaimed;\\n        }\\n\\n        uint256 perMonth = total / vesting;\\n        return (perMonth * (elapsed - cliff)) - localClaimed;\\n    }\\n\\n    //\\n    // Internal API\\n    //\\n\\n    /**\\n     * Calculates the number of periods elapsed since the cliff start.\\n     *\\n     * Each period is the beginning of each month and will be passed in as a\\n     * parameter to the contract\\n     *\\n     * @return The number of periods elapsed since the cliff start\\n     */\\n    function _numberOfPeriodsElapsed() internal view returns (uint256) {\\n        if (block.timestamp < startTime) {\\n            return 0;\\n        } else {\\n            uint256 beginningOfMonth = DateTime.timestampFromDate(\\n                block.timestamp.getYear(),\\n                block.timestamp.getMonth(),\\n                1\\n            );\\n            uint256 beginningOfMonthStartTime = DateTime.timestampFromDate(\\n                startTime.getYear(),\\n                startTime.getMonth(),\\n                1\\n            );\\n            return\\n                DateTime.diffMonths(\\n                    beginningOfMonthStartTime,\\n                    beginningOfMonth\\n                ) + 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x778973e397e7f873ddf8081843fc90a3b610eba0e591f765b51d06b23beb4ce2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162002733380380620027338339810160408190526200003591620006b0565b6001805562000046600033620000ed565b620000727fd0de816a1a8e5ff14e67929176955ab95fac2ee76955cd54d33fac6e55aee23433620000ed565b60c0859052600060e08190526001600160a01b03851660805260a08390526101008290525b8351811015620000e157620000ce848281518110620000ba57620000ba620007b2565b60200260200101516200017660201b60201c565b620000d981620007de565b905062000097565b50505050505062000976565b620000f98282620002c4565b62000172576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001313390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000620001848133620002ef565b60026001541415620001dd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026001556200020a6001600160a01b03831663854aabcb60e01b62000372602090811b62000fe917901c565b620002475760405162461bcd60e51b815260206004820152600c60248201526b6e6f7420616e204953616c6560a01b6044820152606401620001d4565b6006805460018101825560009182527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319166001600160a01b03851690811790915560405190917f39247aa74f6659c541ff9e31504cea62a44522768b57339d97fddca6efa99b1b91a2505060018055565b6000828152602081815260408083206001600160a01b038516845290915290205460ff165b92915050565b620002fb8282620002c4565b620001725762000321816001600160a01b031660146200039a60201b6200100c1760201c565b620003378360206200100c6200039a821b17811c565b6040516020016200034a9291906200082f565b60408051601f198184030181529082905262461bcd60e51b8252620001d491600401620008a8565b60006200037f8362000553565b80156200039357506200039383836200058b565b9392505050565b60606000620003ab836002620008dd565b620003b8906002620008ff565b6001600160401b03811115620003d257620003d26200069a565b6040519080825280601f01601f191660200182016040528015620003fd576020820181803683370190505b509050600360fc1b816000815181106200041b576200041b620007b2565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106200044d576200044d620007b2565b60200101906001600160f81b031916908160001a905350600062000473846002620008dd565b62000480906001620008ff565b90505b600181111562000502576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110620004b857620004b8620007b2565b1a60f81b828281518110620004d157620004d1620007b2565b60200101906001600160f81b031916908160001a90535060049490941c93620004fa816200091a565b905062000483565b508315620003935760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401620001d4565b600062000568826301ffc9a760e01b6200058b565b8015620002e9575062000584826001600160e01b03196200058b565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090620005f490869062000934565b6000604051808303818686fa925050503d806000811462000632576040519150601f19603f3d011682016040523d82523d6000602084013e62000637565b606091505b5091509150602081511015620006545760009350505050620002e9565b8180156200067357508080602001905181019062000673919062000952565b9695505050505050565b80516001600160a01b03811681146200069557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a08688031215620006c957600080fd5b855194506020620006dc8188016200067d565b60408801519095506001600160401b0380821115620006fa57600080fd5b818901915089601f8301126200070f57600080fd5b8151818111156200072457620007246200069a565b8060051b604051601f19603f830116810181811085821117156200074c576200074c6200069a565b60405291825284820192508381018501918c8311156200076b57600080fd5b938501935b82851015620007945762000784856200067d565b8452938501939285019262000770565b60608c01516080909c01519a9d999c509a9998975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415620007f557620007f5620007c8565b5060010190565b60005b8381101562000819578181015183820152602001620007ff565b8381111562000829576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835162000869816017850160208801620007fc565b7001034b99036b4b9b9b4b733903937b6329607d1b60179184019182015283516200089c816028840160208801620007fc565b01602801949350505050565b6020815260008251806020840152620008c9816040850160208701620007fc565b601f01601f19169190910160400192915050565b6000816000190483118215151615620008fa57620008fa620007c8565b500290565b60008219821115620009155762000915620007c8565b500190565b6000816200092c576200092c620007c8565b506000190190565b6000825162000948818460208701620007fc565b9190910192915050565b6000602082840312156200096557600080fd5b815180151581146200039357600080fd5b60805160a05160c05160e05161010051611d47620009ec600039600081816104df0152610c6401526000818161020c01526108e00152600081816103160152610901015260008181610364015281816113470152818161139d01526113c601526000818161052c015261074b0152611d476000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c8063847f429211610104578063b5f522f7116100a2578063d8bce30111610071578063d8bce301146104da578063ed361b3514610501578063fa89401a14610514578063fc0c546a1461052757600080fd5b8063b5f522f714610474578063c78c08fe1461049f578063c884ef83146104a7578063d547741f146104c757600080fd5b806390deadaa116100de57806390deadaa1461040f57806391d1485414610422578063a217fddf14610459578063a918acfc1461046157600080fd5b8063847f4292146103865780638719f630146103dd57806387d389e71461040657600080fd5b80632f2ff15d1161017c5780634a6d02921161014b5780634a6d0292146102fe57806361649953146103115780636e95a2f41461033857806378e979251461035f57600080fd5b80632f2ff15d146102b257806336568abe146102c55780633cf05ddb146102d8578063402914f5146102eb57600080fd5b80631ce8678b116101b85780631ce8678b146102445780631e83409a14610257578063248a9ca31461026c57806325e44ffe1461028f57600080fd5b806301ffc9a7146101df57806305182886146102075780630a77e4011461023c575b600080fd5b6101f26101ed366004611894565b61054e565b60405190151581526020015b60405180910390f35b61022e7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016101fe565b61022e600681565b61022e6102523660046118da565b610585565b61026a6102653660046118da565b610648565b005b61022e61027a3660046118f5565b60009081526020819052604090206001015490565b6101f261029d366004611926565b60046020526000908152604090205460ff1681565b61026a6102c0366004611941565b610804565b61026a6102d3366004611941565b61082f565b61022e6102e63660046118da565b6108ad565b61022e6102f93660046118da565b6109a4565b61026a61030c3660046118da565b6109c2565b61022e7f000000000000000000000000000000000000000000000000000000000000000081565b61022e7fd0de816a1a8e5ff14e67929176955ab95fac2ee76955cd54d33fac6e55aee23481565b61022e7f000000000000000000000000000000000000000000000000000000000000000081565b6103bd6103943660046118da565b600360208190526000918252604090912080546001820154600283015492909301549092919084565b6040805194855260208501939093529183015260608201526080016101fe565b61022e6103eb3660046118da565b6001600160a01b031660009081526003602052604090205490565b61022e60055481565b61026a61041d36600461196d565b610b05565b6101f2610430366004611941565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61022e600081565b61022e61046f3660046118da565b610dbc565b6104876104823660046118f5565b610e74565b6040516001600160a01b0390911681526020016101fe565b61022e602481565b61022e6104b53660046118da565b60026020526000908152604090205481565b61026a6104d5366004611941565b610e9e565b61022e7f000000000000000000000000000000000000000000000000000000000000000081565b61022e61050f3660046118da565b610ec4565b61026a6105223660046118da565b610ee6565b6104877f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b03198216637965db0b60e01b148061057f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6006546000908190815b8181101561063f57600681815481106105aa576105aa6119c3565b600091825260209091200154604051630b81b86360e41b81526001600160a01b0387811660048301529091169063b81b863090602401602060405180830381865afa1580156105fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062191906119d9565b61062b9084611a08565b92508061063781611a20565b91505061058f565b50909392505050565b600260015414156106a05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260015560006106b0826109a4565b9050600081116106f85760405162461bcd60e51b8152602060048201526013602482015272139bc818db185a5b58589b1948185b5bdd5b9d606a1b6044820152606401610697565b6001600160a01b03821660009081526002602052604081208054839290610720908490611a08565b909155505060405163a9059cbb60e01b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b89190611a3b565b50816001600160a01b03167ffbed6a2445b2fb12101a9cd62317dad46e867f7cc92f27c85f5427ad972491d2826040516107f491815260200190565b60405180910390a2505060018055565b60008281526020819052604090206001015461082081336111a8565b61082a8383611226565b505050565b6001600160a01b038116331461089f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610697565b6108a982826112c4565b5050565b6001600160a01b038116600090815260026020526040812054816108d084610585565b905060006108dc611343565b90507f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083610932575060009695505050505050565b828210610946575060009695505050505050565b6109508282611a08565b831061096b576109608585611a5d565b979650505050505050565b60006109778286611a8a565b9050856109848486611a5d565b61098e9083611a9e565b6109989190611a5d565b98975050505050505050565b60006109af82610dbc565b6109b8836108ad565b61057f9190611a08565b60006109ce81336111a8565b60026001541415610a215760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610697565b6002600155610a406001600160a01b03831663854aabcb60e01b610fe9565b610a7b5760405162461bcd60e51b815260206004820152600c60248201526b6e6f7420616e204953616c6560a01b6044820152606401610697565b6006805460018101825560009182527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03851690811790915560405190917f39247aa74f6659c541ff9e31504cea62a44522768b57339d97fddca6efa99b1b91a2505060018055565b7fd0de816a1a8e5ff14e67929176955ab95fac2ee76955cd54d33fac6e55aee234610b3081336111a8565b60026001541415610b835760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610697565b600260015567ffffffffffffffff8216600090815260046020526040902054829060ff1615610be95760405162461bcd60e51b81526020600482015260126024820152711b9bdb98d948185b1c9958591e481d5cd95960721b6044820152606401610697565b67ffffffffffffffff81166000908152600460205260409020805460ff19166001179055600661ffff85161115610c625760405162461bcd60e51b815260206004820152601460248201527f436c696666206d6f6e74687320746f6f206269670000000000000000000000006044820152606401610697565b7f000000000000000000000000000000000000000000000000000000000000000085600554610c919190611a08565b1115610cdf5760405162461bcd60e51b815260206004820152601860248201527f507269766174652073616c6520636170207265616368656400000000000000006044820152606401610697565b6001600160a01b038616600090815260036020526040902080541580610d0c57508461ffff168160020154145b610d6c5760405162461bcd60e51b815260206004820152602b60248201527f76657374696e6720616c7265616479206578697374732077697468206469666660448201526a32b932b73a1031b634b33360a91b6064820152608401610697565b61ffff8516600282015560246003820155805486908290600090610d91908490611a08565b925050819055508560056000828254610daa9190611a08565b90915550506001805550505050505050565b6001600160a01b03811660009081526003602090815260408083206002909252822054815483610dea611343565b600285015460038601549192509083610e0b57506000979650505050505050565b828210610e2057506000979650505050505050565b610e2a8282611a08565b8310610e3a576109988585611a5d565b6000610e468286611a8a565b905085610e538486611a5d565b610e5d9083611a9e565b610e679190611a5d565b9998505050505050505050565b60068181548110610e8457600080fd5b6000918252602090912001546001600160a01b0316905081565b600082815260208190526040902060010154610eba81336111a8565b61082a83836112c4565b6001600160a01b0381166000908152600360205260408120546109b883610585565b60026001541415610f395760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610697565b600260015560065460005b81811015610fe057600060068281548110610f6157610f616119c3565b600091825260209091200154604051637d44a00d60e11b81526001600160a01b0386811660048301529091169150819063fa89401a90602401600060405180830381600087803b158015610fb457600080fd5b505af1158015610fc8573d6000803e3d6000fd5b50505050508080610fd890611a20565b915050610f44565b50506001805550565b6000610ff483611408565b80156110055750611005838361143b565b9392505050565b6060600061101b836002611a9e565b611026906002611a08565b67ffffffffffffffff81111561103e5761103e611abd565b6040519080825280601f01601f191660200182016040528015611068576020820181803683370190505b509050600360fc1b81600081518110611083576110836119c3565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106110b2576110b26119c3565b60200101906001600160f81b031916908160001a90535060006110d6846002611a9e565b6110e1906001611a08565b90505b6001811115611159576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611115576111156119c3565b1a60f81b82828151811061112b5761112b6119c3565b60200101906001600160f81b031916908160001a90535060049490941c9361115281611ad3565b90506110e4565b5083156110055760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610697565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166108a9576111e4816001600160a01b0316601461100c565b6111ef83602061100c565b604051602001611200929190611b1a565b60408051601f198184030181529082905262461bcd60e51b825261069791600401611b8f565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166108a9576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556112803390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156108a9576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60007f00000000000000000000000000000000000000000000000000000000000000004210156113735750600090565b600061139161138142611524565b61138a4261153b565b6001611555565b905060006113ea6113c17f0000000000000000000000000000000000000000000000000000000000000000611524565b61138a7f000000000000000000000000000000000000000000000000000000000000000061153b565b90506113f68183611578565b611401906001611a08565b9250505090565b600061141b826301ffc9a760e01b61143b565b801561057f5750611434826001600160e01b031961143b565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b03871690617530906114a2908690611bc2565b6000604051808303818686fa925050503d80600081146114de576040519150601f19603f3d011682016040523d82523d6000602084013e6114e3565b606091505b50915091506020815110156114fe576000935050505061057f565b81801561151a57508080602001905181019061151a9190611a3b565b9695505050505050565b600061063f6115366201518084611a8a565b6115ef565b600061154d6115366201518084611a8a565b509392505050565b600062015180611566858585611763565b6115709190611a9e565b949350505050565b60008183111561158757600080fd5b60008061159a6115366201518087611a8a565b5090925090506000806115b36115366201518088611a8a565b509092509050826115c585600c611a9e565b826115d185600c611a9e565b6115db9190611a08565b6115e59190611a5d565b6109609190611a5d565b60008080838162253d8c6116068362010bd9611bde565b6116109190611bde565b9050600062023ab1611623836004611c1f565b61162d9190611ca4565b9050600461163e8262023ab1611c1f565b611649906003611bde565b6116539190611ca4565b61165d9083611cd2565b9150600062164b09611670846001611bde565b61167c90610fa0611c1f565b6116869190611ca4565b90506004611696826105b5611c1f565b6116a09190611ca4565b6116aa9084611cd2565b6116b590601f611bde565b9250600061098f6116c7856050611c1f565b6116d19190611ca4565b9050600060506116e38361098f611c1f565b6116ed9190611ca4565b6116f79086611cd2565b9050611704600b83611ca4565b945061171185600c611c1f565b61171c836002611bde565b6117269190611cd2565b91508483611735603187611cd2565b611740906064611c1f565b61174a9190611bde565b6117549190611bde565b9a919950975095505050505050565b60006107b284101561177457600080fd5b838383600062253d8c60046064600c61178e600e88611cd2565b6117989190611ca4565b6117a488611324611bde565b6117ae9190611bde565b6117b89190611ca4565b6117c3906003611c1f565b6117cd9190611ca4565b600c806117db600e88611cd2565b6117e59190611ca4565b6117f090600c611c1f565b6117fb600288611cd2565b6118059190611cd2565b6118119061016f611c1f565b61181b9190611ca4565b6004600c61182a600e89611cd2565b6118349190611ca4565b611840896112c0611bde565b61184a9190611bde565b611856906105b5611c1f565b6118609190611ca4565b61186c617d4b87611cd2565b6118769190611bde565b6118809190611bde565b61188a9190611cd2565b6109989190611cd2565b6000602082840312156118a657600080fd5b81356001600160e01b03198116811461100557600080fd5b80356001600160a01b03811681146118d557600080fd5b919050565b6000602082840312156118ec57600080fd5b611005826118be565b60006020828403121561190757600080fd5b5035919050565b803567ffffffffffffffff811681146118d557600080fd5b60006020828403121561193857600080fd5b6110058261190e565b6000806040838503121561195457600080fd5b82359150611964602084016118be565b90509250929050565b6000806000806080858703121561198357600080fd5b61198c856118be565b935060208501359250604085013561ffff811681146119aa57600080fd5b91506119b86060860161190e565b905092959194509250565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156119eb57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611a1b57611a1b6119f2565b500190565b6000600019821415611a3457611a346119f2565b5060010190565b600060208284031215611a4d57600080fd5b8151801515811461100557600080fd5b600082821015611a6f57611a6f6119f2565b500390565b634e487b7160e01b600052601260045260246000fd5b600082611a9957611a99611a74565b500490565b6000816000190483118215151615611ab857611ab86119f2565b500290565b634e487b7160e01b600052604160045260246000fd5b600081611ae257611ae26119f2565b506000190190565b60005b83811015611b05578181015183820152602001611aed565b83811115611b14576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611b52816017850160208801611aea565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611b83816028840160208801611aea565b01602801949350505050565b6020815260008251806020840152611bae816040850160208701611aea565b601f01601f19169190910160400192915050565b60008251611bd4818460208701611aea565b9190910192915050565b600080821280156001600160ff1b0384900385131615611c0057611c006119f2565b600160ff1b8390038412811615611c1957611c196119f2565b50500190565b60006001600160ff1b0381841382841380821686840486111615611c4557611c456119f2565b600160ff1b6000871282811687830589121615611c6457611c646119f2565b60008712925087820587128484161615611c8057611c806119f2565b87850587128184161615611c9657611c966119f2565b505050929093029392505050565b600082611cb357611cb3611a74565b600160ff1b821460001984141615611ccd57611ccd6119f2565b500590565b60008083128015600160ff1b850184121615611cf057611cf06119f2565b6001600160ff1b0384018313811615611d0b57611d0b6119f2565b5050039056fea2646970667358221220d075e64a0ef1df07efc6f7a9ae87643bb2b8a47537bdaae1b69372dd0cc8c0d464736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c8063847f429211610104578063b5f522f7116100a2578063d8bce30111610071578063d8bce301146104da578063ed361b3514610501578063fa89401a14610514578063fc0c546a1461052757600080fd5b8063b5f522f714610474578063c78c08fe1461049f578063c884ef83146104a7578063d547741f146104c757600080fd5b806390deadaa116100de57806390deadaa1461040f57806391d1485414610422578063a217fddf14610459578063a918acfc1461046157600080fd5b8063847f4292146103865780638719f630146103dd57806387d389e71461040657600080fd5b80632f2ff15d1161017c5780634a6d02921161014b5780634a6d0292146102fe57806361649953146103115780636e95a2f41461033857806378e979251461035f57600080fd5b80632f2ff15d146102b257806336568abe146102c55780633cf05ddb146102d8578063402914f5146102eb57600080fd5b80631ce8678b116101b85780631ce8678b146102445780631e83409a14610257578063248a9ca31461026c57806325e44ffe1461028f57600080fd5b806301ffc9a7146101df57806305182886146102075780630a77e4011461023c575b600080fd5b6101f26101ed366004611894565b61054e565b60405190151581526020015b60405180910390f35b61022e7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016101fe565b61022e600681565b61022e6102523660046118da565b610585565b61026a6102653660046118da565b610648565b005b61022e61027a3660046118f5565b60009081526020819052604090206001015490565b6101f261029d366004611926565b60046020526000908152604090205460ff1681565b61026a6102c0366004611941565b610804565b61026a6102d3366004611941565b61082f565b61022e6102e63660046118da565b6108ad565b61022e6102f93660046118da565b6109a4565b61026a61030c3660046118da565b6109c2565b61022e7f000000000000000000000000000000000000000000000000000000000000000081565b61022e7fd0de816a1a8e5ff14e67929176955ab95fac2ee76955cd54d33fac6e55aee23481565b61022e7f000000000000000000000000000000000000000000000000000000000000000081565b6103bd6103943660046118da565b600360208190526000918252604090912080546001820154600283015492909301549092919084565b6040805194855260208501939093529183015260608201526080016101fe565b61022e6103eb3660046118da565b6001600160a01b031660009081526003602052604090205490565b61022e60055481565b61026a61041d36600461196d565b610b05565b6101f2610430366004611941565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61022e600081565b61022e61046f3660046118da565b610dbc565b6104876104823660046118f5565b610e74565b6040516001600160a01b0390911681526020016101fe565b61022e602481565b61022e6104b53660046118da565b60026020526000908152604090205481565b61026a6104d5366004611941565b610e9e565b61022e7f000000000000000000000000000000000000000000000000000000000000000081565b61022e61050f3660046118da565b610ec4565b61026a6105223660046118da565b610ee6565b6104877f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b03198216637965db0b60e01b148061057f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6006546000908190815b8181101561063f57600681815481106105aa576105aa6119c3565b600091825260209091200154604051630b81b86360e41b81526001600160a01b0387811660048301529091169063b81b863090602401602060405180830381865afa1580156105fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062191906119d9565b61062b9084611a08565b92508061063781611a20565b91505061058f565b50909392505050565b600260015414156106a05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260015560006106b0826109a4565b9050600081116106f85760405162461bcd60e51b8152602060048201526013602482015272139bc818db185a5b58589b1948185b5bdd5b9d606a1b6044820152606401610697565b6001600160a01b03821660009081526002602052604081208054839290610720908490611a08565b909155505060405163a9059cbb60e01b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015610794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b89190611a3b565b50816001600160a01b03167ffbed6a2445b2fb12101a9cd62317dad46e867f7cc92f27c85f5427ad972491d2826040516107f491815260200190565b60405180910390a2505060018055565b60008281526020819052604090206001015461082081336111a8565b61082a8383611226565b505050565b6001600160a01b038116331461089f5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610697565b6108a982826112c4565b5050565b6001600160a01b038116600090815260026020526040812054816108d084610585565b905060006108dc611343565b90507f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083610932575060009695505050505050565b828210610946575060009695505050505050565b6109508282611a08565b831061096b576109608585611a5d565b979650505050505050565b60006109778286611a8a565b9050856109848486611a5d565b61098e9083611a9e565b6109989190611a5d565b98975050505050505050565b60006109af82610dbc565b6109b8836108ad565b61057f9190611a08565b60006109ce81336111a8565b60026001541415610a215760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610697565b6002600155610a406001600160a01b03831663854aabcb60e01b610fe9565b610a7b5760405162461bcd60e51b815260206004820152600c60248201526b6e6f7420616e204953616c6560a01b6044820152606401610697565b6006805460018101825560009182527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f01805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03851690811790915560405190917f39247aa74f6659c541ff9e31504cea62a44522768b57339d97fddca6efa99b1b91a2505060018055565b7fd0de816a1a8e5ff14e67929176955ab95fac2ee76955cd54d33fac6e55aee234610b3081336111a8565b60026001541415610b835760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610697565b600260015567ffffffffffffffff8216600090815260046020526040902054829060ff1615610be95760405162461bcd60e51b81526020600482015260126024820152711b9bdb98d948185b1c9958591e481d5cd95960721b6044820152606401610697565b67ffffffffffffffff81166000908152600460205260409020805460ff19166001179055600661ffff85161115610c625760405162461bcd60e51b815260206004820152601460248201527f436c696666206d6f6e74687320746f6f206269670000000000000000000000006044820152606401610697565b7f000000000000000000000000000000000000000000000000000000000000000085600554610c919190611a08565b1115610cdf5760405162461bcd60e51b815260206004820152601860248201527f507269766174652073616c6520636170207265616368656400000000000000006044820152606401610697565b6001600160a01b038616600090815260036020526040902080541580610d0c57508461ffff168160020154145b610d6c5760405162461bcd60e51b815260206004820152602b60248201527f76657374696e6720616c7265616479206578697374732077697468206469666660448201526a32b932b73a1031b634b33360a91b6064820152608401610697565b61ffff8516600282015560246003820155805486908290600090610d91908490611a08565b925050819055508560056000828254610daa9190611a08565b90915550506001805550505050505050565b6001600160a01b03811660009081526003602090815260408083206002909252822054815483610dea611343565b600285015460038601549192509083610e0b57506000979650505050505050565b828210610e2057506000979650505050505050565b610e2a8282611a08565b8310610e3a576109988585611a5d565b6000610e468286611a8a565b905085610e538486611a5d565b610e5d9083611a9e565b610e679190611a5d565b9998505050505050505050565b60068181548110610e8457600080fd5b6000918252602090912001546001600160a01b0316905081565b600082815260208190526040902060010154610eba81336111a8565b61082a83836112c4565b6001600160a01b0381166000908152600360205260408120546109b883610585565b60026001541415610f395760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610697565b600260015560065460005b81811015610fe057600060068281548110610f6157610f616119c3565b600091825260209091200154604051637d44a00d60e11b81526001600160a01b0386811660048301529091169150819063fa89401a90602401600060405180830381600087803b158015610fb457600080fd5b505af1158015610fc8573d6000803e3d6000fd5b50505050508080610fd890611a20565b915050610f44565b50506001805550565b6000610ff483611408565b80156110055750611005838361143b565b9392505050565b6060600061101b836002611a9e565b611026906002611a08565b67ffffffffffffffff81111561103e5761103e611abd565b6040519080825280601f01601f191660200182016040528015611068576020820181803683370190505b509050600360fc1b81600081518110611083576110836119c3565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106110b2576110b26119c3565b60200101906001600160f81b031916908160001a90535060006110d6846002611a9e565b6110e1906001611a08565b90505b6001811115611159576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611115576111156119c3565b1a60f81b82828151811061112b5761112b6119c3565b60200101906001600160f81b031916908160001a90535060049490941c9361115281611ad3565b90506110e4565b5083156110055760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610697565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166108a9576111e4816001600160a01b0316601461100c565b6111ef83602061100c565b604051602001611200929190611b1a565b60408051601f198184030181529082905262461bcd60e51b825261069791600401611b8f565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166108a9576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556112803390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156108a9576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60007f00000000000000000000000000000000000000000000000000000000000000004210156113735750600090565b600061139161138142611524565b61138a4261153b565b6001611555565b905060006113ea6113c17f0000000000000000000000000000000000000000000000000000000000000000611524565b61138a7f000000000000000000000000000000000000000000000000000000000000000061153b565b90506113f68183611578565b611401906001611a08565b9250505090565b600061141b826301ffc9a760e01b61143b565b801561057f5750611434826001600160e01b031961143b565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b03871690617530906114a2908690611bc2565b6000604051808303818686fa925050503d80600081146114de576040519150601f19603f3d011682016040523d82523d6000602084013e6114e3565b606091505b50915091506020815110156114fe576000935050505061057f565b81801561151a57508080602001905181019061151a9190611a3b565b9695505050505050565b600061063f6115366201518084611a8a565b6115ef565b600061154d6115366201518084611a8a565b509392505050565b600062015180611566858585611763565b6115709190611a9e565b949350505050565b60008183111561158757600080fd5b60008061159a6115366201518087611a8a565b5090925090506000806115b36115366201518088611a8a565b509092509050826115c585600c611a9e565b826115d185600c611a9e565b6115db9190611a08565b6115e59190611a5d565b6109609190611a5d565b60008080838162253d8c6116068362010bd9611bde565b6116109190611bde565b9050600062023ab1611623836004611c1f565b61162d9190611ca4565b9050600461163e8262023ab1611c1f565b611649906003611bde565b6116539190611ca4565b61165d9083611cd2565b9150600062164b09611670846001611bde565b61167c90610fa0611c1f565b6116869190611ca4565b90506004611696826105b5611c1f565b6116a09190611ca4565b6116aa9084611cd2565b6116b590601f611bde565b9250600061098f6116c7856050611c1f565b6116d19190611ca4565b9050600060506116e38361098f611c1f565b6116ed9190611ca4565b6116f79086611cd2565b9050611704600b83611ca4565b945061171185600c611c1f565b61171c836002611bde565b6117269190611cd2565b91508483611735603187611cd2565b611740906064611c1f565b61174a9190611bde565b6117549190611bde565b9a919950975095505050505050565b60006107b284101561177457600080fd5b838383600062253d8c60046064600c61178e600e88611cd2565b6117989190611ca4565b6117a488611324611bde565b6117ae9190611bde565b6117b89190611ca4565b6117c3906003611c1f565b6117cd9190611ca4565b600c806117db600e88611cd2565b6117e59190611ca4565b6117f090600c611c1f565b6117fb600288611cd2565b6118059190611cd2565b6118119061016f611c1f565b61181b9190611ca4565b6004600c61182a600e89611cd2565b6118349190611ca4565b611840896112c0611bde565b61184a9190611bde565b611856906105b5611c1f565b6118609190611ca4565b61186c617d4b87611cd2565b6118769190611bde565b6118809190611bde565b61188a9190611cd2565b6109989190611cd2565b6000602082840312156118a657600080fd5b81356001600160e01b03198116811461100557600080fd5b80356001600160a01b03811681146118d557600080fd5b919050565b6000602082840312156118ec57600080fd5b611005826118be565b60006020828403121561190757600080fd5b5035919050565b803567ffffffffffffffff811681146118d557600080fd5b60006020828403121561193857600080fd5b6110058261190e565b6000806040838503121561195457600080fd5b82359150611964602084016118be565b90509250929050565b6000806000806080858703121561198357600080fd5b61198c856118be565b935060208501359250604085013561ffff811681146119aa57600080fd5b91506119b86060860161190e565b905092959194509250565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156119eb57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611a1b57611a1b6119f2565b500190565b6000600019821415611a3457611a346119f2565b5060010190565b600060208284031215611a4d57600080fd5b8151801515811461100557600080fd5b600082821015611a6f57611a6f6119f2565b500390565b634e487b7160e01b600052601260045260246000fd5b600082611a9957611a99611a74565b500490565b6000816000190483118215151615611ab857611ab86119f2565b500290565b634e487b7160e01b600052604160045260246000fd5b600081611ae257611ae26119f2565b506000190190565b60005b83811015611b05578181015183820152602001611aed565b83811115611b14576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611b52816017850160208801611aea565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351611b83816028840160208801611aea565b01602801949350505050565b6020815260008251806020840152611bae816040850160208701611aea565b601f01601f19169190910160400192915050565b60008251611bd4818460208701611aea565b9190910192915050565b600080821280156001600160ff1b0384900385131615611c0057611c006119f2565b600160ff1b8390038412811615611c1957611c196119f2565b50500190565b60006001600160ff1b0381841382841380821686840486111615611c4557611c456119f2565b600160ff1b6000871282811687830589121615611c6457611c646119f2565b60008712925087820587128484161615611c8057611c806119f2565b87850587128184161615611c9657611c966119f2565b505050929093029392505050565b600082611cb357611cb3611a74565b600160ff1b821460001984141615611ccd57611ccd6119f2565b500590565b60008083128015600160ff1b850184121615611cf057611cf06119f2565b6001600160ff1b0384018313811615611d0b57611d0b6119f2565b5050039056fea2646970667358221220d075e64a0ef1df07efc6f7a9ae87643bb2b8a47537bdaae1b69372dd0cc8c0d464736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addSale(address)": {
        "params": {
          "_sale": "The address of the sale contract"
        }
      },
      "claim(address)": {
        "params": {
          "to": "Address to claim from"
        }
      },
      "claimable(address)": {
        "params": {
          "to": "The address to query"
        },
        "returns": {
          "_0": "The currently claimable amount"
        }
      },
      "constructor": {
        "params": {
          "_privateSaleCap": "Total cap for the private sale",
          "_publicSaleVestingMonths": "Number of months of vesting for the public sale",
          "_sales": "Addresses for the initial sales contracts",
          "_startTime": "Start time of the vesting",
          "_token": "Address for the CTND token contract"
        }
      },
      "createPrivateSaleVest(address,uint256,uint16,uint64)": {
        "params": {
          "amount": "Amount of tokens to vest",
          "cliffMonths": "Number of months to wait before the vesting starts",
          "nonce": "Nonce used to prevent the same sale from being registered twice*",
          "to": "Beneficiary"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "refund(address)": {
        "details": "It will trigger a number of transactions equal to the number of sales (assuming all of them have something to refund)It uses the low level `call` function to ensure that even if for some reason an address that does not belong to a sale contract makes its way to the sales list, we can recover from it.",
        "params": {
          "to": "Beneficiary*"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalAllocated(address)": {
        "returns": {
          "_0": "How many tokens allocated in total for a given address, for private and public sales, including already claimed amount*"
        }
      }
    },
    "stateVariables": {
      "claimed": {
        "return": "Amount already claimed by a given address",
        "returns": {
          "_0": "Amount already claimed by a given address"
        }
      },
      "privateSaleCap": {
        "return": "The total cap for the private sale",
        "returns": {
          "_0": "The total cap for the private sale"
        }
      },
      "publicSaleCliffMonths": {
        "return": "The cliff period, in months, for public sale vesting",
        "returns": {
          "_0": "The cliff period, in months, for public sale vesting"
        }
      },
      "publicSaleVestingMonths": {
        "return": "The vesting duration, in months",
        "returns": {
          "_0": "The vesting duration, in months"
        }
      },
      "startTime": {
        "return": "The start time for the vesting",
        "returns": {
          "_0": "The start time for the vesting"
        }
      },
      "token": {
        "return": "The token being vested",
        "returns": {
          "_0": "The token being vested"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addSale(address)": {
        "notice": "Adds an address to the list of sale contracts. Can only be called by the admin. The sale contract must implement ISale and ERC165"
      },
      "claim(address)": {
        "notice": "Claims currently claimable amount for the given address"
      },
      "claimable(address)": {
        "notice": "Calculates claimable amount of tokens for an address. This should take into account:   - total vested amount   - already claimed amount   - number of months elapsed since the end of the account's cliff period   - total number of months this account is vesting for Vesting should be lienear once cliff ends, but in monthly ticks, instead of a continuous release"
      },
      "createPrivateSaleVest(address,uint256,uint16,uint64)": {
        "notice": "Creates a new vesting with private sale parameters If the address is already registered, it does nothing. If the address has been registered in a public sale, it reverts the transaction Also checks if the private sale cap has been reached, and if so, reverts."
      },
      "refund(address)": {
        "notice": "Triggers the refund of a given address on all sales"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/token/Vesting.sol:Vesting",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 484,
        "contract": "contracts/token/Vesting.sol:Vesting",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9023,
        "contract": "contracts/token/Vesting.sol:Vesting",
        "label": "claimed",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9028,
        "contract": "contracts/token/Vesting.sol:Vesting",
        "label": "privateAllocations",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(PrivateAllocation)9016_storage)"
      },
      {
        "astId": 9032,
        "contract": "contracts/token/Vesting.sol:Vesting",
        "label": "usedNonces",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint64,t_bool)"
      },
      {
        "astId": 9044,
        "contract": "contracts/token/Vesting.sol:Vesting",
        "label": "totalPrivateSales",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 9047,
        "contract": "contracts/token/Vesting.sol:Vesting",
        "label": "sales",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(PrivateAllocation)9016_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vesting.PrivateAllocation)",
        "numberOfBytes": "32",
        "value": "t_struct(PrivateAllocation)9016_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint64,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(PrivateAllocation)9016_storage": {
        "encoding": "inplace",
        "label": "struct Vesting.PrivateAllocation",
        "members": [
          {
            "astId": 9009,
            "contract": "contracts/token/Vesting.sol:Vesting",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9011,
            "contract": "contracts/token/Vesting.sol:Vesting",
            "label": "claimedAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9013,
            "contract": "contracts/token/Vesting.sol:Vesting",
            "label": "cliffMonths",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9015,
            "contract": "contracts/token/Vesting.sol:Vesting",
            "label": "vestingMonths",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/token/Vesting.sol:Vesting",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/token/Vesting.sol:Vesting",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}