{
  "address": "0x34C66aD7d23AC276CcBaE5403FC7d39FE98F6C44",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "batch",
          "type": "address"
        }
      ],
      "name": "BatchCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "project",
          "type": "address"
        }
      ],
      "name": "ProjectRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BATCH_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LEGAL_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROJECT_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_project",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "canInvestInPeoplesPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "canInvestInStakersPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "canVote",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_projects",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_slotCount",
          "type": "uint256"
        }
      ],
      "name": "createBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_project",
          "type": "address"
        }
      ],
      "name": "getBatchForProject",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "hasBatchManagerRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "hasLegalManagerRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "hasProjectManagerRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_project",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_batch",
          "type": "address"
        }
      ],
      "name": "isProjectInBatch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "projects",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "projectsToBatches",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_saleSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "registerProject",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "batch",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "extraInvestmentDuration",
          "type": "uint256"
        }
      ],
      "name": "setBatchVotingPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a97e297e2aa1939a11b5ec8acbc8c17d39946eeede34bfe4b4ab92d19252a8c",
  "receipt": {
    "to": null,
    "from": "0x0077014b4C74d9b1688847386B24Ed23Fdf14Be8",
    "contractAddress": "0x34C66aD7d23AC276CcBaE5403FC7d39FE98F6C44",
    "transactionIndex": 0,
    "gasUsed": "5166044",
    "logsBloom": "0x00000004000000000c00000000000000008000000000000100000000000000000000000000000000008000000040000000000000000000000000000000000000000000000000000000000000000000004000000002000000000000400000000008000000020000000000000000000800000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000008000000000000000000000000000000000000000000000000000000100000000000020000000000000000000000000000000000000000044000000000020000000000000",
    "blockHash": "0xabd8465902e5543d2a1cdb25b9f2ddeadaf3b6f000c245feb64c28d95f9ac8e6",
    "transactionHash": "0x5a97e297e2aa1939a11b5ec8acbc8c17d39946eeede34bfe4b4ab92d19252a8c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x5a97e297e2aa1939a11b5ec8acbc8c17d39946eeede34bfe4b4ab92d19252a8c",
        "address": "0x34C66aD7d23AC276CcBaE5403FC7d39FE98F6C44",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000077014b4c74d9b1688847386b24ed23fdf14be8",
          "0x0000000000000000000000000077014b4c74d9b1688847386b24ed23fdf14be8"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xabd8465902e5543d2a1cdb25b9f2ddeadaf3b6f000c245feb64c28d95f9ac8e6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x5a97e297e2aa1939a11b5ec8acbc8c17d39946eeede34bfe4b4ab92d19252a8c",
        "address": "0x34C66aD7d23AC276CcBaE5403FC7d39FE98F6C44",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa88d484f5aeb539ab60f9bd084e23511bc356a4f715a255e909643bb69ddcb41",
          "0x0000000000000000000000000077014b4c74d9b1688847386b24ed23fdf14be8",
          "0x0000000000000000000000000077014b4c74d9b1688847386b24ed23fdf14be8"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xabd8465902e5543d2a1cdb25b9f2ddeadaf3b6f000c245feb64c28d95f9ac8e6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x5a97e297e2aa1939a11b5ec8acbc8c17d39946eeede34bfe4b4ab92d19252a8c",
        "address": "0x34C66aD7d23AC276CcBaE5403FC7d39FE98F6C44",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x28eb28c26cbbd48a6bfad016505ccf4a189452995f59d16217af8920961ed25c",
          "0x0000000000000000000000000077014b4c74d9b1688847386b24ed23fdf14be8",
          "0x0000000000000000000000000077014b4c74d9b1688847386b24ed23fdf14be8"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xabd8465902e5543d2a1cdb25b9f2ddeadaf3b6f000c245feb64c28d95f9ac8e6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9,
        "transactionHash": "0x5a97e297e2aa1939a11b5ec8acbc8c17d39946eeede34bfe4b4ab92d19252a8c",
        "address": "0x34C66aD7d23AC276CcBaE5403FC7d39FE98F6C44",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xfbe1c1e064e33268dfb07e8ec24bb5d882bde92a088196f7cbea3ea66117a7a7",
          "0x0000000000000000000000000077014b4c74d9b1688847386b24ed23fdf14be8",
          "0x0000000000000000000000000077014b4c74d9b1688847386b24ed23fdf14be8"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0xabd8465902e5543d2a1cdb25b9f2ddeadaf3b6f000c245feb64c28d95f9ac8e6"
      }
    ],
    "blockNumber": 9,
    "cumulativeGasUsed": "5166044",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6830cF073502ae892f335B2E8c4555BfC2287BD9",
    "0xA73292e0CeD7F1150e9E7d0f09e82a3640C87aCc",
    "0x84879D9635B3f64fB4fc170A130524d708762808"
  ],
  "numDeployments": 1,
  "solcInputHash": "dfb224aae55ceb1d52b02ce7efbb10f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"batch\",\"type\":\"address\"}],\"name\":\"BatchCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"project\",\"type\":\"address\"}],\"name\":\"ProjectRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BATCH_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEGAL_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECT_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canInvestInPeoplesPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canInvestInStakersPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_projects\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_slotCount\",\"type\":\"uint256\"}],\"name\":\"createBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"}],\"name\":\"getBatchForProject\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"hasBatchManagerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"hasLegalManagerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"hasProjectManagerRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_project\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_batch\",\"type\":\"address\"}],\"name\":\"isProjectInBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"projects\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"projectsToBatches\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_saleSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"registerProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"batch\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"extraInvestmentDuration\",\"type\":\"uint256\"}],\"name\":\"setBatchVotingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createBatch(address[],uint256)\":{\"details\":\"Must guarantee projects are in a valid state (whitelisted & not already belonging to a batch)Batches are created in order, and with no overlap.   i.e.: when creating batch #3, its start date must be after the end date of batch #2\"},\"getBatchForProject(address)\":{\"params\":{\"_project\":\"address of the project\"},\"returns\":{\"_0\":\"Batch address\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasLegalManagerRole(address)\":{\"params\":{\"_account\":\"Account to check\"},\"returns\":{\"_0\":\"true if account is a legal manager\"}},\"hasProjectManagerRole(address)\":{\"params\":{\"_account\":\"Account to check\"},\"returns\":{\"_0\":\"true if account is a project manager\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canInvestInPeoplesPool(address,address)\":{\"notice\":\"Checks if a user can invest in the people's pool of a project\"},\"canInvestInStakersPool(address)\":{\"notice\":\"Checks if a user can invest in the staker's pool of a project\"},\"canVote(address)\":{\"notice\":\"Checks if a user can vote\"},\"createBatch(address[],uint256)\":{\"notice\":\"Creates a new batch with\"},\"isProjectInBatch(address,address)\":{\"notice\":\"Checks if a project is included in the given batch\"},\"registerProject(string,address,uint256,uint256)\":{\"notice\":\"Registers a new Project\"},\"setBatchVotingPeriod(address,uint256,uint256,uint256)\":{\"notice\":\"Sets the voting period for a Batch\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/discovery/Controller.sol\":\"Controller\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface,\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            _supportsERC165Interface(account, type(IERC165).interfaceId) &&\\n            !_supportsERC165Interface(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && _supportsERC165Interface(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = _supportsERC165Interface(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in _interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!_supportsERC165Interface(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function _supportsERC165Interface(address account, bytes4 interfaceId) private view returns (bool) {\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n        (bool success, bytes memory result) = account.staticcall{gas: 30000}(encodedParams);\\n        if (result.length < 32) return false;\\n        return success && abi.decode(result, (bool));\\n    }\\n}\\n\",\"keccak256\":\"0xf7291d7213336b00ee7edbf7cd5034778dd7b0bda2a7489e664f1e5cacc6c24e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/RisingTide/RisingTide.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\nimport {Math} from \\\"../libraries/Math.sol\\\";\\n\\n/**\\n * Abstract implementation of a Rising Tide Calculator\\n *\\n * @dev In addition to implementing this interface, the contract must also\\n * ensure no investments are possible once the Rising Tide calculation kicks in\\n */\\nabstract contract RisingTide {\\n    //\\n    // Libraries\\n    //\\n    using Math for uint256;\\n\\n    //\\n    // Structs\\n    //\\n    enum RisingTideState {\\n        NotSet, // cap not yet given, or invalid\\n        Validating, // cap has been given, but still being validated\\n        Finished, // cap is set. claims and refunds are open\\n        Invalid // the current cap was deemed invalid\\n    }\\n\\n    struct RisingTideCache {\\n        uint256 index; // what index are we at\\n        uint256 sumForCap; // cumulative investments with given cap\\n        uint256 sumForNextCap; // cumulative investments with next cap\\n        uint256 largest; // largest investment so far\\n    }\\n\\n    //\\n    // Constants\\n    //\\n\\n    /// Min gas required to run one more cap validation iteration\\n    uint256 public constant CAP_VALIDATION_GAS_LIMIT = 100000;\\n\\n    //\\n    // State\\n    //\\n\\n    /// Current state\\n    RisingTideState public risingTideState;\\n\\n    /// Calculation cache\\n    RisingTideCache public risingTideCache;\\n\\n    /// The currently set cap\\n    /// Maximum amount of tokens that each buyer can actually get\\n    uint256 public individualCap;\\n\\n    //\\n    // Virtual Interface\\n    //\\n\\n    /// @return How many individual investors exist\\n    function investorCount() public view virtual returns (uint256);\\n\\n    /// @return Amount of the nth investor\\n    function investorAmountAt(uint256 n) public view virtual returns (uint256);\\n\\n    /// How many allocations have been made, regardless of the future individual cap\\n    ///\\n    /// @return Total amount invested\\n    function risingTide_totalAllocatedUncapped()\\n        public\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    /// How many tokens are to be distributed in total\\n    ///\\n    /// @return amount corresponding to the total supply available for distribution\\n    function risingTide_totalCap() public view virtual returns (uint256);\\n\\n    /// @return true if validation of current cap is still ongoing\\n    function risingTide_validating() external view returns (bool) {\\n        return risingTideState == RisingTideState.Validating;\\n    }\\n\\n    /// @return true if current cap is already validated\\n    function risingTide_isValidCap() public view returns (bool) {\\n        return risingTideState == RisingTideState.Finished;\\n    }\\n\\n    /// Internal helper to set a new cap and trigger the beginning of the validation logic\\n    ///\\n    /// @param _cap The cap to validate\\n    function _risingTide_setCap(uint256 _cap) internal {\\n        require(\\n            risingTideState == RisingTideState.NotSet ||\\n                risingTideState == RisingTideState.Invalid,\\n            \\\"already set or in progress\\\"\\n        );\\n\\n        individualCap = _cap;\\n        risingTideState = RisingTideState.Validating;\\n        risingTideCache = RisingTideCache(0, 0, 0, 0);\\n\\n        risingTide_validate();\\n    }\\n\\n    /// Continues a pending validation of the individual cap\\n    function risingTide_validate() public {\\n        require(risingTideState == RisingTideState.Validating);\\n\\n        RisingTideCache memory validation = risingTideCache;\\n        uint256 count = investorCount();\\n        uint256 localCap = individualCap;\\n\\n        for (\\n            ;\\n            validation.index < count && gasleft() > CAP_VALIDATION_GAS_LIMIT;\\n            ++validation.index\\n        ) {\\n            uint256 amount = investorAmountAt(validation.index);\\n\\n            validation.sumForCap += amount.min(localCap);\\n            validation.sumForNextCap += amount.min(localCap + 1);\\n            validation.largest = Math.max(validation.largest, amount);\\n        }\\n\\n        risingTideCache = validation;\\n\\n        if (validation.index == count) {\\n            bool _valid = _risingTide_validCap(localCap, validation);\\n            if (_valid) {\\n                risingTideState = RisingTideState.Finished;\\n            } else {\\n                risingTideState = RisingTideState.Invalid;\\n            }\\n        }\\n    }\\n\\n    //\\n    // Internal API\\n    //\\n\\n    /// @dev Determine if the given rising tide cap is valid.\\n    ///\\n    /// If the maximum investment is not reached, the rising tide cap does not\\n    /// have an upper bound. In this scenario, the cap is conventioned to be the\\n    /// largest individual investment.\\n    ///\\n    /// If the maximum investment is reached, the rising tide cap is defined as\\n    /// the highest possible cap such that the sum of all contributions with the\\n    /// cap applied does not exceed the maximum investment. This means that the\\n    /// sum of all contirbutions with any cap above the rising tide cap applied\\n    /// would exceed the maximum investment limit.\\n    ///\\n    /// @param _cap Rising tide cap to be validated, in wei.\\n    /// @param _validation The calculated CapValidation struct\\n    ///\\n    /// @return true if `cap` is a valid rising tide cap for the given parameters.\\n    function _risingTide_validCap(\\n        uint256 _cap,\\n        RisingTideCache memory _validation\\n    ) internal view returns (bool) {\\n        uint256 total = risingTide_totalAllocatedUncapped();\\n        uint256 max = risingTide_totalCap();\\n\\n        require(_validation.largest <= total);\\n        require(_validation.sumForCap <= total);\\n        require(_validation.sumForNextCap <= total);\\n\\n        if (total <= max) {\\n            return _cap == _validation.largest;\\n        } else {\\n            return (_validation.sumForNextCap > max &&\\n                _validation.sumForCap <= max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x43eb8abe4d726db5b8ddedaf379f16031289f530802b704e64725ca33778a463\",\"license\":\"MIT\"},\"contracts/discovery/Batch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\nimport {ERC165Checker} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\nimport {ICommon} from \\\"./interfaces/ICommon.sol\\\";\\nimport {IProject} from \\\"./interfaces/IProject.sol\\\";\\nimport {IController} from \\\"./interfaces/IController.sol\\\";\\nimport {IBatch} from \\\"./interfaces/IBatch.sol\\\";\\nimport {IStaking} from \\\"./interfaces/IStaking.sol\\\";\\nimport {ProjectVoting} from \\\"./ProjectVoting.sol\\\";\\n\\ncontract Batch is IBatch, ICommon, ProjectVoting {\\n    using ERC165Checker for address;\\n\\n    /// List of addresses for the project in the batch\\n    address[] public projects;\\n\\n    /// number of available slots\\n    uint256 public immutable slotCount;\\n\\n    /// Period for which the batch is open for voting\\n    Period public votingPeriod;\\n\\n    /// Timestamp at which the batch is closed for investment\\n    uint256 public investmentEnd;\\n\\n    /// Address for the controller contract\\n    address public immutable controller;\\n\\n    /// duration in seconds of each slot\\n    uint256 public singleSlotDuration;\\n\\n    modifier votingPeriodIsSet() {\\n        require(votingPeriod.start != 0, \\\"voting period not set\\\");\\n        require(votingPeriod.end != 0, \\\"voting period not set\\\");\\n        _;\\n    }\\n\\n    modifier inVotingPeriod() {\\n        require(\\n            votingPeriod.end >= block.timestamp &&\\n                votingPeriod.start <= block.timestamp,\\n            \\\"outside of voting period\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address[] memory _projects, uint256 _slotCount)\\n        ProjectVoting(_projects)\\n    {\\n        uint256 numProjects = _projects.length;\\n        require(numProjects > 0, \\\"projects must not be empty\\\");\\n        require(_slotCount > 0, \\\"slotCount must be greater than 0\\\");\\n        require(\\n            _slotCount <= numProjects,\\n            \\\"cannot have more slots than projects\\\"\\n        );\\n\\n        for (uint256 i = 0; i < numProjects; i++) {\\n            require(\\n                _projects[i].supportsInterface(type(IProject).interfaceId),\\n                \\\"project must be an IProject\\\"\\n            );\\n        }\\n        require(\\n            msg.sender.supportsInterface(type(IController).interfaceId),\\n            \\\"sender must be an IController\\\"\\n        );\\n        controller = msg.sender;\\n        projects = _projects;\\n        slotCount = _slotCount;\\n    }\\n\\n    function projectVoting_projects()\\n        public\\n        view\\n        virtual\\n        override(ProjectVoting)\\n        returns (address[] memory)\\n    {\\n        return projects;\\n    }\\n\\n    function projectVoting_votingPeriod()\\n        public\\n        view\\n        virtual\\n        override(ProjectVoting)\\n        returns (Period memory)\\n    {\\n        return votingPeriod;\\n    }\\n\\n    function projectVoting_singleSlotDuration()\\n        public\\n        view\\n        virtual\\n        override(ProjectVoting)\\n        returns (uint256)\\n    {\\n        return singleSlotDuration;\\n    }\\n\\n    function projectVoting_initialBonus()\\n        public\\n        pure\\n        override(ProjectVoting)\\n        returns (int256)\\n    {\\n        return 0.05 * 10**18;\\n    }\\n\\n    function projectVoting_finalBonus()\\n        public\\n        pure\\n        override(ProjectVoting)\\n        returns (int256)\\n    {\\n        return 0;\\n    }\\n\\n    function inInvestmentPeriod() external returns (bool) {\\n        return\\n            votingPeriod.start >= block.timestamp &&\\n            investmentEnd <= block.timestamp;\\n    }\\n\\n    function setVotingPeriod(\\n        uint256 start,\\n        uint256 end,\\n        uint256 extraInvestmentDuration\\n    ) external {\\n        require(start >= block.timestamp, \\\"start must be in the future\\\");\\n        require(start < end, \\\"start must be before end\\\");\\n        require(\\n            msg.sender == controller,\\n            \\\"only controller can set voting period\\\"\\n        );\\n        votingPeriod = Period(start, end);\\n        singleSlotDuration =\\n            (votingPeriod.end - votingPeriod.start) /\\n            slotCount;\\n        investmentEnd = votingPeriod.end + extraInvestmentDuration;\\n    }\\n\\n    function vote(address projectAddress)\\n        external\\n        votingPeriodIsSet\\n        inVotingPeriod\\n    {\\n        require(\\n            IController(controller).canVote(msg.sender),\\n            \\\"not allowed to vote\\\"\\n        );\\n\\n        _vote(projectAddress);\\n    }\\n\\n    function getCurrentWinners()\\n        external\\n        view\\n        votingPeriodIsSet\\n        returns (address[] memory)\\n    {\\n        return _getWinners();\\n    }\\n\\n    function getProjectStatus(address projectAddress)\\n        external\\n        view\\n        votingPeriodIsSet\\n        returns (ProjectStatus)\\n    {\\n        address[] memory computedWinners = _getWinners();\\n\\n        for (uint256 i = 0; i < computedWinners.length; i++) {\\n            if (computedWinners[i] == projectAddress) {\\n                return ProjectStatus.Won;\\n            }\\n        }\\n\\n        if (votingPeriod.end < block.timestamp) {\\n            return ProjectStatus.Lost;\\n        }\\n\\n        return projectStatuses[projectAddress];\\n    }\\n}\\n\",\"keccak256\":\"0xabe0135736e4155f1f57f5503d2a437451cc4194e81d713b17e2944438a13be3\",\"license\":\"MIT\"},\"contracts/discovery/Controller.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IController} from \\\"./interfaces/IController.sol\\\";\\nimport {IProject} from \\\"./interfaces/IProject.sol\\\";\\nimport {IBatch} from \\\"./interfaces/IBatch.sol\\\";\\nimport {IStaking} from \\\"./interfaces/IStaking.sol\\\";\\nimport {Project} from \\\"./Project.sol\\\";\\nimport {Batch} from \\\"./Batch.sol\\\";\\nimport {FractalRegistry} from \\\"../fractal_registry/FractalRegistry.sol\\\";\\n\\ncontract Controller is IController, ERC165, AccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    //\\n    // Events\\n    //\\n\\n    event ProjectRegistered(address project);\\n    event BatchCreated(address batch);\\n\\n    //\\n    // Constants\\n    //\\n    bytes32 public constant PROJECT_MANAGER_ROLE =\\n        keccak256(\\\"PROJECT_MANAGER_ROLE\\\");\\n    bytes32 public constant BATCH_MANAGER_ROLE =\\n        keccak256(\\\"BATCH_MANAGER_ROLE\\\");\\n    bytes32 public constant LEGAL_MANAGER_ROLE =\\n        keccak256(\\\"LEGAL_MANAGER_ROLE\\\");\\n\\n    //\\n    // State\\n    //\\n\\n    // all project contracts registered\\n    mapping(address => bool) public projects;\\n\\n    // project => batch\\n    mapping(address => address) public projectsToBatches;\\n\\n    // CTND staking contract\\n    address public staking;\\n\\n    // Fractal Registry contract\\n    address public registry;\\n\\n    // CTND token contract\\n    address public token;\\n\\n    constructor(\\n        address _registry,\\n        address _staking,\\n        address _token\\n    ) {\\n        registry = _registry;\\n        staking = _staking;\\n        token = _token;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(PROJECT_MANAGER_ROLE, msg.sender);\\n        _grantRole(BATCH_MANAGER_ROLE, msg.sender);\\n        _grantRole(LEGAL_MANAGER_ROLE, msg.sender);\\n    }\\n\\n    //\\n    // IController\\n    //\\n\\n    /// @inheritdoc IController\\n    function registerProject(\\n        string calldata _description,\\n        address _token,\\n        uint256 _saleSupply,\\n        uint256 _rate\\n    ) external override(IController) {\\n        IProject project = new Project(\\n            _description,\\n            _token,\\n            _saleSupply,\\n            _rate\\n        );\\n\\n        emit ProjectRegistered(address(project));\\n\\n        projects[address(project)] = true;\\n    }\\n\\n    /// @inheritdoc IController\\n    function createBatch(address[] calldata _projects, uint256 _slotCount)\\n        external\\n        override(IController)\\n        onlyRole(BATCH_MANAGER_ROLE)\\n    {\\n        IBatch batch = new Batch(_projects, _slotCount);\\n\\n        uint256 len = _projects.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            address project = _projects[i];\\n            require(projects[project], \\\"not a known project\\\");\\n            require(IProject(project).isReadyForListing(), \\\"project not ready\\\");\\n            require(\\n                projectsToBatches[project] == address(0),\\n                \\\"already in a batch\\\"\\n            );\\n\\n            projectsToBatches[project] = address(batch);\\n        }\\n\\n        emit BatchCreated(address(batch));\\n    }\\n\\n    /// @inheritdoc IController\\n    function isProjectInBatch(address _project, address _batch)\\n        external\\n        view\\n        override(IController)\\n        returns (bool)\\n    {\\n        return projectsToBatches[_project] == _batch;\\n    }\\n\\n    /// @inheritdoc IController\\n    function canInvestInStakersPool(address _user)\\n        external\\n        view\\n        override(IController)\\n        returns (bool)\\n    {\\n        return\\n            _hasKYC(_user) &&\\n            _belongsToDAO(_user) &&\\n            IStaking(staking).hasStaked(_user);\\n    }\\n\\n    /// @inheritdoc IController\\n    function canInvestInPeoplesPool(address _project, address _user)\\n        external\\n        view\\n        override(IController)\\n        returns (bool)\\n    {\\n        Batch batch = Batch(projectsToBatches[_project]);\\n\\n        return\\n            _hasKYC(_user) &&\\n            _belongsToDAO(_user) &&\\n            batch.userHasVotedForProject(_project, _user);\\n    }\\n\\n    function canVote(address _user)\\n        external\\n        view\\n        override(IController)\\n        returns (bool)\\n    {\\n        return _hasKYC(_user) && _belongsToDAO(_user);\\n    }\\n\\n    /// @inheritdoc IController\\n    function setBatchVotingPeriod(\\n        address batch,\\n        uint256 start,\\n        uint256 end,\\n        uint256 extraInvestmentDuration\\n    ) external override(IController) onlyRole(BATCH_MANAGER_ROLE) {\\n        Batch(batch).setVotingPeriod(start, end, extraInvestmentDuration);\\n    }\\n\\n    function _hasKYC(address _user) internal view returns (bool) {\\n        bytes32 fractalId = FractalRegistry(registry).getFractalId(_user);\\n        return fractalId != 0;\\n    }\\n\\n    function _belongsToDAO(address _user) internal view returns (bool) {\\n        return\\n            IERC20(token).balanceOf(_user) > 0 ||\\n            IStaking(staking).hasStaked(_user);\\n    }\\n\\n    //\\n    // Role queries\\n    //\\n\\n    // Checks if a given account has the PROJECT_MANAGER_ROLE role\\n    function hasProjectManagerRole(address _account)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return hasRole(PROJECT_MANAGER_ROLE, _account);\\n    }\\n\\n    // Checks if a given account has the BATCH_MANAGER_ROLE role\\n    function hasBatchManagerRole(address _account)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return hasRole(BATCH_MANAGER_ROLE, _account);\\n    }\\n\\n    // Checks if a given account has the LEGAL_MANAGER_ROLE role\\n    function hasLegalManagerRole(address _account)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return hasRole(BATCH_MANAGER_ROLE, _account);\\n    }\\n\\n    //\\n    // Queries\\n    //\\n\\n    /// @inheritdoc IController\\n    function getBatchForProject(address _project)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return projectsToBatches[_project];\\n    }\\n\\n    //\\n    // ERC165\\n    //\\n\\n    /// @inheritdoc ERC165\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC165, AccessControl)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IController).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xd43f36385230b24d1f9808fa807abac94a12e22ddc175a2f6ba9451da28fa0d0\",\"license\":\"UNLICENSED\"},\"contracts/discovery/Project.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport {IController} from \\\"./interfaces/IController.sol\\\";\\nimport {IProject} from \\\"./interfaces/IProject.sol\\\";\\n\\nimport {StakersPool} from \\\"./pools/StakersPool.sol\\\";\\nimport {PeoplesPool} from \\\"./pools/PeoplesPool.sol\\\";\\n\\ncontract Project is IProject, ERC165 {\\n    // deployed by each individual project owner, when registering\\n    // must be deployed via the Controller\\n    // will have a similar role as the CTND Vesting contract\\n\\n    // The IController instance in control of this project\\n    address public immutable controller;\\n\\n    // The token to be listed for sale\\n    address public immutable token;\\n\\n    // Total supply of {token} up for sale\\n    uint256 public immutable saleSupply;\\n\\n    // fixed price of token, expressed in paymentToken amount\\n    uint256 public immutable rate;\\n\\n    /// @inheritdoc IProject\\n    address public override(IProject) stakersPool;\\n\\n    /// @inheritdoc IProject\\n    address public override(IProject) peoplesPool;\\n\\n    // Project description, given at registration\\n    string public description;\\n\\n    // has the project been approved by a Citizend manager\\n    bool public override(IProject) approvedByManager;\\n\\n    // has the project been approved by the legal team\\n    bool public override(IProject) approvedByLegal;\\n\\n    constructor(\\n        string memory _description,\\n        address _token,\\n        uint256 _saleSupply,\\n        uint256 _rate\\n    ) {\\n        controller = msg.sender;\\n\\n        description = _description;\\n        token = _token;\\n        saleSupply = _saleSupply;\\n        rate = _rate;\\n\\n        uint256 stakersPoolSupply = saleSupply / 2;\\n        uint256 peoplesPoolSupply = saleSupply - stakersPoolSupply;\\n\\n        stakersPool = address(new StakersPool(stakersPoolSupply));\\n        peoplesPool = address(new PeoplesPool(peoplesPoolSupply));\\n    }\\n\\n    //\\n    // Modifiers\\n    //\\n\\n    modifier onlyManager(address _account) {\\n        require(\\n            IController(controller).hasProjectManagerRole(msg.sender),\\n            \\\"not a project manager\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyLegal(address _account) {\\n        require(\\n            IController(controller).hasLegalManagerRole(msg.sender),\\n            \\\"not a legal manager\\\"\\n        );\\n        _;\\n    }\\n\\n    function invest(uint256 _peoplesAmount, uint256 _stakersAmount) external {\\n        revert(\\\"not yet implemented\\\");\\n    }\\n\\n    //\\n    // IProject\\n    //\\n\\n    /// @inheritdoc IProject\\n    function approveByManager()\\n        public\\n        override(IProject)\\n        onlyManager(msg.sender)\\n    {\\n        require(!approvedByManager, \\\"already approved by manager\\\");\\n\\n        approvedByManager = true;\\n    }\\n\\n    /// @inheritdoc IProject\\n    function approveByLegal() public override(IProject) onlyLegal(msg.sender) {\\n        require(!approvedByLegal, \\\"already approved by legal\\\");\\n\\n        approvedByLegal = true;\\n    }\\n\\n    /// @inheritdoc IProject\\n    function hasTokens() public view override(IProject) returns (bool) {\\n        uint256 balance = IERC20(token).balanceOf(address(this));\\n\\n        return balance >= saleSupply;\\n    }\\n\\n    /// @inheritdoc IProject\\n    function isReadyForListing()\\n        external\\n        view\\n        override(IProject)\\n        returns (bool)\\n    {\\n        return hasTokens() && approvedByManager && approvedByLegal;\\n    }\\n\\n    //\\n    // ERC165\\n    //\\n\\n    /// @inheritdoc ERC165\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IProject).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x825b7bff1de512f04295eadb945d8010f2cbb52c4145b3b1afc569e0feda1e64\",\"license\":\"MIT\"},\"contracts/discovery/ProjectVoting.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity =0.8.12;\\n\\nimport {ICommon} from \\\"./interfaces/ICommon.sol\\\";\\nimport {Math} from \\\"../libraries/Math.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\nabstract contract ProjectVoting is ICommon {\\n    enum ProjectStatus {\\n        InProgress,\\n        Won,\\n        Lost\\n    }\\n\\n    struct SortableVote {\\n        uint256 originalIndex;\\n        uint256 count;\\n    }\\n\\n    /// number of votes for each project\\n    uint32[] public votes;\\n\\n    /// Ordered list of slot winners\\n    /// @dev only valid up to the last time there was a vote. Use getWinners() instead.\\n    address[] winners;\\n\\n    /// index in the votes array to project address\\n    mapping(uint256 => address) public votesIndexToProject;\\n\\n    /// project address to index  in the votes array\\n    mapping(address => uint256) public projectToVotesIndex;\\n\\n    /// user => votes\\n    mapping(address => uint256) public userVoteCount;\\n\\n    /// project address => votes\\n    mapping(address => uint256) public projectVoteCount;\\n\\n    /// project address => weightedVotes\\n    mapping(address => uint256) public weightedProjectVoteCount;\\n\\n    /// project => (user => voted)\\n    mapping(address => mapping(address => bool)) public userHasVotedForProject;\\n\\n    /// Project address to status\\n    /// @dev only valid up to the last time there was a vote. Use getProject(address) instead.\\n    mapping(address => ProjectStatus) projectStatuses;\\n\\n    uint256 projectsWithVotesCount;\\n\\n    constructor(address[] memory _projects) {\\n        for (uint256 i = 0; i < _projects.length; i++) {\\n            votes.push(0);\\n            votesIndexToProject[i] = _projects[i];\\n            projectToVotesIndex[_projects[i]] = i;\\n        }\\n    }\\n\\n    function projectVoting_projects()\\n        public\\n        view\\n        virtual\\n        returns (address[] memory);\\n\\n    function projectVoting_votingPeriod()\\n        public\\n        view\\n        virtual\\n        returns (Period memory);\\n\\n    function projectVoting_singleSlotDuration()\\n        public\\n        view\\n        virtual\\n        returns (uint256);\\n\\n    function projectVoting_initialBonus() public view virtual returns (int256);\\n\\n    function projectVoting_finalBonus() public view virtual returns (int256);\\n\\n    function _vote(address projectAddress) internal {\\n        require(\\n            !userHasVotedForProject[projectAddress][msg.sender],\\n            \\\"already voted in this project\\\"\\n        );\\n        _defineWinners();\\n        require(\\n            projectStatuses[projectAddress] == ProjectStatus.InProgress,\\n            \\\"project is not in progress\\\"\\n        );\\n        userHasVotedForProject[projectAddress][msg.sender] = true;\\n        userVoteCount[msg.sender]++;\\n        projectVoteCount[projectAddress]++;\\n        weightedProjectVoteCount[projectAddress] += _calculateWeightedVote(\\n            block.timestamp\\n        );\\n\\n        if (votes[projectToVotesIndex[projectAddress]] == 0) {\\n            projectsWithVotesCount++;\\n        }\\n        votes[projectToVotesIndex[projectAddress]]++;\\n    }\\n\\n    function _defineWinners() internal {\\n        address[] memory newWinners = _getNewWinners();\\n\\n        if (newWinners.length == 0) {\\n            return;\\n        }\\n        for (uint256 i = 0; i < newWinners.length; i++) {\\n            winners.push(newWinners[i]);\\n            projectStatuses[newWinners[i]] = ProjectStatus.Won;\\n        }\\n\\n        if (block.timestamp >= projectVoting_votingPeriod().end) {\\n            uint256 numProjects = projectVoting_projects().length;\\n\\n            for (uint256 i = 0; i < numProjects; i++) {\\n                if (\\n                    projectStatuses[projectVoting_projects()[i]] ==\\n                    ProjectStatus.InProgress\\n                ) {\\n                    projectStatuses[projectVoting_projects()[i]] = ProjectStatus\\n                        .Lost;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getNewWinners() internal view returns (address[] memory) {\\n        uint256 numberOfExistingWinners = winners.length;\\n        uint256 numberOfSlotsToCalculate = _numberOfSlotsToCalculate();\\n        uint256 numberOfWinners = Math.min(\\n            projectsWithVotesCount,\\n            numberOfSlotsToCalculate\\n        );\\n        uint256 votesSize = votes.length;\\n        uint256 numberOfNewWinners = numberOfWinners - numberOfExistingWinners;\\n        address[] memory result = new address[](numberOfNewWinners);\\n\\n        if (block.timestamp < projectVoting_votingPeriod().start) {\\n            return result;\\n        }\\n\\n        if (numberOfNewWinners == 0) {\\n            return result;\\n        }\\n\\n        SortableVote[] memory sortedVotes = new SortableVote[](votesSize);\\n\\n        // copy votes to sortedVotes to get the original indexes\\n        for (uint256 i = 0; i < votesSize; i++) {\\n            ProjectStatus status = projectStatuses[votesIndexToProject[i]];\\n            if (status == ProjectStatus.Won) {\\n                // This index can be left empty because it will be sorted\\n                continue;\\n            } else {\\n                sortedVotes[i] = SortableVote(\\n                    i,\\n                    weightedProjectVoteCount[votesIndexToProject[i]]\\n                );\\n            }\\n        }\\n\\n        // sort the votes\\n        sortedVotes = _sortVotes(sortedVotes);\\n\\n        // add the remaining votes to the result. Ensuring we start from where\\n        // the last loop left off and end at the number of total winners to be\\n        // calculated\\n        for (uint256 i = 0; i < numberOfNewWinners; i++) {\\n            result[i] = votesIndexToProject[sortedVotes[i].originalIndex];\\n        }\\n\\n        return result;\\n    }\\n\\n    function _getWinners() internal view returns (address[] memory) {\\n        if (block.timestamp < projectVoting_votingPeriod().start) {\\n            return winners;\\n        }\\n\\n        uint256 numberOfExistingWinners = winners.length;\\n        uint256 numberOfSlotsToCalculate = _numberOfSlotsToCalculate();\\n        uint256 numberOfWinners = Math.min(\\n            projectsWithVotesCount,\\n            numberOfSlotsToCalculate\\n        );\\n        uint256 votesSize = votes.length;\\n\\n        if (numberOfWinners == numberOfExistingWinners) {\\n            return winners;\\n        }\\n\\n        SortableVote[] memory sortedVotes = new SortableVote[](votesSize);\\n        address[] memory result = new address[](numberOfWinners);\\n\\n        // copy votes to sortedVotes to get the original indexes\\n        for (uint256 i = 0; i < votesSize; i++) {\\n            sortedVotes[i] = SortableVote(\\n                i,\\n                weightedProjectVoteCount[votesIndexToProject[i]]\\n            );\\n        }\\n\\n        // remove from sortedVotes the votes that are already in winners\\n        for (uint256 i = 0; i < numberOfExistingWinners; i++) {\\n            uint256 index = projectToVotesIndex[winners[i]];\\n            delete sortedVotes[index];\\n        }\\n\\n        // sort the remaining votes (the ones that are in winners will be at the end)\\n        sortedVotes = _sortVotes(sortedVotes);\\n\\n        // add existing winners to the beginning of the result, keeping order\\n        for (uint256 i = 0; i < numberOfExistingWinners; i++) {\\n            result[i] = winners[i];\\n        }\\n\\n        // add the remaining votes to the result. Ensuring we start from where\\n        // the last loop left off and end at the number of total winners to be\\n        // calculated\\n        for (uint256 i = numberOfExistingWinners; i < numberOfWinners; i++) {\\n            result[i] = votesIndexToProject[\\n                sortedVotes[i - numberOfExistingWinners].originalIndex\\n            ];\\n        }\\n\\n        return result;\\n    }\\n\\n    function _numberOfSlotsToCalculate() internal view returns (uint256) {\\n        uint256 endTimestamp = Math.min(\\n            projectVoting_votingPeriod().end,\\n            block.timestamp\\n        );\\n        return\\n            (endTimestamp - projectVoting_votingPeriod().start) /\\n            projectVoting_singleSlotDuration();\\n    }\\n\\n    function _sortVotes(SortableVote[] memory _votes)\\n        internal\\n        view\\n        returns (SortableVote[] memory)\\n    {\\n        _quickSort(_votes, int256(0), int256(_votes.length - 1));\\n        return _votes;\\n    }\\n\\n    function _quickSort(\\n        SortableVote[] memory _votes,\\n        int256 left,\\n        int256 right\\n    ) internal view {\\n        int256 i = left;\\n        int256 j = right;\\n        if (i == j) return;\\n\\n        uint256 pivot = _votes[uint256(left + (right - left) / 2)].count;\\n\\n        while (i <= j) {\\n            while (_votes[uint256(i)].count > pivot) i++;\\n            while (pivot > _votes[uint256(j)].count) j--;\\n            if (i <= j) {\\n                (_votes[uint256(i)], _votes[uint256(j)]) = (\\n                    _votes[uint256(j)],\\n                    _votes[uint256(i)]\\n                );\\n                i++;\\n                j--;\\n            }\\n        }\\n        if (left < j) _quickSort(_votes, left, j);\\n        if (i < right) _quickSort(_votes, i, right);\\n    }\\n\\n    function _calculateWeightedVote(uint256 currentTime)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        int256 bonusDelta = int256(\\n            projectVoting_finalBonus() - projectVoting_initialBonus()\\n        );\\n        int256 timeDelta = int256(\\n            projectVoting_votingPeriod().end -\\n                projectVoting_votingPeriod().start\\n        );\\n        int256 slope = bonusDelta / timeDelta;\\n        uint256 weightedVote = uint256(\\n            (slope *\\n                int256(currentTime - projectVoting_votingPeriod().start) +\\n                projectVoting_initialBonus())\\n        );\\n\\n        return weightedVote;\\n    }\\n}\\n\",\"keccak256\":\"0xd2f5e1fdf4f427d49c6d8ba2ab8ccf7863c1feec4cf506f39d9adfaeab2aa5fb\",\"license\":\"UNLICENSED\"},\"contracts/discovery/interfaces/IBatch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\ninterface IBatch {\\n    function vote(address projectAddress) external;\\n}\\n\",\"keccak256\":\"0x144800dc8a7ea696c935a61f5b2fc8d4643662865ec3e0fa1a59baf43a2b3077\",\"license\":\"MIT\"},\"contracts/discovery/interfaces/ICommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\ninterface ICommon {\\n    /// Definition of a time period\\n    struct Period {\\n        uint256 start;\\n        uint256 end;\\n    }\\n}\\n\",\"keccak256\":\"0x814f0d1e0bc05822bb87f145d0d9ffbd36d1b7bc55be332051d24841a78c9d62\",\"license\":\"MIT\"},\"contracts/discovery/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\nimport {IBatch} from \\\"./IBatch.sol\\\";\\n\\n/// The main entry point for most admin interactions with the discovery system:\\n///   * Creating batches\\n///   * Whitelisting companies\\ninterface IController {\\n    // Checks if a given account has the PROJECT_MANAGER_ROLE role\\n    /// @param _account Account to check\\n    /// @return true if account is a project manager\\n    function hasProjectManagerRole(address _account)\\n        external\\n        view\\n        returns (bool);\\n\\n    // Checks if a given account has the LEGAL_MANAGER_ROLE role\\n    /// @param _account Account to check\\n    /// @return true if account is a legal manager\\n    function hasLegalManagerRole(address _account) external view returns (bool);\\n\\n    /// @param _project address of the project\\n    /// @return Batch address\\n    function getBatchForProject(address _project)\\n        external\\n        view\\n        returns (address);\\n\\n    /// Creates a new batch with\\n    ///\\n    /// @dev Must guarantee projects are in a valid state (whitelisted & not already belonging to a batch)\\n    ///\\n    /// @dev Batches are created in order, and with no overlap.\\n    ///   i.e.: when creating batch #3, its start date must be after the end date of batch #2\\n    function createBatch(address[] calldata projects, uint256 _slotCount)\\n        external;\\n\\n    /// Registers a new Project\\n    function registerProject(\\n        string calldata _description,\\n        address _token,\\n        uint256 _saleSupply,\\n        uint256 _rate\\n    ) external;\\n\\n    /// Checks if a project is included in the given batch\\n    function isProjectInBatch(address _project, address _batch)\\n        external\\n        returns (bool);\\n\\n    /// Checks if a user can invest in the staker's pool of a project\\n    function canInvestInStakersPool(address _user) external view returns (bool);\\n\\n    /// Checks if a user can invest in the people's pool of a project\\n    function canInvestInPeoplesPool(address _project, address _user)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// Checks if a user can vote\\n    function canVote(address _user) external view returns (bool);\\n\\n    /// Sets the voting period for a Batch\\n    function setBatchVotingPeriod(\\n        address batch,\\n        uint256 start,\\n        uint256 end,\\n        uint256 extraInvestmentDuration\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf959a8b560b7b6166ca09a8e42793556e9072aad466ca98c0fffa8f5cbfb368e\",\"license\":\"MIT\"},\"contracts/discovery/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\ninterface IPool {\\n    /// Similar to Sale.buy\\n    function invest(address _investor, uint256 _amount) external;\\n\\n    /**\\n     * Sets the individual cap for investors, which will then be used when\\n     * claiming or refunding. Only callable by the cap validator role.\\n     *\\n     * @param _cap The cap per investor to be set, specified in the\\n     * project's token\\n     */\\n    function setIndividualCap(uint256 _cap) external;\\n\\n    /// Similar to Sale.refund\\n    function refund(address _to) external;\\n\\n    /// Similar to Sale.refundAmount\\n    function refundAmount(address _to) external view returns (uint256 amount);\\n\\n    /// Similar to Sale.uncappedAllocation\\n    function uncappedAllocation(address _to)\\n        external\\n        view\\n        returns (uint256 amount);\\n\\n    /// Similar to Sale.allocation\\n    function allocation(address _to) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x2436078faf3b4582ef9f607af754cd47e22739e73f136500c07c95aef4ee43b4\",\"license\":\"MIT\"},\"contracts/discovery/interfaces/IProject.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\ninterface IProject {\\n    /// Approval function from an eligible project manager\\n    function approveByManager() external;\\n\\n    /// One of the criteria for listing: has the project been approved by a project manager?\\n    function approvedByManager() external view returns (bool);\\n\\n    /// Approval function from the legal team\\n    function approveByLegal() external;\\n\\n    /// One of the criteria for listing: has the project been approved by the legal team?\\n    function approvedByLegal() external view returns (bool);\\n\\n    /// One of the criteria for listing: does the project contract hold the sale\\n    /// supply already?\\n    function hasTokens() external view returns (bool);\\n\\n    /// True if project fulfills all criteria to be included in an upcoming batch\\n    function isReadyForListing() external view returns (bool);\\n\\n    function stakersPool() external view returns (address);\\n\\n    function peoplesPool() external view returns (address);\\n\\n    function invest(uint256 _peoplesAmount, uint256 _stakersAmount) external;\\n}\\n\",\"keccak256\":\"0x9fc01e850f28918957f789883b91624f1d58c0b4947c1da805632fe680c7841e\",\"license\":\"MIT\"},\"contracts/discovery/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\ninterface IStaking {\\n    /**\\n     * Stakes the given amount of tokens, using the `msg.sender` as the\\n     * staker.\\n     *\\n     * @dev Emits a `Stake` event.\\n     *\\n     * @param amount The amount of tokens to stake.\\n     */\\n    function stake(uint256 amount) external;\\n\\n    /**\\n     * Unbonds the given amount of tokens, using the `msg.sender` as the\\n     * staker. The staker must have already staked the given amount of\\n     * tokens.\\n     *\\n     * @dev Emits a `Unbond` event.\\n     * @dev Uses a mapping to handle the different unbondings, but from the\\n     * caller's side it's treated as a single pool.\\n     *\\n     * @param amount The amount of tokens to unbond.\\n     */\\n    function unbond(uint256 amount) external;\\n\\n    /**\\n     * Rebonds the given amount of tokens for `msg.sender`. It requires that\\n     * there are enough funds that are still unbonding or that have been\\n     * unbonded but not yet withdrawn.\\n     *\\n     * @dev Emits a `Rebond` event.\\n     *\\n     * @param amount The amount of tokens to rebond.\\n     */\\n    function rebond(uint256 amount) external;\\n\\n    /**\\n     * Withdraws any tokens that have gone through the full unbonding period\\n     *\\n     * @dev Emits a `Withdrawal` event.\\n     */\\n    function withdraw() external;\\n\\n    /**\\n     * Computes how many tokens waiting for unbonding can already be withdrawn\\n     */\\n    function withdrawable(address _account) external view returns (uint256);\\n\\n    function hasStaked(address _account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x59e98974d72c76879437e55612e9e7f7b3c5b73c6aea4b21a5f33637217c4e5f\",\"license\":\"MIT\"},\"contracts/discovery/pools/PeoplesPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\nimport {Pool} from \\\"./Pool.sol\\\";\\n\\ncontract PeoplesPool is Pool {\\n    constructor(uint256 _saleSupply) Pool(_saleSupply) {}\\n}\\n\",\"keccak256\":\"0x0aa312a4811cfa2949a4347dc3efc6bef010302ea34f0fe6480af324ea932c86\",\"license\":\"MIT\"},\"contracts/discovery/pools/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\nimport {IPool} from \\\"../interfaces/IPool.sol\\\";\\nimport {RisingTide} from \\\"../../RisingTide/RisingTide.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * TODO users should be able to `buy` into the pool, as long as they meet the conditions\\n * (stakerspool is for CTND stakers, peoplespool is for those who have already voted for the project)\\n *\\n * TODO `buy` is for the Project to be called from the project only\\n * TODO other than these requirements, the rest should be very similar to the CTND Sale contract\\n */\\nabstract contract Pool is IPool, RisingTide {\\n    address project;\\n\\n    /// total unique investors\\n    uint256 public _investorCount;\\n\\n    mapping(address => uint256) investorBalances;\\n\\n    /// incrementing index => investor address\\n    mapping(uint256 => address) investorByIndex;\\n\\n    /// How many tokens have been allocated, before cap calculation\\n    uint256 public totalUncappedAllocations;\\n\\n    // Total supply of the project's token up for sale\\n    uint256 public immutable saleSupply;\\n\\n    constructor(uint256 _saleSupply) {\\n        project = msg.sender;\\n        saleSupply = _saleSupply;\\n    }\\n\\n    modifier onlyProject() {\\n        require(msg.sender == project, \\\"not project\\\");\\n        _;\\n    }\\n\\n    //\\n    // IPool\\n    //\\n\\n    /// @inheritdoc IPool\\n    function invest(address _investor, uint256 _amount)\\n        external\\n        override(IPool)\\n        onlyProject\\n    {\\n        if (investorBalances[_investor] == 0) {\\n            investorByIndex[_investorCount] = _investor;\\n            _investorCount++;\\n        }\\n\\n        investorBalances[_investor] += _amount;\\n        totalUncappedAllocations += _amount;\\n    }\\n\\n    function setIndividualCap(uint256 _cap) external {\\n        _risingTide_setCap(_cap);\\n    }\\n\\n    /// @inheritdoc IPool\\n    function refund(address _to) external override(IPool) {\\n        revert(\\\"not yet implemented\\\");\\n    }\\n\\n    /// @inheritdoc IPool\\n    function refundAmount(address _to)\\n        external\\n        view\\n        override(IPool)\\n        returns (uint256 amount)\\n    {\\n        revert(\\\"not yet implemented\\\");\\n    }\\n\\n    /// @inheritdoc IPool\\n    function uncappedAllocation(address _to)\\n        external\\n        view\\n        override(IPool)\\n        returns (uint256 amount)\\n    {\\n        revert(\\\"not yet implemented\\\");\\n    }\\n\\n    /// @inheritdoc IPool\\n    function allocation(address _to)\\n        external\\n        view\\n        override(IPool)\\n        returns (uint256 amount)\\n    {\\n        revert(\\\"not yet implemented\\\");\\n    }\\n\\n    //\\n    // RisingTide\\n    //\\n\\n    /// @inheritdoc RisingTide\\n    function investorCount()\\n        public\\n        view\\n        override(RisingTide)\\n        returns (uint256)\\n    {\\n        return _investorCount;\\n    }\\n\\n    /// @inheritdoc RisingTide\\n    function investorAmountAt(uint256 i)\\n        public\\n        view\\n        override(RisingTide)\\n        returns (uint256)\\n    {\\n        address addr = investorByIndex[i];\\n\\n        return investorBalances[addr];\\n    }\\n\\n    /// @inheritdoc RisingTide\\n    function risingTide_totalAllocatedUncapped()\\n        public\\n        view\\n        override(RisingTide)\\n        returns (uint256)\\n    {\\n        return totalUncappedAllocations;\\n    }\\n\\n    /// @inheritdoc RisingTide\\n    function risingTide_totalCap()\\n        public\\n        view\\n        override(RisingTide)\\n        returns (uint256)\\n    {\\n        return saleSupply;\\n    }\\n}\\n\",\"keccak256\":\"0x9b8fbc29ca778a05bfa071a119a34bee1d1fb815d32e078ea0ae03307f4a453d\",\"license\":\"MIT\"},\"contracts/discovery/pools/StakersPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\nimport {Pool} from \\\"./Pool.sol\\\";\\n\\ncontract StakersPool is Pool {\\n    constructor(uint256 _saleSupply) Pool(_saleSupply) {}\\n}\\n\",\"keccak256\":\"0xa78cf7a3829289aefa8d0048067526f284c15855b79ca143a68a402f1968bcb7\",\"license\":\"MIT\"},\"contracts/fractal_registry/FractalRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Fractal registry v0\\n/// @author Antoni Dikov and Shelby Doolittle\\ncontract FractalRegistry {\\n    address root;\\n    mapping(address => bool) delegates;\\n\\n    mapping(address => bytes32) fractalIdForAddress;\\n    mapping(string => mapping(bytes32 => bool)) userLists;\\n\\n    constructor(address _root) {\\n        root = _root;\\n    }\\n\\n    /// @param addr is Eth address\\n    /// @return FractalId as bytes32\\n    function getFractalId(address addr) external view returns (bytes32) {\\n        return fractalIdForAddress[addr];\\n    }\\n\\n    /// @notice Adds a user to the mapping of Eth address to FractalId.\\n    /// @param addr is Eth address.\\n    /// @param fractalId is FractalId in bytes32.\\n    function addUserAddress(address addr, bytes32 fractalId) external {\\n        requireMutatePermission();\\n        fractalIdForAddress[addr] = fractalId;\\n    }\\n\\n    /// @notice Removes an address from the mapping of Eth address to FractalId.\\n    /// @param addr is Eth address.\\n    function removeUserAddress(address addr) external {\\n        requireMutatePermission();\\n        delete fractalIdForAddress[addr];\\n    }\\n\\n    /// @notice Checks if a user by FractalId exists in a specific list.\\n    /// @param userId is FractalId in bytes32.\\n    /// @param listId is the list id.\\n    /// @return bool if the user is the specified list.\\n    function isUserInList(bytes32 userId, string memory listId)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return userLists[listId][userId];\\n    }\\n\\n    /// @notice Add user by FractalId to a specific list.\\n    /// @param userId is FractalId in bytes32.\\n    /// @param listId is the list id.\\n    function addUserToList(bytes32 userId, string memory listId) external {\\n        requireMutatePermission();\\n        userLists[listId][userId] = true;\\n    }\\n\\n    /// @notice Remove user by FractalId from a specific list.\\n    /// @param userId is FractalId in bytes32.\\n    /// @param listId is the list id.\\n    function removeUserFromList(bytes32 userId, string memory listId) external {\\n        requireMutatePermission();\\n        delete userLists[listId][userId];\\n    }\\n\\n    /// @notice Only root can add delegates. Delegates have mutate permissions.\\n    /// @param addr is Eth address\\n    function addDelegate(address addr) external {\\n        require(msg.sender == root, \\\"Must be root\\\");\\n        delegates[addr] = true;\\n    }\\n\\n    /// @notice Removing delegates is only posible from root or by himself.\\n    /// @param addr is Eth address\\n    function removeDelegate(address addr) external {\\n        require(\\n            msg.sender == root || msg.sender == addr,\\n            \\\"Not allowed to remove address\\\"\\n        );\\n        delete delegates[addr];\\n    }\\n\\n    function requireMutatePermission() private view {\\n        require(\\n            msg.sender == root || delegates[msg.sender],\\n            \\\"Not allowed to mutate\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xeb758b84c74d60804219786b08dcd51513c411c66fcfdf53a740c3c382f730a3\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\nlibrary Math {\\n    /**\\n     * @dev Return the smallest of the two arguments.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Return the largest of the two arguments.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return b < a ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x669288d65313ac75a0db31864d85f5a95049e37f1dea6e4d6cb86fd264bca899\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005bbb38038062005bbb8339810160408190526200003491620001c9565b600480546001600160a01b038086166001600160a01b0319928316179092556003805485841690831617905560058054928416929091169190911790556200007e6000336200010b565b620000aa7fa88d484f5aeb539ab60f9bd084e23511bc356a4f715a255e909643bb69ddcb41336200010b565b620000d67f28eb28c26cbbd48a6bfad016505ccf4a189452995f59d16217af8920961ed25c336200010b565b620001027ffbe1c1e064e33268dfb07e8ec24bb5d882bde92a088196f7cbea3ea66117a7a7336200010b565b50505062000213565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620001a8576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001673390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b80516001600160a01b0381168114620001c457600080fd5b919050565b600080600060608486031215620001df57600080fd5b620001ea84620001ac565b9250620001fa60208501620001ac565b91506200020a60408501620001ac565b90509250925092565b61599880620002236000396000f3fe60806040523480156200001157600080fd5b5060043610620001d15760003560e01c80637b1039991162000101578063a217fddf11620000a3578063d547741f116200007a578063d547741f14620004b8578063d7fd21761462000402578063e9719c8714620004cf578063fc0c546a14620004e657600080fd5b8063a217fddf1462000481578063adfaa72e146200048a578063c73bcb9414620004a157600080fd5b80638b6e57b211620000d85780638b6e57b214620004195780638de07d9f146200043057806391d14854146200044757600080fd5b80637b10399914620003c8578063840e78fd14620003dc5780638705130b146200040257600080fd5b806329c76a73116200017757806342958a81116200014e57806342958a811462000342578063490e221614620003755780634cf088d9146200039d578063512d3fff14620003b157600080fd5b806329c76a7314620002ec5780632f2ff15d146200031457806336568abe146200032b57600080fd5b806316b27e0411620001ac57806316b27e0414620002815780632101b71a146200029a578063248a9ca314620002c657600080fd5b806301ffc9a714620001d65780630978dc8b14620002025780630f50d813146200024a575b600080fd5b620001ed620001e7366004620010e1565b620004fa565b60405190151581526020015b60405180910390f35b62000231620002133660046200112a565b6001600160a01b039081166000908152600260205260409020541690565b6040516001600160a01b039091168152602001620001f9565b620002727f28eb28c26cbbd48a6bfad016505ccf4a189452995f59d16217af8920961ed25c81565b604051908152602001620001f9565b620002986200029236600462001148565b62000528565b005b62000231620002ab3660046200112a565b6002602052600090815260409020546001600160a01b031681565b62000272620002d736600462001184565b60009081526020819052604090206001015490565b620002727fa88d484f5aeb539ab60f9bd084e23511bc356a4f715a255e909643bb69ddcb4181565b62000298620003253660046200119e565b620005c6565b620002986200033c3660046200119e565b620005f5565b620001ed62000353366004620011cd565b6001600160a01b03918216600090815260026020526040902054821691161490565b620002727ffbe1c1e064e33268dfb07e8ec24bb5d882bde92a088196f7cbea3ea66117a7a781565b60035462000231906001600160a01b031681565b62000298620003c2366004620011fc565b6200067b565b60045462000231906001600160a01b031681565b620001ed620003ed3660046200112a565b60016020526000908152604090205460ff1681565b620001ed620004133660046200112a565b62000922565b620001ed6200042a3660046200112a565b62000963565b620001ed620004413660046200112a565b620009a4565b620001ed620004583660046200119e565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b62000272600081565b620001ed6200049b3660046200112a565b62000a3e565b620001ed620004b2366004620011cd565b62000a5e565b62000298620004c93660046200119e565b62000b1e565b62000298620004e03660046200127c565b62000b48565b60055462000231906001600160a01b031681565b60006001600160e01b03198216635eb1ec9760e01b1480620005225750620005228262000bf6565b92915050565b7f28eb28c26cbbd48a6bfad016505ccf4a189452995f59d16217af8920961ed25c62000555813362000c2d565b60405163b85cf17760e01b81526004810185905260248101849052604481018390526001600160a01b0386169063b85cf17790606401600060405180830381600087803b158015620005a657600080fd5b505af1158015620005bb573d6000803e3d6000fd5b505050505050505050565b600082815260208190526040902060010154620005e4813362000c2d565b620005f0838362000cb4565b505050565b6001600160a01b03811633146200066b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b62000677828262000d54565b5050565b7f28eb28c26cbbd48a6bfad016505ccf4a189452995f59d16217af8920961ed25c620006a8813362000c2d565b6000848484604051620006bb90620010c5565b620006c99392919062001316565b604051809103906000f080158015620006e6573d6000803e3d6000fd5b5090508360005b81811015620008dd5760008787838181106200070d576200070d6200136e565b90506020020160208101906200072491906200112a565b6001600160a01b03811660009081526001602052604090205490915060ff16620007875760405162461bcd60e51b81526020600482015260136024820152721b9bdd0818481adb9bdddb881c1c9bda9958dd606a1b604482015260640162000662565b806001600160a01b031663d21705156040518163ffffffff1660e01b8152600401602060405180830381865afa158015620007c6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007ec919062001384565b6200082e5760405162461bcd60e51b815260206004820152601160248201527070726f6a656374206e6f7420726561647960781b604482015260640162000662565b6001600160a01b0381811660009081526002602052604090205416156200088d5760405162461bcd60e51b81526020600482015260126024820152710c2d8e4cac2c8f240d2dc40c240c4c2e8c6d60731b604482015260640162000662565b6001600160a01b039081166000908152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff191691851691909117905580620008d481620013be565b915050620006ed565b506040516001600160a01b03831681527fcc2b0054ce052d2e9c62f1c7e4b5e160ca2d5debd20c7f43ddd1d1c210252f689060200160405180910390a1505050505050565b6001600160a01b03811660009081527f0eca2fdc6ecf34558d66be619b512eb8aeceae095ef0d035077dd168378bea5f602052604081205460ff1662000522565b6001600160a01b03811660009081527f0beaf284d6500f9045213f3d900c4b07f5b63bfcb6036ce1569f5385ec1728fc602052604081205460ff1662000522565b6000620009b18262000dd4565b8015620009c45750620009c48262000e54565b801562000522575060035460405163324f23cd60e21b81526001600160a01b0384811660048301529091169063c93c8f34906024015b602060405180830381865afa15801562000a18573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000522919062001384565b600062000a4b8262000dd4565b8015620005225750620005228262000e54565b6001600160a01b0380831660009081526002602052604081205490911662000a868362000dd4565b801562000a99575062000a998362000e54565b801562000b165750604051634fc93c3760e11b81526001600160a01b0385811660048301528481166024830152821690639f92786e90604401602060405180830381865afa15801562000af0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b16919062001384565b949350505050565b60008281526020819052604090206001015462000b3c813362000c2d565b620005f0838362000d54565b6000858585858560405162000b5d90620010d3565b62000b6d959493929190620013dc565b604051809103906000f08015801562000b8a573d6000803e3d6000fd5b506040516001600160a01b03821681529091507fe6c3ff59790315a93d7da11ca1914b7c858abab4205874f40cfecaf8b9c292e99060200160405180910390a16001600160a01b03166000908152600160208190526040909120805460ff191690911790555050505050565b60006001600160e01b03198216637965db0b60e01b14806200052257506301ffc9a760e01b6001600160e01b031983161462000522565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620006775762000c6c816001600160a01b0316601462000f04565b62000c7983602062000f04565b60405160200162000c8c9291906200145f565b60408051601f198184030181529082905262461bcd60e51b82526200066291600401620014d8565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000677576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905562000d103390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff161562000677576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600480546040516368c610b760e11b81526001600160a01b03848116938201939093526000928392169063d18c216e90602401602060405180830381865afa15801562000e25573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e4b91906200150d565b15159392505050565b6005546040516370a0823160e01b81526001600160a01b03838116600483015260009283929116906370a0823190602401602060405180830381865afa15801562000ea3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ec991906200150d565b118062000522575060035460405163324f23cd60e21b81526001600160a01b0384811660048301529091169063c93c8f3490602401620009fa565b6060600062000f1583600262001527565b62000f2290600262001549565b67ffffffffffffffff81111562000f3d5762000f3d62001564565b6040519080825280601f01601f19166020018201604052801562000f68576020820181803683370190505b509050600360fc1b8160008151811062000f865762000f866200136e565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062000fb85762000fb86200136e565b60200101906001600160f81b031916908160001a905350600062000fde84600262001527565b62000feb90600162001549565b90505b60018111156200106d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106200102357620010236200136e565b1a60f81b8282815181106200103c576200103c6200136e565b60200101906001600160f81b031916908160001a90535060049490941c9362001065816200157a565b905062000fee565b508315620010be5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000662565b9392505050565b61251d806200159583390190565b611eb18062003ab283390190565b600060208284031215620010f457600080fd5b81356001600160e01b031981168114620010be57600080fd5b80356001600160a01b03811681146200112557600080fd5b919050565b6000602082840312156200113d57600080fd5b620010be826200110d565b600080600080608085870312156200115f57600080fd5b6200116a856200110d565b966020860135965060408601359560600135945092505050565b6000602082840312156200119757600080fd5b5035919050565b60008060408385031215620011b257600080fd5b82359150620011c4602084016200110d565b90509250929050565b60008060408385031215620011e157600080fd5b620011ec836200110d565b9150620011c4602084016200110d565b6000806000604084860312156200121257600080fd5b833567ffffffffffffffff808211156200122b57600080fd5b818601915086601f8301126200124057600080fd5b8135818111156200125057600080fd5b8760208260051b85010111156200126657600080fd5b6020928301989097509590910135949350505050565b6000806000806000608086880312156200129557600080fd5b853567ffffffffffffffff80821115620012ae57600080fd5b818801915088601f830112620012c357600080fd5b813581811115620012d357600080fd5b896020828501011115620012e657600080fd5b602092830197509550620012fe91880190506200110d565b94979396509394604081013594506060013592915050565b6040808252810183905260008460608301825b868110156200135b576001600160a01b0362001345846200110d565b1682526020928301929091019060010162001329565b5060209390930193909352509392505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156200139757600080fd5b81518015158114620010be57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415620013d557620013d5620013a8565b5060010190565b60808152846080820152848660a0830137600060a08683010152600060a0601f19601f88011683010190506001600160a01b03851660208301528360408301528260608301529695505050505050565b60005b83811015620014495781810151838201526020016200142f565b8381111562001459576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351620014998160178501602088016200142c565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351620014cc8160288401602088016200142c565b01602801949350505050565b6020815260008251806020840152620014f98160408501602087016200142c565b601f01601f19169190910160400192915050565b6000602082840312156200152057600080fd5b5051919050565b6000816000190483118215151615620015445762001544620013a8565b500290565b600082198211156200155f576200155f620013a8565b500190565b634e487b7160e01b600052604160045260246000fd5b6000816200158c576200158c620013a8565b50600019019056fe60c06040523480156200001157600080fd5b506040516200251d3803806200251d8339810160408190526200003491620005a3565b8160005b81518110156200014157600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5636008820401805460079092166004026101000a63ffffffff021990911690558151829082908110620000a657620000a66200067d565b60200260200101516002600083815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508060036000848481518110620000ff57620000ff6200067d565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080620001389062000693565b91505062000038565b5050815180620001985760405162461bcd60e51b815260206004820152601a60248201527f70726f6a65637473206d757374206e6f7420626520656d70747900000000000060448201526064015b60405180910390fd5b60008211620001ea5760405162461bcd60e51b815260206004820181905260248201527f736c6f74436f756e74206d7573742062652067726561746572207468616e203060448201526064016200018f565b80821115620002485760405162461bcd60e51b8152602060048201526024808201527f63616e6e6f742068617665206d6f726520736c6f7473207468616e2070726f6a6044820152636563747360e01b60648201526084016200018f565b60005b81811015620002fd576200029a63154777d960e11b8583815181106200027557620002756200067d565b60200260200101516001600160a01b03166200039b60201b62000a1f1790919060201c565b620002e85760405162461bcd60e51b815260206004820152601b60248201527f70726f6a656374206d75737420626520616e204950726f6a656374000000000060448201526064016200018f565b80620002f48162000693565b9150506200024b565b5062000328635eb1ec9760e01b336001600160a01b03166200039b60201b62000a1f1790919060201c565b620003765760405162461bcd60e51b815260206004820152601d60248201527f73656e646572206d75737420626520616e2049436f6e74726f6c6c657200000060448201526064016200018f565b3360a05282516200038f90600a906020860190620004ef565b50506080525062000726565b6000620003a883620003c5565b8015620003bc5750620003bc8383620003fd565b90505b92915050565b6000620003da826301ffc9a760e01b620003fd565b8015620003bf5750620003f6826001600160e01b0319620003fd565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b038716906175309062000466908690620006bd565b6000604051808303818686fa925050503d8060008114620004a4576040519150601f19603f3d011682016040523d82523d6000602084013e620004a9565b606091505b5091509150602081511015620004c65760009350505050620003bf565b818015620004e5575080806020019051810190620004e59190620006fb565b9695505050505050565b82805482825590600052602060002090810192821562000547579160200282015b828111156200054757825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000510565b506200055592915062000559565b5090565b5b808211156200055557600081556001016200055a565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200059e57600080fd5b919050565b60008060408385031215620005b757600080fd5b82516001600160401b0380821115620005cf57600080fd5b818501915085601f830112620005e457600080fd5b8151602082821115620005fb57620005fb62000570565b8160051b604051601f19603f8301168101818110868211171562000623576200062362000570565b6040529283528183019350848101820192898411156200064257600080fd5b948201945b838610156200066b576200065b8662000586565b8552948201949382019362000647565b97909101519698969750505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415620006b657634e487b7160e01b600052601160045260246000fd5b5060010190565b6000825160005b81811015620006e05760208186018101518583015201620006c4565b81811115620006f0576000828501525b509190910192915050565b6000602082840312156200070e57600080fd5b815180151581146200071f57600080fd5b9392505050565b60805160a051611dbc62000761600039600081816103d7015281816106d301526108d70152600081816103a701526109710152611dbc6000f3fe608060405234801561001057600080fd5b506004361061017d5760003560e01c80638b6aef15116100e3578063dddc40471161008c578063f3d0748011610066578063f3d07480146103c9578063f77c4791146103d2578063fe9bfe2c146103f957600080fd5b8063dddc404714610393578063e555df8d1461039a578063ed08fa80146103a257600080fd5b8063a3bc9336116100bd578063a3bc933614610362578063b75bf79614610377578063b85cf1771461038057600080fd5b80638b6aef15146102e95780638f3a4342146102f65780639f92786e1461033457600080fd5b8063548d77121161014557806368a57a021161011f57806368a57a021461029c5780636dd7d8ea146102b4578063713cdaa8146102c957600080fd5b8063548d77121461024c5780635df813301461025457806361eb38361461027c57600080fd5b806302a251a314610182578063107046bd146101aa5780631337abdd146101d557806317d65d171461020357806351700f4c1461022c575b600080fd5b600b54600c54610190919082565b604080519283526020830191909152015b60405180910390f35b6101bd6101b83660046119a9565b610419565b6040516001600160a01b0390911681526020016101a1565b6101f56101e33660046119d9565b60056020526000908152604090205481565b6040519081526020016101a1565b6101bd6102113660046119a9565b6002602052600090815260409020546001600160a01b031681565b6101f561023a3660046119d9565b60066020526000908152604090205481565b600e546101f5565b6102676102623660046119a9565b610443565b60405163ffffffff90911681526020016101a1565b61028f61028a3660046119d9565b61047d565b6040516101a19190611a0a565b6102a46105b2565b60405190151581526020016101a1565b6102c76102c23660046119d9565b6105d0565b005b6101f56102d73660046119d9565b60046020526000908152604090205481565b66b1a2bc2ec500006101f5565b604080518082018252600080825260209182015281518083018352600b54808252600c549183019182528351908152905191810191909152016101a1565b6102a4610342366004611a32565b600760209081526000928352604080842090915290825290205460ff1681565b61036a610794565b6040516101a19190611a65565b6101f5600e5481565b6102c761038e366004611ab2565b61082d565b60006101f5565b61036a6109bd565b6101f57f000000000000000000000000000000000000000000000000000000000000000081565b6101f5600d5481565b6101bd7f000000000000000000000000000000000000000000000000000000000000000081565b6101f56104073660046119d9565b60036020526000908152604090205481565b600a818154811061042957600080fd5b6000918252602090912001546001600160a01b0316905081565b6000818154811061045357600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b600b546000906104cc5760405162461bcd60e51b81526020600482015260156024820152741d9bdd1a5b99c81c195c9a5bd9081b9bdd081cd95d605a1b60448201526064015b60405180910390fd5b600c546105135760405162461bcd60e51b81526020600482015260156024820152741d9bdd1a5b99c81c195c9a5bd9081b9bdd081cd95d605a1b60448201526064016104c3565b600061051d610a44565b905060005b815181101561057a57836001600160a01b031682828151811061054757610547611ade565b60200260200101516001600160a01b03161415610568575060019392505050565b8061057281611b0a565b915050610522565b50600c5442111561058e5750600292915050565b50506001600160a01b03811660009081526008602052604090205460ff165b919050565b600042600b60000154101580156105cb575042600d5411155b905090565b600b546106175760405162461bcd60e51b81526020600482015260156024820152741d9bdd1a5b99c81c195c9a5bd9081b9bdd081cd95d605a1b60448201526064016104c3565b600c5461065e5760405162461bcd60e51b81526020600482015260156024820152741d9bdd1a5b99c81c195c9a5bd9081b9bdd081cd95d605a1b60448201526064016104c3565b600c5442118015906106725750600b544210155b6106be5760405162461bcd60e51b815260206004820152601860248201527f6f757473696465206f6620766f74696e6720706572696f64000000000000000060448201526064016104c3565b6040516356fd539760e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063adfaa72e90602401602060405180830381865afa158015610722573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107469190611b25565b6107885760405162461bcd60e51b81526020600482015260136024820152726e6f7420616c6c6f77656420746f20766f746560681b60448201526064016104c3565b61079181610e43565b50565b600b546060906107de5760405162461bcd60e51b81526020600482015260156024820152741d9bdd1a5b99c81c195c9a5bd9081b9bdd081cd95d605a1b60448201526064016104c3565b600c546108255760405162461bcd60e51b81526020600482015260156024820152741d9bdd1a5b99c81c195c9a5bd9081b9bdd081cd95d605a1b60448201526064016104c3565b6105cb610a44565b4283101561087d5760405162461bcd60e51b815260206004820152601b60248201527f7374617274206d75737420626520696e2074686520667574757265000000000060448201526064016104c3565b8183106108cc5760405162461bcd60e51b815260206004820152601860248201527f7374617274206d757374206265206265666f726520656e64000000000000000060448201526064016104c3565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109525760405162461bcd60e51b815260206004820152602560248201527f6f6e6c7920636f6e74726f6c6c65722063616e2073657420766f74696e672070604482015264195c9a5bd960da1b60648201526084016104c3565b60408051808201909152838152602001829052600b839055600c8290557f000000000000000000000000000000000000000000000000000000000000000061099a8484611b4e565b6109a49190611b7b565b600e55600c546109b5908290611b8f565b600d55505050565b6060600a805480602002602001604051908101604052809291908181526020018280548015610a1557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109f7575b5050505050905090565b6000610a2a836110c5565b8015610a3b5750610a3b83836110f8565b90505b92915050565b6060610a7460408051808201825260008082526020918201528151808301909252600b548252600c549082015290565b51421015610ada576001805480602002602001604051908101604052809291908181526020018280548015610a15576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109f7575050505050905090565b6001546000610ae76111e1565b90506000610af76009548361126d565b60005490915083821415610b69576001805480602002602001604051908101604052809291908181526020018280548015610b5b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b3d575b505050505094505050505090565b60008167ffffffffffffffff811115610b8457610b84611ba7565b604051908082528060200260200182016040528015610bc957816020015b6040805180820190915260008082526020820152815260200190600190039081610ba25790505b50905060008367ffffffffffffffff811115610be757610be7611ba7565b604051908082528060200260200182016040528015610c10578160200160208202803683370190505b50905060005b83811015610c8657604080518082018252828152600083815260026020908152838220546001600160a01b031682526006815292902054918101919091528351849083908110610c6857610c68611ade565b60200260200101819052508080610c7e90611b0a565b915050610c16565b5060005b86811015610d205760006003600060018481548110610cab57610cab611ade565b60009182526020808320909101546001600160a01b031683528201929092526040019020548451909150849082908110610ce757610ce7611ade565b60200260200101610d0b604051806040016040528060008152602001600081525090565b90525080610d1881611b0a565b915050610c8a565b50610d2a82611283565b915060005b86811015610da45760018181548110610d4a57610d4a611ade565b9060005260206000200160009054906101000a90046001600160a01b0316828281518110610d7a57610d7a611ade565b6001600160a01b039092166020928302919091019091015280610d9c81611b0a565b915050610d2f565b50855b84811015610e38576002600084610dbe8a85611b4e565b81518110610dce57610dce611ade565b602002602001015160000151815260200190815260200160002060009054906101000a90046001600160a01b0316828281518110610e0e57610e0e611ade565b6001600160a01b039092166020928302919091019091015280610e3081611b0a565b915050610da7565b509695505050505050565b6001600160a01b038116600090815260076020908152604080832033845290915290205460ff1615610eb75760405162461bcd60e51b815260206004820152601d60248201527f616c726561647920766f74656420696e20746869732070726f6a65637400000060448201526064016104c3565b610ebf6112a2565b6001600160a01b03811660009081526008602052604081205460ff166002811115610eec57610eec6119f4565b14610f395760405162461bcd60e51b815260206004820152601a60248201527f70726f6a656374206973206e6f7420696e2070726f677265737300000000000060448201526064016104c3565b6001600160a01b03811660009081526007602090815260408083203384528252808320805460ff1916600117905560049091528120805491610f7a83611b0a565b90915550506001600160a01b0381166000908152600560205260408120805491610fa383611b0a565b9190505550610fb1426114ae565b6001600160a01b03821660009081526006602052604081208054909190610fd9908490611b8f565b90915550506001600160a01b0381166000908152600360205260408120548154811061100757611007611ade565b6000918252602090912060088204015460079091166004026101000a900463ffffffff16611045576009805490600061103f83611b0a565b91905055505b6001600160a01b0381166000908152600360205260408120548154811061106e5761106e611ade565b906000526020600020906008918282040191900660040281819054906101000a900463ffffffff16809291906110a390611bbd565b91906101000a81548163ffffffff021916908363ffffffff1602179055505050565b60006110d8826301ffc9a760e01b6110f8565b8015610a3e57506110f1826001600160e01b03196110f8565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b038716906175309061115f908690611be1565b6000604051808303818686fa925050503d806000811461119b576040519150601f19603f3d011682016040523d82523d6000602084013e6111a0565b606091505b50915091506020815110156111bb5760009350505050610a3e565b8180156111d75750808060200190518101906111d79190611b25565b9695505050505050565b60008061121f61121560408051808201825260008082526020918201528151808301909252600b548252600c549082015290565b602001514261126d565b905061122a600e5490565b60408051808201825260008082526020918201528151808301909252600b548252600c54908201525161125d9083611b4e565b6112679190611b7b565b91505090565b600081831061127c5781610a3b565b5090919050565b606061129e826000600185516112999190611b4e565b61158f565b5090565b60006112ac61171d565b90508051600014156112bb5750565b60005b81518110156113905760018282815181106112db576112db611ade565b602090810291909101810151825460018082018555600094855292842001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169190911790558351909160089185908590811061133c5761133c611ade565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19166001836002811115611379576113796119f4565b02179055508061138881611b0a565b9150506112be565b5060408051808201825260008082526020918201528151808301909252600b548252600c54910181905242106107915760006113ca6109bd565b51905060005b818110156114a9576000600860006113e66109bd565b84815181106113f7576113f7611ade565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16600281111561142f5761142f6119f4565b1415611497576002600860006114436109bd565b848151811061145457611454611ade565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19166001836002811115611491576114916119f4565b02179055505b806114a181611b0a565b9150506113d0565b505050565b6000806114c266b1a2bc2ec5000082611c1c565b905060006114f460408051808201825260008082526020918201528151808301909252600b548252600c549082015290565b5160408051808201825260008082526020918201528151808301909252600b548252600c5491018190526115289190611b4e565b905060006115368284611c5b565b9050600066b1a2bc2ec5000061157060408051808201825260008082526020918201528151808301909252600b548252600c549082015290565b5161157b9088611b4e565b6115859084611c89565b6111d79190611d0e565b8181808214156115a0575050505050565b60008560026115af8787611c1c565b6115b99190611c5b565b6115c39087611d0e565b815181106115d3576115d3611ade565b60200260200101516020015190505b8183136116ef575b808684815181106115fd576115fd611ade565b6020026020010151602001511115611621578261161981611d4f565b9350506115ea565b85828151811061163357611633611ade565b602002602001015160200151811115611658578161165081611d68565b925050611621565b8183136116ea5785828151811061167157611671611ade565b602002602001015186848151811061168b5761168b611ade565b60200260200101518785815181106116a5576116a5611ade565b602002602001018885815181106116be576116be611ade565b60200260200101829052829052505082806116d890611d4f565b93505081806116e690611d68565b9250505b6115e2565b818512156117025761170286868461158f565b838312156117155761171586848661158f565b505050505050565b600154606090600061172d6111e1565b9050600061173d6009548361126d565b6000805491925061174e8584611b4e565b905060008167ffffffffffffffff81111561176b5761176b611ba7565b604051908082528060200260200182016040528015611794578160200160208202803683370190505b5090506117c560408051808201825260008082526020918201528151808301909252600b548252600c549082015290565b514210156117d7579695505050505050565b816117e6579695505050505050565b60008367ffffffffffffffff81111561180157611801611ba7565b60405190808252806020026020018201604052801561184657816020015b604080518082019091526000808252602082015281526020019060019003908161181f5790505b50905060005b84811015611905576000818152600260209081526040808320546001600160a01b03168352600890915290205460ff166001816002811115611890576118906119f4565b141561189c57506118f3565b604080518082018252838152600084815260026020908152838220546001600160a01b0316825260068152929020549181019190915283518490849081106118e6576118e6611ade565b6020026020010181905250505b806118fd81611b0a565b91505061184c565b5061190f81611283565b905060005b8381101561199c576002600083838151811061193257611932611ade565b602002602001015160000151815260200190815260200160002060009054906101000a90046001600160a01b031683828151811061197257611972611ade565b6001600160a01b03909216602092830291909101909101528061199481611b0a565b915050611914565b5090979650505050505050565b6000602082840312156119bb57600080fd5b5035919050565b80356001600160a01b03811681146105ad57600080fd5b6000602082840312156119eb57600080fd5b610a3b826119c2565b634e487b7160e01b600052602160045260246000fd5b6020810160038310611a2c57634e487b7160e01b600052602160045260246000fd5b91905290565b60008060408385031215611a4557600080fd5b611a4e836119c2565b9150611a5c602084016119c2565b90509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611aa65783516001600160a01b031683529284019291840191600101611a81565b50909695505050505050565b600080600060608486031215611ac757600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611b1e57611b1e611af4565b5060010190565b600060208284031215611b3757600080fd5b81518015158114611b4757600080fd5b9392505050565b600082821015611b6057611b60611af4565b500390565b634e487b7160e01b600052601260045260246000fd5b600082611b8a57611b8a611b65565b500490565b60008219821115611ba257611ba2611af4565b500190565b634e487b7160e01b600052604160045260246000fd5b600063ffffffff80831681811415611bd757611bd7611af4565b6001019392505050565b6000825160005b81811015611c025760208186018101518583015201611be8565b81811115611c11576000828501525b509190910192915050565b60008083128015600160ff1b850184121615611c3a57611c3a611af4565b6001600160ff1b0384018313811615611c5557611c55611af4565b50500390565b600082611c6a57611c6a611b65565b600160ff1b821460001984141615611c8457611c84611af4565b500590565b60006001600160ff1b0381841382841380821686840486111615611caf57611caf611af4565b600160ff1b6000871282811687830589121615611cce57611cce611af4565b60008712925087820587128484161615611cea57611cea611af4565b87850587128184161615611d0057611d00611af4565b505050929093029392505050565b600080821280156001600160ff1b0384900385131615611d3057611d30611af4565b600160ff1b8390038412811615611d4957611d49611af4565b50500190565b60006001600160ff1b03821415611b1e57611b1e611af4565b6000600160ff1b821415611d7e57611d7e611af4565b50600019019056fea26469706673582212202a1e8f6f21999b15b83052a3f43e32fe4d51267f33e6112fca96f8cfa554c93364736f6c634300080c00336101006040523480156200001257600080fd5b5060405162001eb138038062001eb1833981016040819052620000359162000234565b3360805283516200004e9060029060208701906200013f565b506001600160a01b03831660a05260c082905260e081905260006200007560028462000335565b905060008160c05162000089919062000358565b9050816040516200009a90620001ce565b908152602001604051809103906000f080158015620000bd573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b03929092169190911790556040518190620000ee90620001dc565b908152602001604051809103906000f08015801562000111573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b039290921691909117905550620003bb945050505050565b8280546200014d906200037e565b90600052602060002090601f016020900481019282620001715760008555620001bc565b82601f106200018c57805160ff1916838001178555620001bc565b82800160010185558215620001bc579182015b82811115620001bc5782518255916020019190600101906200019f565b50620001ca929150620001ea565b5090565b61093d8062000c3783390190565b61093d806200157483390190565b5b80821115620001ca5760008155600101620001eb565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200022f57600080fd5b919050565b600080600080608085870312156200024b57600080fd5b84516001600160401b03808211156200026357600080fd5b818701915087601f8301126200027857600080fd5b8151818111156200028d576200028d62000201565b604051601f8201601f19908116603f01168101908382118183101715620002b857620002b862000201565b81604052828152602093508a84848701011115620002d557600080fd5b600091505b82821015620002f95784820184015181830185015290830190620002da565b828211156200030b5760008484830101525b97506200031d91505087820162000217565b60408801516060909801519699909850945050505050565b6000826200035357634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156200037957634e487b7160e01b600052601160045260246000fd5b500390565b600181811c908216806200039357607f821691505b60208210811415620003b557634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516108266200041160003960006101390152600081816101c0015261033901526000818161025101526102cc01526000818161022a01528181610406015261054501526108266000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063a96af0f411610097578063e10828ac11610066578063e10828ac14610205578063e1e726db14610212578063f77c479114610225578063fc0c546a1461024c57600080fd5b8063a96af0f4146101bb578063c1b075db146101e2578063d2170515146101ea578063d87aa643146101f257600080fd5b8063338ba300116100d3578063338ba30014610169578063582f0e16146101945780637284e4161461019c57806398cbc31f146101b157600080fd5b806301ffc9a7146100fa57806312d35941146101225780632c4e722e14610134575b600080fd5b61010d6101083660046106d2565b610273565b60405190151581526020015b60405180910390f35b60035461010d90610100900460ff1681565b61015b7f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610119565b60005461017c906001600160a01b031681565b6040516001600160a01b039091168152602001610119565b61010d6102aa565b6101a4610360565b6040516101199190610703565b6101b96103ee565b005b61015b7f000000000000000000000000000000000000000000000000000000000000000081565b6101b961052d565b61010d610664565b6101b9610200366004610758565b610694565b60035461010d9060ff1681565b60015461017c906001600160a01b031681565b61017c7f000000000000000000000000000000000000000000000000000000000000000081565b61017c7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b0319821663154777d960e11b14806102a457506301ffc9a760e01b6001600160e01b03198316145b92915050565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610313573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610337919061077a565b7f0000000000000000000000000000000000000000000000000000000000000000111592915050565b6002805461036d90610793565b80601f016020809104026020016040519081016040528092919081815260200182805461039990610793565b80156103e65780601f106103bb576101008083540402835291602001916103e6565b820191906000526020600020905b8154815290600101906020018083116103c957829003601f168201915b505050505081565b6040516345b72bd960e11b81523360048201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638b6e57b290602401602060405180830381865afa158015610455573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047991906107ce565b6104ca5760405162461bcd60e51b815260206004820152601560248201527f6e6f7420612070726f6a656374206d616e61676572000000000000000000000060448201526064015b60405180910390fd5b60035460ff161561051d5760405162461bcd60e51b815260206004820152601b60248201527f616c726561647920617070726f766564206279206d616e61676572000000000060448201526064016104c1565b506003805460ff19166001179055565b604051636bfe90bb60e11b81523360048201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d7fd217690602401602060405180830381865afa158015610594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b891906107ce565b6105fa5760405162461bcd60e51b81526020600482015260136024820152723737ba1030903632b3b0b61036b0b730b3b2b960691b60448201526064016104c1565b600354610100900460ff16156106525760405162461bcd60e51b815260206004820152601960248201527f616c726561647920617070726f766564206279206c6567616c0000000000000060448201526064016104c1565b506003805461ff001916610100179055565b600061066e6102aa565b801561067c575060035460ff165b801561068f5750600354610100900460ff165b905090565b60405162461bcd60e51b81526020600482015260136024820152721b9bdd081e595d081a5b5c1b195b595b9d1959606a1b60448201526064016104c1565b6000602082840312156106e457600080fd5b81356001600160e01b0319811681146106fc57600080fd5b9392505050565b600060208083528351808285015260005b8181101561073057858101830151858201604001528201610714565b81811115610742576000604083870101525b50601f01601f1916929092016040019392505050565b6000806040838503121561076b57600080fd5b50508035926020909101359150565b60006020828403121561078c57600080fd5b5051919050565b600181811c908216806107a757607f821691505b602082108114156107c857634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156107e057600080fd5b815180151581146106fc57600080fdfea2646970667358221220a3a933861db1df748fd84b384f6ee84dd9415563674e2cb11ba5e4a8dd87052a64736f6c634300080c003360a060405234801561001057600080fd5b5060405161093d38038061093d83398101604081905261002f91610049565b600680546001600160a01b03191633179055608052610062565b60006020828403121561005b57600080fd5b5051919050565b6080516108b261008b600039600081816101c8015281816101f1015261061f01526108b26000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063b9b8c246116100ad578063d0a24e4711610071578063d0a24e4714610213578063d7e64c0014610269578063e8448f0214610271578063ed7196bc146102a7578063fa89401a146102af57600080fd5b8063b9b8c24614610226578063c0cd9ce21461023b578063c487888314610243578063cbf2cc2b1461024c578063cd2b30261461025657600080fd5b8063711a9f35116100f4578063711a9f35146101ae5780637b8db586146101c6578063a96af0f4146101ec578063acde5d2814610213578063b81b86301461021357600080fd5b80630276650b1461013157806318dfcf7b1461014d5780631a15c6d7146101565780631c120bc11461017057806369d917c914610178575b600080fd5b61013a60055481565b6040519081526020015b60405180910390f35b61013a60075481565b6000546101639060ff1681565b6040516101449190610791565b600a5461013a565b61013a6101863660046107b9565b6000908152600960209081526040808320546001600160a01b03168352600890915290205490565b6101b66102c2565b6040519015158152602001610144565b7f000000000000000000000000000000000000000000000000000000000000000061013a565b61013a7f000000000000000000000000000000000000000000000000000000000000000081565b61013a6102213660046107ee565b6102e4565b610239610234366004610809565b61032a565b005b610239610424565b61013a600a5481565b61013a620186a081565b6102396102643660046107b9565b610591565b60075461013a565b6001546002546003546004546102879392919084565b604080519485526020850193909352918301526060820152608001610144565b6101b661059d565b6102396102bd3660046107ee565b6105a6565b600060025b60005460ff1660038111156102de576102de61077b565b14905090565b60405162461bcd60e51b81526020600482015260136024820152721b9bdd081e595d081a5b5c1b195b595b9d1959606a1b60448201526000906064015b60405180910390fd5b6006546001600160a01b031633146103725760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081c1c9bda9958dd60aa1b6044820152606401610321565b6001600160a01b0382166000908152600860205260409020546103da57600780546000908152600960205260408120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616179055815491906103d483610849565b91905055505b6001600160a01b03821660009081526008602052604081208054839290610402908490610864565b9250508190555080600a600082825461041b9190610864565b90915550505050565b600160005460ff16600381111561043d5761043d61077b565b1461044757600080fd5b6040805160808101825260015481526002546020820152600354918101919091526004546060820152600061047b60075490565b6005549091505b8251821180156104945750620186a05a115b156105305782516000908152600960209081526040808320546001600160a01b0316835260089091529020546104ca81836105e4565b846020018181516104db9190610864565b9052506104f36104ec836001610864565b82906105e4565b846040018181516105049190610864565b905250606084015161051690826105fe565b6060850152508251839061052990610849565b9052610482565b8251600181905560208401516002556040840151600355606084015160045582141561058c576000610562828561060d565b9050801561057c576000805460ff1916600217905561058a565b6000805460ff191660031790555b505b505050565b61059a816106a9565b50565b600060016102c7565b60405162461bcd60e51b81526020600482015260136024820152721b9bdd081e595d081a5b5c1b195b595b9d1959606a1b6044820152606401610321565b60008183106105f357816105f5565b825b90505b92915050565b60008282106105f357816105f5565b600080610619600a5490565b905060007f00000000000000000000000000000000000000000000000000000000000000009050818460600151111561065157600080fd5b818460200151111561066257600080fd5b818460400151111561067357600080fd5b80821161068957505050606081015182146105f8565b8084604001511180156106a0575080846020015111155b925050506105f8565b6000805460ff1660038111156106c1576106c161077b565b14806106e35750600360005460ff1660038111156106e1576106e161077b565b145b61072f5760405162461bcd60e51b815260206004820152601a60248201527f616c726561647920736574206f7220696e2070726f67726573730000000000006044820152606401610321565b60058190556000805460ff19166001908117825560408051608081018252838152602081018490529081018390526060018290528190556002819055600381905560045561059a610424565b634e487b7160e01b600052602160045260246000fd5b60208101600483106107b357634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156107cb57600080fd5b5035919050565b80356001600160a01b03811681146107e957600080fd5b919050565b60006020828403121561080057600080fd5b6105f5826107d2565b6000806040838503121561081c57600080fd5b610825836107d2565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561085d5761085d610833565b5060010190565b6000821982111561087757610877610833565b50019056fea264697066735822122093a04c32e21278ae09d18ad433105f694b876008e7a5fdf746d48667c82ba69164736f6c634300080c003360a060405234801561001057600080fd5b5060405161093d38038061093d83398101604081905261002f91610049565b600680546001600160a01b03191633179055608052610062565b60006020828403121561005b57600080fd5b5051919050565b6080516108b261008b600039600081816101c8015281816101f1015261061f01526108b26000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063b9b8c246116100ad578063d0a24e4711610071578063d0a24e4714610213578063d7e64c0014610269578063e8448f0214610271578063ed7196bc146102a7578063fa89401a146102af57600080fd5b8063b9b8c24614610226578063c0cd9ce21461023b578063c487888314610243578063cbf2cc2b1461024c578063cd2b30261461025657600080fd5b8063711a9f35116100f4578063711a9f35146101ae5780637b8db586146101c6578063a96af0f4146101ec578063acde5d2814610213578063b81b86301461021357600080fd5b80630276650b1461013157806318dfcf7b1461014d5780631a15c6d7146101565780631c120bc11461017057806369d917c914610178575b600080fd5b61013a60055481565b6040519081526020015b60405180910390f35b61013a60075481565b6000546101639060ff1681565b6040516101449190610791565b600a5461013a565b61013a6101863660046107b9565b6000908152600960209081526040808320546001600160a01b03168352600890915290205490565b6101b66102c2565b6040519015158152602001610144565b7f000000000000000000000000000000000000000000000000000000000000000061013a565b61013a7f000000000000000000000000000000000000000000000000000000000000000081565b61013a6102213660046107ee565b6102e4565b610239610234366004610809565b61032a565b005b610239610424565b61013a600a5481565b61013a620186a081565b6102396102643660046107b9565b610591565b60075461013a565b6001546002546003546004546102879392919084565b604080519485526020850193909352918301526060820152608001610144565b6101b661059d565b6102396102bd3660046107ee565b6105a6565b600060025b60005460ff1660038111156102de576102de61077b565b14905090565b60405162461bcd60e51b81526020600482015260136024820152721b9bdd081e595d081a5b5c1b195b595b9d1959606a1b60448201526000906064015b60405180910390fd5b6006546001600160a01b031633146103725760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081c1c9bda9958dd60aa1b6044820152606401610321565b6001600160a01b0382166000908152600860205260409020546103da57600780546000908152600960205260408120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616179055815491906103d483610849565b91905055505b6001600160a01b03821660009081526008602052604081208054839290610402908490610864565b9250508190555080600a600082825461041b9190610864565b90915550505050565b600160005460ff16600381111561043d5761043d61077b565b1461044757600080fd5b6040805160808101825260015481526002546020820152600354918101919091526004546060820152600061047b60075490565b6005549091505b8251821180156104945750620186a05a115b156105305782516000908152600960209081526040808320546001600160a01b0316835260089091529020546104ca81836105e4565b846020018181516104db9190610864565b9052506104f36104ec836001610864565b82906105e4565b846040018181516105049190610864565b905250606084015161051690826105fe565b6060850152508251839061052990610849565b9052610482565b8251600181905560208401516002556040840151600355606084015160045582141561058c576000610562828561060d565b9050801561057c576000805460ff1916600217905561058a565b6000805460ff191660031790555b505b505050565b61059a816106a9565b50565b600060016102c7565b60405162461bcd60e51b81526020600482015260136024820152721b9bdd081e595d081a5b5c1b195b595b9d1959606a1b6044820152606401610321565b60008183106105f357816105f5565b825b90505b92915050565b60008282106105f357816105f5565b600080610619600a5490565b905060007f00000000000000000000000000000000000000000000000000000000000000009050818460600151111561065157600080fd5b818460200151111561066257600080fd5b818460400151111561067357600080fd5b80821161068957505050606081015182146105f8565b8084604001511180156106a0575080846020015111155b925050506105f8565b6000805460ff1660038111156106c1576106c161077b565b14806106e35750600360005460ff1660038111156106e1576106e161077b565b145b61072f5760405162461bcd60e51b815260206004820152601a60248201527f616c726561647920736574206f7220696e2070726f67726573730000000000006044820152606401610321565b60058190556000805460ff19166001908117825560408051608081018252838152602081018490529081018390526060018290528190556002819055600381905560045561059a610424565b634e487b7160e01b600052602160045260246000fd5b60208101600483106107b357634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156107cb57600080fd5b5035919050565b80356001600160a01b03811681146107e957600080fd5b919050565b60006020828403121561080057600080fd5b6105f5826107d2565b6000806040838503121561081c57600080fd5b610825836107d2565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561085d5761085d610833565b5060010190565b6000821982111561087757610877610833565b50019056fea2646970667358221220fc9f9c4b9336dc11f8a4af4e7b97161dfffc6e2b18d3d8513a076276e5c7cf8d64736f6c634300080c0033a264697066735822122088fc307626272db5357dda8efc310877360434b50cd6586c7e127b1d03d8995764736f6c634300080c0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001d15760003560e01c80637b1039991162000101578063a217fddf11620000a3578063d547741f116200007a578063d547741f14620004b8578063d7fd21761462000402578063e9719c8714620004cf578063fc0c546a14620004e657600080fd5b8063a217fddf1462000481578063adfaa72e146200048a578063c73bcb9414620004a157600080fd5b80638b6e57b211620000d85780638b6e57b214620004195780638de07d9f146200043057806391d14854146200044757600080fd5b80637b10399914620003c8578063840e78fd14620003dc5780638705130b146200040257600080fd5b806329c76a73116200017757806342958a81116200014e57806342958a811462000342578063490e221614620003755780634cf088d9146200039d578063512d3fff14620003b157600080fd5b806329c76a7314620002ec5780632f2ff15d146200031457806336568abe146200032b57600080fd5b806316b27e0411620001ac57806316b27e0414620002815780632101b71a146200029a578063248a9ca314620002c657600080fd5b806301ffc9a714620001d65780630978dc8b14620002025780630f50d813146200024a575b600080fd5b620001ed620001e7366004620010e1565b620004fa565b60405190151581526020015b60405180910390f35b62000231620002133660046200112a565b6001600160a01b039081166000908152600260205260409020541690565b6040516001600160a01b039091168152602001620001f9565b620002727f28eb28c26cbbd48a6bfad016505ccf4a189452995f59d16217af8920961ed25c81565b604051908152602001620001f9565b620002986200029236600462001148565b62000528565b005b62000231620002ab3660046200112a565b6002602052600090815260409020546001600160a01b031681565b62000272620002d736600462001184565b60009081526020819052604090206001015490565b620002727fa88d484f5aeb539ab60f9bd084e23511bc356a4f715a255e909643bb69ddcb4181565b62000298620003253660046200119e565b620005c6565b620002986200033c3660046200119e565b620005f5565b620001ed62000353366004620011cd565b6001600160a01b03918216600090815260026020526040902054821691161490565b620002727ffbe1c1e064e33268dfb07e8ec24bb5d882bde92a088196f7cbea3ea66117a7a781565b60035462000231906001600160a01b031681565b62000298620003c2366004620011fc565b6200067b565b60045462000231906001600160a01b031681565b620001ed620003ed3660046200112a565b60016020526000908152604090205460ff1681565b620001ed620004133660046200112a565b62000922565b620001ed6200042a3660046200112a565b62000963565b620001ed620004413660046200112a565b620009a4565b620001ed620004583660046200119e565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b62000272600081565b620001ed6200049b3660046200112a565b62000a3e565b620001ed620004b2366004620011cd565b62000a5e565b62000298620004c93660046200119e565b62000b1e565b62000298620004e03660046200127c565b62000b48565b60055462000231906001600160a01b031681565b60006001600160e01b03198216635eb1ec9760e01b1480620005225750620005228262000bf6565b92915050565b7f28eb28c26cbbd48a6bfad016505ccf4a189452995f59d16217af8920961ed25c62000555813362000c2d565b60405163b85cf17760e01b81526004810185905260248101849052604481018390526001600160a01b0386169063b85cf17790606401600060405180830381600087803b158015620005a657600080fd5b505af1158015620005bb573d6000803e3d6000fd5b505050505050505050565b600082815260208190526040902060010154620005e4813362000c2d565b620005f0838362000cb4565b505050565b6001600160a01b03811633146200066b5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b62000677828262000d54565b5050565b7f28eb28c26cbbd48a6bfad016505ccf4a189452995f59d16217af8920961ed25c620006a8813362000c2d565b6000848484604051620006bb90620010c5565b620006c99392919062001316565b604051809103906000f080158015620006e6573d6000803e3d6000fd5b5090508360005b81811015620008dd5760008787838181106200070d576200070d6200136e565b90506020020160208101906200072491906200112a565b6001600160a01b03811660009081526001602052604090205490915060ff16620007875760405162461bcd60e51b81526020600482015260136024820152721b9bdd0818481adb9bdddb881c1c9bda9958dd606a1b604482015260640162000662565b806001600160a01b031663d21705156040518163ffffffff1660e01b8152600401602060405180830381865afa158015620007c6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007ec919062001384565b6200082e5760405162461bcd60e51b815260206004820152601160248201527070726f6a656374206e6f7420726561647960781b604482015260640162000662565b6001600160a01b0381811660009081526002602052604090205416156200088d5760405162461bcd60e51b81526020600482015260126024820152710c2d8e4cac2c8f240d2dc40c240c4c2e8c6d60731b604482015260640162000662565b6001600160a01b039081166000908152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff191691851691909117905580620008d481620013be565b915050620006ed565b506040516001600160a01b03831681527fcc2b0054ce052d2e9c62f1c7e4b5e160ca2d5debd20c7f43ddd1d1c210252f689060200160405180910390a1505050505050565b6001600160a01b03811660009081527f0eca2fdc6ecf34558d66be619b512eb8aeceae095ef0d035077dd168378bea5f602052604081205460ff1662000522565b6001600160a01b03811660009081527f0beaf284d6500f9045213f3d900c4b07f5b63bfcb6036ce1569f5385ec1728fc602052604081205460ff1662000522565b6000620009b18262000dd4565b8015620009c45750620009c48262000e54565b801562000522575060035460405163324f23cd60e21b81526001600160a01b0384811660048301529091169063c93c8f34906024015b602060405180830381865afa15801562000a18573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000522919062001384565b600062000a4b8262000dd4565b8015620005225750620005228262000e54565b6001600160a01b0380831660009081526002602052604081205490911662000a868362000dd4565b801562000a99575062000a998362000e54565b801562000b165750604051634fc93c3760e11b81526001600160a01b0385811660048301528481166024830152821690639f92786e90604401602060405180830381865afa15801562000af0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b16919062001384565b949350505050565b60008281526020819052604090206001015462000b3c813362000c2d565b620005f0838362000d54565b6000858585858560405162000b5d90620010d3565b62000b6d959493929190620013dc565b604051809103906000f08015801562000b8a573d6000803e3d6000fd5b506040516001600160a01b03821681529091507fe6c3ff59790315a93d7da11ca1914b7c858abab4205874f40cfecaf8b9c292e99060200160405180910390a16001600160a01b03166000908152600160208190526040909120805460ff191690911790555050505050565b60006001600160e01b03198216637965db0b60e01b14806200052257506301ffc9a760e01b6001600160e01b031983161462000522565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620006775762000c6c816001600160a01b0316601462000f04565b62000c7983602062000f04565b60405160200162000c8c9291906200145f565b60408051601f198184030181529082905262461bcd60e51b82526200066291600401620014d8565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1662000677576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905562000d103390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff161562000677576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600480546040516368c610b760e11b81526001600160a01b03848116938201939093526000928392169063d18c216e90602401602060405180830381865afa15801562000e25573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e4b91906200150d565b15159392505050565b6005546040516370a0823160e01b81526001600160a01b03838116600483015260009283929116906370a0823190602401602060405180830381865afa15801562000ea3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ec991906200150d565b118062000522575060035460405163324f23cd60e21b81526001600160a01b0384811660048301529091169063c93c8f3490602401620009fa565b6060600062000f1583600262001527565b62000f2290600262001549565b67ffffffffffffffff81111562000f3d5762000f3d62001564565b6040519080825280601f01601f19166020018201604052801562000f68576020820181803683370190505b509050600360fc1b8160008151811062000f865762000f866200136e565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811062000fb85762000fb86200136e565b60200101906001600160f81b031916908160001a905350600062000fde84600262001527565b62000feb90600162001549565b90505b60018111156200106d576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106200102357620010236200136e565b1a60f81b8282815181106200103c576200103c6200136e565b60200101906001600160f81b031916908160001a90535060049490941c9362001065816200157a565b905062000fee565b508315620010be5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640162000662565b9392505050565b61251d806200159583390190565b611eb18062003ab283390190565b600060208284031215620010f457600080fd5b81356001600160e01b031981168114620010be57600080fd5b80356001600160a01b03811681146200112557600080fd5b919050565b6000602082840312156200113d57600080fd5b620010be826200110d565b600080600080608085870312156200115f57600080fd5b6200116a856200110d565b966020860135965060408601359560600135945092505050565b6000602082840312156200119757600080fd5b5035919050565b60008060408385031215620011b257600080fd5b82359150620011c4602084016200110d565b90509250929050565b60008060408385031215620011e157600080fd5b620011ec836200110d565b9150620011c4602084016200110d565b6000806000604084860312156200121257600080fd5b833567ffffffffffffffff808211156200122b57600080fd5b818601915086601f8301126200124057600080fd5b8135818111156200125057600080fd5b8760208260051b85010111156200126657600080fd5b6020928301989097509590910135949350505050565b6000806000806000608086880312156200129557600080fd5b853567ffffffffffffffff80821115620012ae57600080fd5b818801915088601f830112620012c357600080fd5b813581811115620012d357600080fd5b896020828501011115620012e657600080fd5b602092830197509550620012fe91880190506200110d565b94979396509394604081013594506060013592915050565b6040808252810183905260008460608301825b868110156200135b576001600160a01b0362001345846200110d565b1682526020928301929091019060010162001329565b5060209390930193909352509392505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156200139757600080fd5b81518015158114620010be57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415620013d557620013d5620013a8565b5060010190565b60808152846080820152848660a0830137600060a08683010152600060a0601f19601f88011683010190506001600160a01b03851660208301528360408301528260608301529695505050505050565b60005b83811015620014495781810151838201526020016200142f565b8381111562001459576000848401525b50505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351620014998160178501602088016200142c565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351620014cc8160288401602088016200142c565b01602801949350505050565b6020815260008251806020840152620014f98160408501602087016200142c565b601f01601f19169190910160400192915050565b6000602082840312156200152057600080fd5b5051919050565b6000816000190483118215151615620015445762001544620013a8565b500290565b600082198211156200155f576200155f620013a8565b500190565b634e487b7160e01b600052604160045260246000fd5b6000816200158c576200158c620013a8565b50600019019056fe60c06040523480156200001157600080fd5b506040516200251d3803806200251d8339810160408190526200003491620005a3565b8160005b81518110156200014157600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5636008820401805460079092166004026101000a63ffffffff021990911690558151829082908110620000a657620000a66200067d565b60200260200101516002600083815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055508060036000848481518110620000ff57620000ff6200067d565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020819055508080620001389062000693565b91505062000038565b5050815180620001985760405162461bcd60e51b815260206004820152601a60248201527f70726f6a65637473206d757374206e6f7420626520656d70747900000000000060448201526064015b60405180910390fd5b60008211620001ea5760405162461bcd60e51b815260206004820181905260248201527f736c6f74436f756e74206d7573742062652067726561746572207468616e203060448201526064016200018f565b80821115620002485760405162461bcd60e51b8152602060048201526024808201527f63616e6e6f742068617665206d6f726520736c6f7473207468616e2070726f6a6044820152636563747360e01b60648201526084016200018f565b60005b81811015620002fd576200029a63154777d960e11b8583815181106200027557620002756200067d565b60200260200101516001600160a01b03166200039b60201b62000a1f1790919060201c565b620002e85760405162461bcd60e51b815260206004820152601b60248201527f70726f6a656374206d75737420626520616e204950726f6a656374000000000060448201526064016200018f565b80620002f48162000693565b9150506200024b565b5062000328635eb1ec9760e01b336001600160a01b03166200039b60201b62000a1f1790919060201c565b620003765760405162461bcd60e51b815260206004820152601d60248201527f73656e646572206d75737420626520616e2049436f6e74726f6c6c657200000060448201526064016200018f565b3360a05282516200038f90600a906020860190620004ef565b50506080525062000726565b6000620003a883620003c5565b8015620003bc5750620003bc8383620003fd565b90505b92915050565b6000620003da826301ffc9a760e01b620003fd565b8015620003bf5750620003f6826001600160e01b0319620003fd565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b038716906175309062000466908690620006bd565b6000604051808303818686fa925050503d8060008114620004a4576040519150601f19603f3d011682016040523d82523d6000602084013e620004a9565b606091505b5091509150602081511015620004c65760009350505050620003bf565b818015620004e5575080806020019051810190620004e59190620006fb565b9695505050505050565b82805482825590600052602060002090810192821562000547579160200282015b828111156200054757825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000510565b506200055592915062000559565b5090565b5b808211156200055557600081556001016200055a565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200059e57600080fd5b919050565b60008060408385031215620005b757600080fd5b82516001600160401b0380821115620005cf57600080fd5b818501915085601f830112620005e457600080fd5b8151602082821115620005fb57620005fb62000570565b8160051b604051601f19603f8301168101818110868211171562000623576200062362000570565b6040529283528183019350848101820192898411156200064257600080fd5b948201945b838610156200066b576200065b8662000586565b8552948201949382019362000647565b97909101519698969750505050505050565b634e487b7160e01b600052603260045260246000fd5b6000600019821415620006b657634e487b7160e01b600052601160045260246000fd5b5060010190565b6000825160005b81811015620006e05760208186018101518583015201620006c4565b81811115620006f0576000828501525b509190910192915050565b6000602082840312156200070e57600080fd5b815180151581146200071f57600080fd5b9392505050565b60805160a051611dbc62000761600039600081816103d7015281816106d301526108d70152600081816103a701526109710152611dbc6000f3fe608060405234801561001057600080fd5b506004361061017d5760003560e01c80638b6aef15116100e3578063dddc40471161008c578063f3d0748011610066578063f3d07480146103c9578063f77c4791146103d2578063fe9bfe2c146103f957600080fd5b8063dddc404714610393578063e555df8d1461039a578063ed08fa80146103a257600080fd5b8063a3bc9336116100bd578063a3bc933614610362578063b75bf79614610377578063b85cf1771461038057600080fd5b80638b6aef15146102e95780638f3a4342146102f65780639f92786e1461033457600080fd5b8063548d77121161014557806368a57a021161011f57806368a57a021461029c5780636dd7d8ea146102b4578063713cdaa8146102c957600080fd5b8063548d77121461024c5780635df813301461025457806361eb38361461027c57600080fd5b806302a251a314610182578063107046bd146101aa5780631337abdd146101d557806317d65d171461020357806351700f4c1461022c575b600080fd5b600b54600c54610190919082565b604080519283526020830191909152015b60405180910390f35b6101bd6101b83660046119a9565b610419565b6040516001600160a01b0390911681526020016101a1565b6101f56101e33660046119d9565b60056020526000908152604090205481565b6040519081526020016101a1565b6101bd6102113660046119a9565b6002602052600090815260409020546001600160a01b031681565b6101f561023a3660046119d9565b60066020526000908152604090205481565b600e546101f5565b6102676102623660046119a9565b610443565b60405163ffffffff90911681526020016101a1565b61028f61028a3660046119d9565b61047d565b6040516101a19190611a0a565b6102a46105b2565b60405190151581526020016101a1565b6102c76102c23660046119d9565b6105d0565b005b6101f56102d73660046119d9565b60046020526000908152604090205481565b66b1a2bc2ec500006101f5565b604080518082018252600080825260209182015281518083018352600b54808252600c549183019182528351908152905191810191909152016101a1565b6102a4610342366004611a32565b600760209081526000928352604080842090915290825290205460ff1681565b61036a610794565b6040516101a19190611a65565b6101f5600e5481565b6102c761038e366004611ab2565b61082d565b60006101f5565b61036a6109bd565b6101f57f000000000000000000000000000000000000000000000000000000000000000081565b6101f5600d5481565b6101bd7f000000000000000000000000000000000000000000000000000000000000000081565b6101f56104073660046119d9565b60036020526000908152604090205481565b600a818154811061042957600080fd5b6000918252602090912001546001600160a01b0316905081565b6000818154811061045357600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b600b546000906104cc5760405162461bcd60e51b81526020600482015260156024820152741d9bdd1a5b99c81c195c9a5bd9081b9bdd081cd95d605a1b60448201526064015b60405180910390fd5b600c546105135760405162461bcd60e51b81526020600482015260156024820152741d9bdd1a5b99c81c195c9a5bd9081b9bdd081cd95d605a1b60448201526064016104c3565b600061051d610a44565b905060005b815181101561057a57836001600160a01b031682828151811061054757610547611ade565b60200260200101516001600160a01b03161415610568575060019392505050565b8061057281611b0a565b915050610522565b50600c5442111561058e5750600292915050565b50506001600160a01b03811660009081526008602052604090205460ff165b919050565b600042600b60000154101580156105cb575042600d5411155b905090565b600b546106175760405162461bcd60e51b81526020600482015260156024820152741d9bdd1a5b99c81c195c9a5bd9081b9bdd081cd95d605a1b60448201526064016104c3565b600c5461065e5760405162461bcd60e51b81526020600482015260156024820152741d9bdd1a5b99c81c195c9a5bd9081b9bdd081cd95d605a1b60448201526064016104c3565b600c5442118015906106725750600b544210155b6106be5760405162461bcd60e51b815260206004820152601860248201527f6f757473696465206f6620766f74696e6720706572696f64000000000000000060448201526064016104c3565b6040516356fd539760e11b81523360048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063adfaa72e90602401602060405180830381865afa158015610722573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107469190611b25565b6107885760405162461bcd60e51b81526020600482015260136024820152726e6f7420616c6c6f77656420746f20766f746560681b60448201526064016104c3565b61079181610e43565b50565b600b546060906107de5760405162461bcd60e51b81526020600482015260156024820152741d9bdd1a5b99c81c195c9a5bd9081b9bdd081cd95d605a1b60448201526064016104c3565b600c546108255760405162461bcd60e51b81526020600482015260156024820152741d9bdd1a5b99c81c195c9a5bd9081b9bdd081cd95d605a1b60448201526064016104c3565b6105cb610a44565b4283101561087d5760405162461bcd60e51b815260206004820152601b60248201527f7374617274206d75737420626520696e2074686520667574757265000000000060448201526064016104c3565b8183106108cc5760405162461bcd60e51b815260206004820152601860248201527f7374617274206d757374206265206265666f726520656e64000000000000000060448201526064016104c3565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109525760405162461bcd60e51b815260206004820152602560248201527f6f6e6c7920636f6e74726f6c6c65722063616e2073657420766f74696e672070604482015264195c9a5bd960da1b60648201526084016104c3565b60408051808201909152838152602001829052600b839055600c8290557f000000000000000000000000000000000000000000000000000000000000000061099a8484611b4e565b6109a49190611b7b565b600e55600c546109b5908290611b8f565b600d55505050565b6060600a805480602002602001604051908101604052809291908181526020018280548015610a1557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109f7575b5050505050905090565b6000610a2a836110c5565b8015610a3b5750610a3b83836110f8565b90505b92915050565b6060610a7460408051808201825260008082526020918201528151808301909252600b548252600c549082015290565b51421015610ada576001805480602002602001604051908101604052809291908181526020018280548015610a15576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116109f7575050505050905090565b6001546000610ae76111e1565b90506000610af76009548361126d565b60005490915083821415610b69576001805480602002602001604051908101604052809291908181526020018280548015610b5b57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610b3d575b505050505094505050505090565b60008167ffffffffffffffff811115610b8457610b84611ba7565b604051908082528060200260200182016040528015610bc957816020015b6040805180820190915260008082526020820152815260200190600190039081610ba25790505b50905060008367ffffffffffffffff811115610be757610be7611ba7565b604051908082528060200260200182016040528015610c10578160200160208202803683370190505b50905060005b83811015610c8657604080518082018252828152600083815260026020908152838220546001600160a01b031682526006815292902054918101919091528351849083908110610c6857610c68611ade565b60200260200101819052508080610c7e90611b0a565b915050610c16565b5060005b86811015610d205760006003600060018481548110610cab57610cab611ade565b60009182526020808320909101546001600160a01b031683528201929092526040019020548451909150849082908110610ce757610ce7611ade565b60200260200101610d0b604051806040016040528060008152602001600081525090565b90525080610d1881611b0a565b915050610c8a565b50610d2a82611283565b915060005b86811015610da45760018181548110610d4a57610d4a611ade565b9060005260206000200160009054906101000a90046001600160a01b0316828281518110610d7a57610d7a611ade565b6001600160a01b039092166020928302919091019091015280610d9c81611b0a565b915050610d2f565b50855b84811015610e38576002600084610dbe8a85611b4e565b81518110610dce57610dce611ade565b602002602001015160000151815260200190815260200160002060009054906101000a90046001600160a01b0316828281518110610e0e57610e0e611ade565b6001600160a01b039092166020928302919091019091015280610e3081611b0a565b915050610da7565b509695505050505050565b6001600160a01b038116600090815260076020908152604080832033845290915290205460ff1615610eb75760405162461bcd60e51b815260206004820152601d60248201527f616c726561647920766f74656420696e20746869732070726f6a65637400000060448201526064016104c3565b610ebf6112a2565b6001600160a01b03811660009081526008602052604081205460ff166002811115610eec57610eec6119f4565b14610f395760405162461bcd60e51b815260206004820152601a60248201527f70726f6a656374206973206e6f7420696e2070726f677265737300000000000060448201526064016104c3565b6001600160a01b03811660009081526007602090815260408083203384528252808320805460ff1916600117905560049091528120805491610f7a83611b0a565b90915550506001600160a01b0381166000908152600560205260408120805491610fa383611b0a565b9190505550610fb1426114ae565b6001600160a01b03821660009081526006602052604081208054909190610fd9908490611b8f565b90915550506001600160a01b0381166000908152600360205260408120548154811061100757611007611ade565b6000918252602090912060088204015460079091166004026101000a900463ffffffff16611045576009805490600061103f83611b0a565b91905055505b6001600160a01b0381166000908152600360205260408120548154811061106e5761106e611ade565b906000526020600020906008918282040191900660040281819054906101000a900463ffffffff16809291906110a390611bbd565b91906101000a81548163ffffffff021916908363ffffffff1602179055505050565b60006110d8826301ffc9a760e01b6110f8565b8015610a3e57506110f1826001600160e01b03196110f8565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b038716906175309061115f908690611be1565b6000604051808303818686fa925050503d806000811461119b576040519150601f19603f3d011682016040523d82523d6000602084013e6111a0565b606091505b50915091506020815110156111bb5760009350505050610a3e565b8180156111d75750808060200190518101906111d79190611b25565b9695505050505050565b60008061121f61121560408051808201825260008082526020918201528151808301909252600b548252600c549082015290565b602001514261126d565b905061122a600e5490565b60408051808201825260008082526020918201528151808301909252600b548252600c54908201525161125d9083611b4e565b6112679190611b7b565b91505090565b600081831061127c5781610a3b565b5090919050565b606061129e826000600185516112999190611b4e565b61158f565b5090565b60006112ac61171d565b90508051600014156112bb5750565b60005b81518110156113905760018282815181106112db576112db611ade565b602090810291909101810151825460018082018555600094855292842001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039092169190911790558351909160089185908590811061133c5761133c611ade565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19166001836002811115611379576113796119f4565b02179055508061138881611b0a565b9150506112be565b5060408051808201825260008082526020918201528151808301909252600b548252600c54910181905242106107915760006113ca6109bd565b51905060005b818110156114a9576000600860006113e66109bd565b84815181106113f7576113f7611ade565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16600281111561142f5761142f6119f4565b1415611497576002600860006114436109bd565b848151811061145457611454611ade565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19166001836002811115611491576114916119f4565b02179055505b806114a181611b0a565b9150506113d0565b505050565b6000806114c266b1a2bc2ec5000082611c1c565b905060006114f460408051808201825260008082526020918201528151808301909252600b548252600c549082015290565b5160408051808201825260008082526020918201528151808301909252600b548252600c5491018190526115289190611b4e565b905060006115368284611c5b565b9050600066b1a2bc2ec5000061157060408051808201825260008082526020918201528151808301909252600b548252600c549082015290565b5161157b9088611b4e565b6115859084611c89565b6111d79190611d0e565b8181808214156115a0575050505050565b60008560026115af8787611c1c565b6115b99190611c5b565b6115c39087611d0e565b815181106115d3576115d3611ade565b60200260200101516020015190505b8183136116ef575b808684815181106115fd576115fd611ade565b6020026020010151602001511115611621578261161981611d4f565b9350506115ea565b85828151811061163357611633611ade565b602002602001015160200151811115611658578161165081611d68565b925050611621565b8183136116ea5785828151811061167157611671611ade565b602002602001015186848151811061168b5761168b611ade565b60200260200101518785815181106116a5576116a5611ade565b602002602001018885815181106116be576116be611ade565b60200260200101829052829052505082806116d890611d4f565b93505081806116e690611d68565b9250505b6115e2565b818512156117025761170286868461158f565b838312156117155761171586848661158f565b505050505050565b600154606090600061172d6111e1565b9050600061173d6009548361126d565b6000805491925061174e8584611b4e565b905060008167ffffffffffffffff81111561176b5761176b611ba7565b604051908082528060200260200182016040528015611794578160200160208202803683370190505b5090506117c560408051808201825260008082526020918201528151808301909252600b548252600c549082015290565b514210156117d7579695505050505050565b816117e6579695505050505050565b60008367ffffffffffffffff81111561180157611801611ba7565b60405190808252806020026020018201604052801561184657816020015b604080518082019091526000808252602082015281526020019060019003908161181f5790505b50905060005b84811015611905576000818152600260209081526040808320546001600160a01b03168352600890915290205460ff166001816002811115611890576118906119f4565b141561189c57506118f3565b604080518082018252838152600084815260026020908152838220546001600160a01b0316825260068152929020549181019190915283518490849081106118e6576118e6611ade565b6020026020010181905250505b806118fd81611b0a565b91505061184c565b5061190f81611283565b905060005b8381101561199c576002600083838151811061193257611932611ade565b602002602001015160000151815260200190815260200160002060009054906101000a90046001600160a01b031683828151811061197257611972611ade565b6001600160a01b03909216602092830291909101909101528061199481611b0a565b915050611914565b5090979650505050505050565b6000602082840312156119bb57600080fd5b5035919050565b80356001600160a01b03811681146105ad57600080fd5b6000602082840312156119eb57600080fd5b610a3b826119c2565b634e487b7160e01b600052602160045260246000fd5b6020810160038310611a2c57634e487b7160e01b600052602160045260246000fd5b91905290565b60008060408385031215611a4557600080fd5b611a4e836119c2565b9150611a5c602084016119c2565b90509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611aa65783516001600160a01b031683529284019291840191600101611a81565b50909695505050505050565b600080600060608486031215611ac757600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611b1e57611b1e611af4565b5060010190565b600060208284031215611b3757600080fd5b81518015158114611b4757600080fd5b9392505050565b600082821015611b6057611b60611af4565b500390565b634e487b7160e01b600052601260045260246000fd5b600082611b8a57611b8a611b65565b500490565b60008219821115611ba257611ba2611af4565b500190565b634e487b7160e01b600052604160045260246000fd5b600063ffffffff80831681811415611bd757611bd7611af4565b6001019392505050565b6000825160005b81811015611c025760208186018101518583015201611be8565b81811115611c11576000828501525b509190910192915050565b60008083128015600160ff1b850184121615611c3a57611c3a611af4565b6001600160ff1b0384018313811615611c5557611c55611af4565b50500390565b600082611c6a57611c6a611b65565b600160ff1b821460001984141615611c8457611c84611af4565b500590565b60006001600160ff1b0381841382841380821686840486111615611caf57611caf611af4565b600160ff1b6000871282811687830589121615611cce57611cce611af4565b60008712925087820587128484161615611cea57611cea611af4565b87850587128184161615611d0057611d00611af4565b505050929093029392505050565b600080821280156001600160ff1b0384900385131615611d3057611d30611af4565b600160ff1b8390038412811615611d4957611d49611af4565b50500190565b60006001600160ff1b03821415611b1e57611b1e611af4565b6000600160ff1b821415611d7e57611d7e611af4565b50600019019056fea26469706673582212202a1e8f6f21999b15b83052a3f43e32fe4d51267f33e6112fca96f8cfa554c93364736f6c634300080c00336101006040523480156200001257600080fd5b5060405162001eb138038062001eb1833981016040819052620000359162000234565b3360805283516200004e9060029060208701906200013f565b506001600160a01b03831660a05260c082905260e081905260006200007560028462000335565b905060008160c05162000089919062000358565b9050816040516200009a90620001ce565b908152602001604051809103906000f080158015620000bd573d6000803e3d6000fd5b50600080546001600160a01b0319166001600160a01b03929092169190911790556040518190620000ee90620001dc565b908152602001604051809103906000f08015801562000111573d6000803e3d6000fd5b50600180546001600160a01b0319166001600160a01b039290921691909117905550620003bb945050505050565b8280546200014d906200037e565b90600052602060002090601f016020900481019282620001715760008555620001bc565b82601f106200018c57805160ff1916838001178555620001bc565b82800160010185558215620001bc579182015b82811115620001bc5782518255916020019190600101906200019f565b50620001ca929150620001ea565b5090565b61093d8062000c3783390190565b61093d806200157483390190565b5b80821115620001ca5760008155600101620001eb565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200022f57600080fd5b919050565b600080600080608085870312156200024b57600080fd5b84516001600160401b03808211156200026357600080fd5b818701915087601f8301126200027857600080fd5b8151818111156200028d576200028d62000201565b604051601f8201601f19908116603f01168101908382118183101715620002b857620002b862000201565b81604052828152602093508a84848701011115620002d557600080fd5b600091505b82821015620002f95784820184015181830185015290830190620002da565b828211156200030b5760008484830101525b97506200031d91505087820162000217565b60408801516060909801519699909850945050505050565b6000826200035357634e487b7160e01b600052601260045260246000fd5b500490565b6000828210156200037957634e487b7160e01b600052601160045260246000fd5b500390565b600181811c908216806200039357607f821691505b60208210811415620003b557634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c05160e0516108266200041160003960006101390152600081816101c0015261033901526000818161025101526102cc01526000818161022a01528181610406015261054501526108266000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c8063a96af0f411610097578063e10828ac11610066578063e10828ac14610205578063e1e726db14610212578063f77c479114610225578063fc0c546a1461024c57600080fd5b8063a96af0f4146101bb578063c1b075db146101e2578063d2170515146101ea578063d87aa643146101f257600080fd5b8063338ba300116100d3578063338ba30014610169578063582f0e16146101945780637284e4161461019c57806398cbc31f146101b157600080fd5b806301ffc9a7146100fa57806312d35941146101225780632c4e722e14610134575b600080fd5b61010d6101083660046106d2565b610273565b60405190151581526020015b60405180910390f35b60035461010d90610100900460ff1681565b61015b7f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610119565b60005461017c906001600160a01b031681565b6040516001600160a01b039091168152602001610119565b61010d6102aa565b6101a4610360565b6040516101199190610703565b6101b96103ee565b005b61015b7f000000000000000000000000000000000000000000000000000000000000000081565b6101b961052d565b61010d610664565b6101b9610200366004610758565b610694565b60035461010d9060ff1681565b60015461017c906001600160a01b031681565b61017c7f000000000000000000000000000000000000000000000000000000000000000081565b61017c7f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b0319821663154777d960e11b14806102a457506301ffc9a760e01b6001600160e01b03198316145b92915050565b6040516370a0823160e01b815230600482015260009081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610313573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610337919061077a565b7f0000000000000000000000000000000000000000000000000000000000000000111592915050565b6002805461036d90610793565b80601f016020809104026020016040519081016040528092919081815260200182805461039990610793565b80156103e65780601f106103bb576101008083540402835291602001916103e6565b820191906000526020600020905b8154815290600101906020018083116103c957829003601f168201915b505050505081565b6040516345b72bd960e11b81523360048201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690638b6e57b290602401602060405180830381865afa158015610455573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047991906107ce565b6104ca5760405162461bcd60e51b815260206004820152601560248201527f6e6f7420612070726f6a656374206d616e61676572000000000000000000000060448201526064015b60405180910390fd5b60035460ff161561051d5760405162461bcd60e51b815260206004820152601b60248201527f616c726561647920617070726f766564206279206d616e61676572000000000060448201526064016104c1565b506003805460ff19166001179055565b604051636bfe90bb60e11b81523360048201819052907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d7fd217690602401602060405180830381865afa158015610594573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b891906107ce565b6105fa5760405162461bcd60e51b81526020600482015260136024820152723737ba1030903632b3b0b61036b0b730b3b2b960691b60448201526064016104c1565b600354610100900460ff16156106525760405162461bcd60e51b815260206004820152601960248201527f616c726561647920617070726f766564206279206c6567616c0000000000000060448201526064016104c1565b506003805461ff001916610100179055565b600061066e6102aa565b801561067c575060035460ff165b801561068f5750600354610100900460ff165b905090565b60405162461bcd60e51b81526020600482015260136024820152721b9bdd081e595d081a5b5c1b195b595b9d1959606a1b60448201526064016104c1565b6000602082840312156106e457600080fd5b81356001600160e01b0319811681146106fc57600080fd5b9392505050565b600060208083528351808285015260005b8181101561073057858101830151858201604001528201610714565b81811115610742576000604083870101525b50601f01601f1916929092016040019392505050565b6000806040838503121561076b57600080fd5b50508035926020909101359150565b60006020828403121561078c57600080fd5b5051919050565b600181811c908216806107a757607f821691505b602082108114156107c857634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156107e057600080fd5b815180151581146106fc57600080fdfea2646970667358221220a3a933861db1df748fd84b384f6ee84dd9415563674e2cb11ba5e4a8dd87052a64736f6c634300080c003360a060405234801561001057600080fd5b5060405161093d38038061093d83398101604081905261002f91610049565b600680546001600160a01b03191633179055608052610062565b60006020828403121561005b57600080fd5b5051919050565b6080516108b261008b600039600081816101c8015281816101f1015261061f01526108b26000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063b9b8c246116100ad578063d0a24e4711610071578063d0a24e4714610213578063d7e64c0014610269578063e8448f0214610271578063ed7196bc146102a7578063fa89401a146102af57600080fd5b8063b9b8c24614610226578063c0cd9ce21461023b578063c487888314610243578063cbf2cc2b1461024c578063cd2b30261461025657600080fd5b8063711a9f35116100f4578063711a9f35146101ae5780637b8db586146101c6578063a96af0f4146101ec578063acde5d2814610213578063b81b86301461021357600080fd5b80630276650b1461013157806318dfcf7b1461014d5780631a15c6d7146101565780631c120bc11461017057806369d917c914610178575b600080fd5b61013a60055481565b6040519081526020015b60405180910390f35b61013a60075481565b6000546101639060ff1681565b6040516101449190610791565b600a5461013a565b61013a6101863660046107b9565b6000908152600960209081526040808320546001600160a01b03168352600890915290205490565b6101b66102c2565b6040519015158152602001610144565b7f000000000000000000000000000000000000000000000000000000000000000061013a565b61013a7f000000000000000000000000000000000000000000000000000000000000000081565b61013a6102213660046107ee565b6102e4565b610239610234366004610809565b61032a565b005b610239610424565b61013a600a5481565b61013a620186a081565b6102396102643660046107b9565b610591565b60075461013a565b6001546002546003546004546102879392919084565b604080519485526020850193909352918301526060820152608001610144565b6101b661059d565b6102396102bd3660046107ee565b6105a6565b600060025b60005460ff1660038111156102de576102de61077b565b14905090565b60405162461bcd60e51b81526020600482015260136024820152721b9bdd081e595d081a5b5c1b195b595b9d1959606a1b60448201526000906064015b60405180910390fd5b6006546001600160a01b031633146103725760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081c1c9bda9958dd60aa1b6044820152606401610321565b6001600160a01b0382166000908152600860205260409020546103da57600780546000908152600960205260408120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616179055815491906103d483610849565b91905055505b6001600160a01b03821660009081526008602052604081208054839290610402908490610864565b9250508190555080600a600082825461041b9190610864565b90915550505050565b600160005460ff16600381111561043d5761043d61077b565b1461044757600080fd5b6040805160808101825260015481526002546020820152600354918101919091526004546060820152600061047b60075490565b6005549091505b8251821180156104945750620186a05a115b156105305782516000908152600960209081526040808320546001600160a01b0316835260089091529020546104ca81836105e4565b846020018181516104db9190610864565b9052506104f36104ec836001610864565b82906105e4565b846040018181516105049190610864565b905250606084015161051690826105fe565b6060850152508251839061052990610849565b9052610482565b8251600181905560208401516002556040840151600355606084015160045582141561058c576000610562828561060d565b9050801561057c576000805460ff1916600217905561058a565b6000805460ff191660031790555b505b505050565b61059a816106a9565b50565b600060016102c7565b60405162461bcd60e51b81526020600482015260136024820152721b9bdd081e595d081a5b5c1b195b595b9d1959606a1b6044820152606401610321565b60008183106105f357816105f5565b825b90505b92915050565b60008282106105f357816105f5565b600080610619600a5490565b905060007f00000000000000000000000000000000000000000000000000000000000000009050818460600151111561065157600080fd5b818460200151111561066257600080fd5b818460400151111561067357600080fd5b80821161068957505050606081015182146105f8565b8084604001511180156106a0575080846020015111155b925050506105f8565b6000805460ff1660038111156106c1576106c161077b565b14806106e35750600360005460ff1660038111156106e1576106e161077b565b145b61072f5760405162461bcd60e51b815260206004820152601a60248201527f616c726561647920736574206f7220696e2070726f67726573730000000000006044820152606401610321565b60058190556000805460ff19166001908117825560408051608081018252838152602081018490529081018390526060018290528190556002819055600381905560045561059a610424565b634e487b7160e01b600052602160045260246000fd5b60208101600483106107b357634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156107cb57600080fd5b5035919050565b80356001600160a01b03811681146107e957600080fd5b919050565b60006020828403121561080057600080fd5b6105f5826107d2565b6000806040838503121561081c57600080fd5b610825836107d2565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561085d5761085d610833565b5060010190565b6000821982111561087757610877610833565b50019056fea264697066735822122093a04c32e21278ae09d18ad433105f694b876008e7a5fdf746d48667c82ba69164736f6c634300080c003360a060405234801561001057600080fd5b5060405161093d38038061093d83398101604081905261002f91610049565b600680546001600160a01b03191633179055608052610062565b60006020828403121561005b57600080fd5b5051919050565b6080516108b261008b600039600081816101c8015281816101f1015261061f01526108b26000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c8063b9b8c246116100ad578063d0a24e4711610071578063d0a24e4714610213578063d7e64c0014610269578063e8448f0214610271578063ed7196bc146102a7578063fa89401a146102af57600080fd5b8063b9b8c24614610226578063c0cd9ce21461023b578063c487888314610243578063cbf2cc2b1461024c578063cd2b30261461025657600080fd5b8063711a9f35116100f4578063711a9f35146101ae5780637b8db586146101c6578063a96af0f4146101ec578063acde5d2814610213578063b81b86301461021357600080fd5b80630276650b1461013157806318dfcf7b1461014d5780631a15c6d7146101565780631c120bc11461017057806369d917c914610178575b600080fd5b61013a60055481565b6040519081526020015b60405180910390f35b61013a60075481565b6000546101639060ff1681565b6040516101449190610791565b600a5461013a565b61013a6101863660046107b9565b6000908152600960209081526040808320546001600160a01b03168352600890915290205490565b6101b66102c2565b6040519015158152602001610144565b7f000000000000000000000000000000000000000000000000000000000000000061013a565b61013a7f000000000000000000000000000000000000000000000000000000000000000081565b61013a6102213660046107ee565b6102e4565b610239610234366004610809565b61032a565b005b610239610424565b61013a600a5481565b61013a620186a081565b6102396102643660046107b9565b610591565b60075461013a565b6001546002546003546004546102879392919084565b604080519485526020850193909352918301526060820152608001610144565b6101b661059d565b6102396102bd3660046107ee565b6105a6565b600060025b60005460ff1660038111156102de576102de61077b565b14905090565b60405162461bcd60e51b81526020600482015260136024820152721b9bdd081e595d081a5b5c1b195b595b9d1959606a1b60448201526000906064015b60405180910390fd5b6006546001600160a01b031633146103725760405162461bcd60e51b815260206004820152600b60248201526a1b9bdd081c1c9bda9958dd60aa1b6044820152606401610321565b6001600160a01b0382166000908152600860205260409020546103da57600780546000908152600960205260408120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616179055815491906103d483610849565b91905055505b6001600160a01b03821660009081526008602052604081208054839290610402908490610864565b9250508190555080600a600082825461041b9190610864565b90915550505050565b600160005460ff16600381111561043d5761043d61077b565b1461044757600080fd5b6040805160808101825260015481526002546020820152600354918101919091526004546060820152600061047b60075490565b6005549091505b8251821180156104945750620186a05a115b156105305782516000908152600960209081526040808320546001600160a01b0316835260089091529020546104ca81836105e4565b846020018181516104db9190610864565b9052506104f36104ec836001610864565b82906105e4565b846040018181516105049190610864565b905250606084015161051690826105fe565b6060850152508251839061052990610849565b9052610482565b8251600181905560208401516002556040840151600355606084015160045582141561058c576000610562828561060d565b9050801561057c576000805460ff1916600217905561058a565b6000805460ff191660031790555b505b505050565b61059a816106a9565b50565b600060016102c7565b60405162461bcd60e51b81526020600482015260136024820152721b9bdd081e595d081a5b5c1b195b595b9d1959606a1b6044820152606401610321565b60008183106105f357816105f5565b825b90505b92915050565b60008282106105f357816105f5565b600080610619600a5490565b905060007f00000000000000000000000000000000000000000000000000000000000000009050818460600151111561065157600080fd5b818460200151111561066257600080fd5b818460400151111561067357600080fd5b80821161068957505050606081015182146105f8565b8084604001511180156106a0575080846020015111155b925050506105f8565b6000805460ff1660038111156106c1576106c161077b565b14806106e35750600360005460ff1660038111156106e1576106e161077b565b145b61072f5760405162461bcd60e51b815260206004820152601a60248201527f616c726561647920736574206f7220696e2070726f67726573730000000000006044820152606401610321565b60058190556000805460ff19166001908117825560408051608081018252838152602081018490529081018390526060018290528190556002819055600381905560045561059a610424565b634e487b7160e01b600052602160045260246000fd5b60208101600483106107b357634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156107cb57600080fd5b5035919050565b80356001600160a01b03811681146107e957600080fd5b919050565b60006020828403121561080057600080fd5b6105f5826107d2565b6000806040838503121561081c57600080fd5b610825836107d2565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561085d5761085d610833565b5060010190565b6000821982111561087757610877610833565b50019056fea2646970667358221220fc9f9c4b9336dc11f8a4af4e7b97161dfffc6e2b18d3d8513a076276e5c7cf8d64736f6c634300080c0033a264697066735822122088fc307626272db5357dda8efc310877360434b50cd6586c7e127b1d03d8995764736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createBatch(address[],uint256)": {
        "details": "Must guarantee projects are in a valid state (whitelisted & not already belonging to a batch)Batches are created in order, and with no overlap.   i.e.: when creating batch #3, its start date must be after the end date of batch #2"
      },
      "getBatchForProject(address)": {
        "params": {
          "_project": "address of the project"
        },
        "returns": {
          "_0": "Batch address"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasLegalManagerRole(address)": {
        "params": {
          "_account": "Account to check"
        },
        "returns": {
          "_0": "true if account is a legal manager"
        }
      },
      "hasProjectManagerRole(address)": {
        "params": {
          "_account": "Account to check"
        },
        "returns": {
          "_0": "true if account is a project manager"
        }
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canInvestInPeoplesPool(address,address)": {
        "notice": "Checks if a user can invest in the people's pool of a project"
      },
      "canInvestInStakersPool(address)": {
        "notice": "Checks if a user can invest in the staker's pool of a project"
      },
      "canVote(address)": {
        "notice": "Checks if a user can vote"
      },
      "createBatch(address[],uint256)": {
        "notice": "Creates a new batch with"
      },
      "isProjectInBatch(address,address)": {
        "notice": "Checks if a project is included in the given batch"
      },
      "registerProject(string,address,uint256,uint256)": {
        "notice": "Registers a new Project"
      },
      "setBatchVotingPeriod(address,uint256,uint256,uint256)": {
        "notice": "Sets the voting period for a Batch"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/discovery/Controller.sol:Controller",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 3235,
        "contract": "contracts/discovery/Controller.sol:Controller",
        "label": "projects",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3239,
        "contract": "contracts/discovery/Controller.sol:Controller",
        "label": "projectsToBatches",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3241,
        "contract": "contracts/discovery/Controller.sol:Controller",
        "label": "staking",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3243,
        "contract": "contracts/discovery/Controller.sol:Controller",
        "label": "registry",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3245,
        "contract": "contracts/discovery/Controller.sol:Controller",
        "label": "token",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/discovery/Controller.sol:Controller",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/discovery/Controller.sol:Controller",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}