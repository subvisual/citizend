{
  "address": "0xA73292e0CeD7F1150e9E7d0f09e82a3640C87aCc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Rebond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "StakeFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Unbond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "UNBONDING_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "hasStaked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rebond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bonded",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unbond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "unbondings",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "first",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "next",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "withdrawable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x86e417c05995b73468d952d95c55ee153b2d71d337b951b046b38e5f55c9efed",
  "receipt": {
    "to": null,
    "from": "0x0077014b4C74d9b1688847386B24Ed23Fdf14Be8",
    "contractAddress": "0xA73292e0CeD7F1150e9E7d0f09e82a3640C87aCc",
    "transactionIndex": 0,
    "gasUsed": "781369",
    "logsBloom": "0x
    "blockHash": "0x68c6859bb884c8c754ef21f35d4f634705ae6bdb6deecf4f5143e574be32201a",
    "transactionHash": "0x86e417c05995b73468d952d95c55ee153b2d71d337b951b046b38e5f55c9efed",
    "logs": [],
    "blockNumber": 7,
    "cumulativeGasUsed": "781369",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x84879D9635B3f64fB4fc170A130524d708762808"
  ],
  "numDeployments": 1,
  "solcInputHash": "dfb224aae55ceb1d52b02ce7efbb10f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Rebond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unbond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNBONDING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"hasStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rebond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonded\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unbond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unbondings\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"first\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"next\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"rebond(uint256)\":{\"details\":\"Emits a `Rebond` event.\",\"params\":{\"amount\":\"The amount of tokens to rebond.\"}},\"stake(uint256)\":{\"details\":\"Emits a `Stake` event.\",\"params\":{\"amount\":\"The amount of tokens to stake.\"}},\"unbond(uint256)\":{\"details\":\"Emits a `Unbond` event.Uses a mapping to handle the different unbondings, but from the caller's side it's treated as a single pool.\",\"params\":{\"amount\":\"The amount of tokens to unbond.\"}},\"withdraw()\":{\"details\":\"Emits a `Withdrawal` event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"rebond(uint256)\":{\"notice\":\"Rebonds the given amount of tokens for `msg.sender`. It requires that there are enough funds that are still unbonding or that have been unbonded but not yet withdrawn.\"},\"stake(uint256)\":{\"notice\":\"Stakes the given amount of tokens, using the `msg.sender` as the staker.\"},\"stakes(address)\":{\"notice\":\"account => stakes\"},\"token()\":{\"notice\":\"The token to stake\"},\"unbond(uint256)\":{\"notice\":\"Unbonds the given amount of tokens, using the `msg.sender` as the staker. The staker must have already staked the given amount of tokens.\"},\"unbondings(address)\":{\"notice\":\"account => unbondings\"},\"withdraw()\":{\"notice\":\"TODO add a gas meter to prevent this function from crashing if too many unbondings exist\"},\"withdrawable(address)\":{\"notice\":\"Computes how many tokens waiting for unbonding can already be withdrawn\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/discovery/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":300},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/discovery/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IStaking} from \\\"./interfaces/IStaking.sol\\\";\\n\\ncontract Staking is IStaking {\\n    using SafeERC20 for IERC20;\\n\\n    //\\n    // Structs\\n    //\\n\\n    struct Stake {\\n        uint256 total;\\n        uint256 bonded;\\n    }\\n\\n    struct UnbondingList {\\n        mapping(uint256 => Unbonding) list;\\n        uint128 first;\\n        uint128 next;\\n    }\\n\\n    struct Unbonding {\\n        uint256 amount;\\n        uint256 time;\\n    }\\n\\n    //\\n    // Events\\n    //\\n\\n    event StakeFunds(address indexed staker, uint256 amount);\\n    event Unbond(address indexed staker, uint256 amount);\\n    event Rebond(address indexed staker, uint256 amount);\\n    event Withdrawal(address indexed staker, uint256 amount);\\n\\n    //\\n    // Constants\\n    //\\n\\n    uint256 public constant UNBONDING_PERIOD = 28 days;\\n\\n    //\\n    // State\\n    //\\n\\n    /// The token to stake\\n    address public immutable token;\\n\\n    /// account => stakes\\n    mapping(address => Stake) public stakes;\\n\\n    /// account => unbondings\\n    mapping(address => UnbondingList) public unbondings;\\n\\n    constructor(address _token) {\\n        require(_token != address(0), \\\"_token cannot be 0\\\");\\n\\n        token = _token;\\n    }\\n\\n    function hasStaked(address _account)\\n        external\\n        view\\n        override(IStaking)\\n        returns (bool)\\n    {\\n        return stakes[_account].bonded > 0;\\n    }\\n\\n    /// @inheritdoc IStaking\\n    function stake(uint256 _amount) external override(IStaking) {\\n        stakes[msg.sender].total += _amount;\\n        stakes[msg.sender].bonded += _amount;\\n\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        emit StakeFunds(msg.sender, _amount);\\n    }\\n\\n    /// @inheritdoc IStaking\\n    function unbond(uint256 amount) external override(IStaking) {\\n        Stake storage _stake = stakes[msg.sender];\\n        UnbondingList storage _unbondings = unbondings[msg.sender];\\n\\n        require(_stake.bonded >= amount, \\\"not enough funds\\\");\\n\\n        Unbonding memory unbonding = Unbonding(\\n            amount,\\n            block.timestamp + UNBONDING_PERIOD\\n        );\\n\\n        _unbondings.list[_unbondings.next] = unbonding;\\n        _unbondings.next++;\\n        _stake.bonded -= amount;\\n\\n        emit Unbond(msg.sender, amount);\\n    }\\n\\n    /// @inheritdoc IStaking\\n    function rebond(uint256 amount) external override(IStaking) {\\n        Stake storage _stake = stakes[msg.sender];\\n        UnbondingList storage _unbondings = unbondings[msg.sender];\\n\\n        require(\\n            (_stake.total - _stake.bonded) >= amount,\\n            \\\"not enough unbonding funds\\\"\\n        );\\n\\n        uint256 toBeRebonded = amount;\\n        uint256 limit = _unbondings.first;\\n        for (uint256 i = _unbondings.next - 1; i >= limit; i--) {\\n            Unbonding storage unbonding = _unbondings.list[i];\\n\\n            if (unbonding.amount >= toBeRebonded) {\\n                unbonding.amount -= toBeRebonded;\\n                break;\\n            } else {\\n                toBeRebonded -= unbonding.amount;\\n                delete _unbondings.list[i];\\n                _unbondings.next--;\\n            }\\n        }\\n        _stake.bonded += amount;\\n\\n        emit Rebond(msg.sender, amount);\\n    }\\n\\n    /// TODO add a gas meter to prevent this function from crashing if too many unbondings exist\\n    /// @inheritdoc IStaking\\n    function withdraw() external override(IStaking) {\\n        Stake storage _stake = stakes[msg.sender];\\n        UnbondingList storage _unbondings = unbondings[msg.sender];\\n\\n        uint256 amount;\\n        uint256 limit = _unbondings.next;\\n        for (uint256 i = _unbondings.first; i < limit; i++) {\\n            Unbonding storage unbonding = _unbondings.list[i];\\n\\n            if (unbonding.time > block.timestamp) {\\n                break;\\n            }\\n\\n            amount += unbonding.amount;\\n            delete _unbondings.list[i];\\n            _unbondings.first++;\\n        }\\n\\n        require(amount > 0, \\\"nothing to withdraw\\\");\\n        _stake.total -= amount;\\n\\n        IERC20(token).safeTransfer(msg.sender, amount);\\n\\n        emit Withdrawal(msg.sender, amount);\\n    }\\n\\n    /// @inheritdoc IStaking\\n    function withdrawable(address _account) public view returns (uint256) {\\n        UnbondingList storage _unbondings = unbondings[_account];\\n\\n        uint256 amount;\\n        uint256 limit = _unbondings.next;\\n        for (uint256 i = _unbondings.first; i < limit; i++) {\\n            Unbonding storage unbonding = _unbondings.list[i];\\n\\n            if (unbonding.time > block.timestamp) {\\n                return amount;\\n            }\\n\\n            amount += _unbondings.list[i].amount;\\n        }\\n\\n        return amount;\\n    }\\n}\\n\",\"keccak256\":\"0x315482867790d42b35cca2a0e4c3242cdbbb1a968f29e83e839becb9f760d0e8\",\"license\":\"MIT\"},\"contracts/discovery/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.12;\\n\\ninterface IStaking {\\n    /**\\n     * Stakes the given amount of tokens, using the `msg.sender` as the\\n     * staker.\\n     *\\n     * @dev Emits a `Stake` event.\\n     *\\n     * @param amount The amount of tokens to stake.\\n     */\\n    function stake(uint256 amount) external;\\n\\n    /**\\n     * Unbonds the given amount of tokens, using the `msg.sender` as the\\n     * staker. The staker must have already staked the given amount of\\n     * tokens.\\n     *\\n     * @dev Emits a `Unbond` event.\\n     * @dev Uses a mapping to handle the different unbondings, but from the\\n     * caller's side it's treated as a single pool.\\n     *\\n     * @param amount The amount of tokens to unbond.\\n     */\\n    function unbond(uint256 amount) external;\\n\\n    /**\\n     * Rebonds the given amount of tokens for `msg.sender`. It requires that\\n     * there are enough funds that are still unbonding or that have been\\n     * unbonded but not yet withdrawn.\\n     *\\n     * @dev Emits a `Rebond` event.\\n     *\\n     * @param amount The amount of tokens to rebond.\\n     */\\n    function rebond(uint256 amount) external;\\n\\n    /**\\n     * Withdraws any tokens that have gone through the full unbonding period\\n     *\\n     * @dev Emits a `Withdrawal` event.\\n     */\\n    function withdraw() external;\\n\\n    /**\\n     * Computes how many tokens waiting for unbonding can already be withdrawn\\n     */\\n    function withdrawable(address _account) external view returns (uint256);\\n\\n    function hasStaked(address _account) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x59e98974d72c76879437e55612e9e7f7b3c5b73c6aea4b21a5f33637217c4e5f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610e08380380610e0883398101604081905261002f9161008f565b6001600160a01b03811661007e5760405162461bcd60e51b815260206004820152601260248201527105f746f6b656e2063616e6e6f7420626520360741b604482015260640160405180910390fd5b6001600160a01b03166080526100bf565b6000602082840312156100a157600080fd5b81516001600160a01b03811681146100b857600080fd5b9392505050565b608051610d206100e8600039600081816101ed015281816104b9015261056b0152610d206000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063c93c8f3411610066578063c93c8f341461016c578063ce513b6f146101aa578063d9a912ec146101cb578063eaffb3f9146101d5578063fc0c546a146101e857600080fd5b806316934fc4146100a357806327de9e32146100e45780633ccfd60b146100f9578063a694fc3a14610101578063abbb247f14610114575b600080fd5b6100ca6100b1366004610b22565b6000602081905290815260409020805460019091015482565b604080519283526020830191909152015b60405180910390f35b6100f76100f2366004610b4b565b610227565b005b6100f7610374565b6100f761010f366004610b4b565b610512565b61014c610122366004610b22565b600160208190526000918252604090912001546001600160801b0380821691600160801b90041682565b604080516001600160801b039384168152929091166020830152016100db565b61019a61017a366004610b22565b6001600160a01b0316600090815260208190526040902060010154151590565b60405190151581526020016100db565b6101bd6101b8366004610b22565b6105cb565b6040519081526020016100db565b6101bd6224ea0081565b6100f76101e3366004610b4b565b610665565b61020f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100db565b3360009081526020818152604080832060019283905292209082015483111561028a5760405162461bcd60e51b815260206004820152601060248201526f6e6f7420656e6f7567682066756e647360801b60448201526064015b60405180910390fd5b600060405180604001604052808581526020016224ea00426102ac9190610b7a565b9052600180840180546001600160801b03600160801b91829004811660009081526020888152604090912086518155908601519401939093558154939450909204169060106102fa83610b92565b91906101000a8154816001600160801b0302191690836001600160801b0316021790555050838360010160008282546103339190610bb9565b909155505060405184815233907fb735793e7250527232d5f7e07e8691c383c85e0c77673ac750944e8bd40e71c8906020015b60405180910390a250505050565b33600090815260208181526040808320600192839052908320918201549092906001600160801b03600160801b8204811691165b8181101561044b57600081815260208590526040902060018101544210156103d0575061044b565b80546103dc9085610b7a565b60008381526020879052604081208181556001908101829055870180549296506001600160801b03909216919061041283610b92565b91906101000a8154816001600160801b0302191690836001600160801b031602179055505050808061044390610bd0565b9150506103a8565b50600082116104925760405162461bcd60e51b81526020600482015260136024820152726e6f7468696e6720746f20776974686472617760681b6044820152606401610281565b818460000160008282546104a69190610bb9565b909155506104e090506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163384610827565b60405182815233907f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6590602001610366565b3360009081526020819052604081208054839290610531908490610b7a565b90915550503360009081526020819052604081206001018054839290610558908490610b7a565b9091555061059390506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308461088f565b60405181815233907f98edbb47e4ea313ba4379bcb77201a01b70c9ceb0211dd0508dbfd24a58f5aa99060200160405180910390a250565b6001600160a01b038116600090815260016020819052604082209081015482906001600160801b03600160801b8204811691165b8181101561065b576000818152602085905260409020600181015442101561062c57509195945050505050565b6000828152602086905260409020546106459085610b7a565b935050808061065390610bd0565b9150506105ff565b5090949350505050565b336000908152602081815260408083206001928390529220908201548254849161068e91610bb9565b10156106dc5760405162461bcd60e51b815260206004820152601a60248201527f6e6f7420656e6f75676820756e626f6e64696e672066756e64730000000000006044820152606401610281565b60018082015484916001600160801b0380831692600092610706929091600160801b900416610beb565b6001600160801b031690505b8181106107d15760008181526020859052604090208054841161074f57838160000160008282546107439190610bb9565b909155506107d1915050565b805461075b9085610bb9565b600083815260208790526040812081815560019081019190915586018054919550600160801b9091046001600160801b031690601061079983610c13565b91906101000a8154816001600160801b0302191690836001600160801b031602179055505050806107c981610c36565b915050610712565b50848460010160008282546107e69190610b7a565b909155505060405185815233907fbbf25f13a3a6b23be022d923bb6d81fee70ba64dee8c862779b22714d5da759b9060200160405180910390a25050505050565b6040516001600160a01b03831660248201526044810182905261088a90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526108cd565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526108c79085906323b872dd60e01b90608401610853565b50505050565b6000610922826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661099f9092919063ffffffff16565b80519091501561088a57808060200190518101906109409190610c4d565b61088a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610281565b60606109ae84846000856109b8565b90505b9392505050565b606082471015610a195760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610281565b6001600160a01b0385163b610a705760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610281565b600080866001600160a01b03168587604051610a8c9190610c9b565b60006040518083038185875af1925050503d8060008114610ac9576040519150601f19603f3d011682016040523d82523d6000602084013e610ace565b606091505b5091509150610ade828286610ae9565b979650505050505050565b60608315610af85750816109b1565b825115610b085782518084602001fd5b8160405162461bcd60e51b81526004016102819190610cb7565b600060208284031215610b3457600080fd5b81356001600160a01b03811681146109b157600080fd5b600060208284031215610b5d57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610b8d57610b8d610b64565b500190565b60006001600160801b0380831681811415610baf57610baf610b64565b6001019392505050565b600082821015610bcb57610bcb610b64565b500390565b6000600019821415610be457610be4610b64565b5060010190565b60006001600160801b0383811690831681811015610c0b57610c0b610b64565b039392505050565b60006001600160801b03821680610c2c57610c2c610b64565b6000190192915050565b600081610c4557610c45610b64565b506000190190565b600060208284031215610c5f57600080fd5b815180151581146109b157600080fd5b60005b83811015610c8a578181015183820152602001610c72565b838111156108c75750506000910152565b60008251610cad818460208701610c6f565b9190910192915050565b6020815260008251806020840152610cd6816040850160208701610c6f565b601f01601f1916919091016040019291505056fea2646970667358221220a9e1f40059c520e9b9042f8ca601bed77e846df19bafc7906be417bf6cb45b7464736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c8063c93c8f3411610066578063c93c8f341461016c578063ce513b6f146101aa578063d9a912ec146101cb578063eaffb3f9146101d5578063fc0c546a146101e857600080fd5b806316934fc4146100a357806327de9e32146100e45780633ccfd60b146100f9578063a694fc3a14610101578063abbb247f14610114575b600080fd5b6100ca6100b1366004610b22565b6000602081905290815260409020805460019091015482565b604080519283526020830191909152015b60405180910390f35b6100f76100f2366004610b4b565b610227565b005b6100f7610374565b6100f761010f366004610b4b565b610512565b61014c610122366004610b22565b600160208190526000918252604090912001546001600160801b0380821691600160801b90041682565b604080516001600160801b039384168152929091166020830152016100db565b61019a61017a366004610b22565b6001600160a01b0316600090815260208190526040902060010154151590565b60405190151581526020016100db565b6101bd6101b8366004610b22565b6105cb565b6040519081526020016100db565b6101bd6224ea0081565b6100f76101e3366004610b4b565b610665565b61020f7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100db565b3360009081526020818152604080832060019283905292209082015483111561028a5760405162461bcd60e51b815260206004820152601060248201526f6e6f7420656e6f7567682066756e647360801b60448201526064015b60405180910390fd5b600060405180604001604052808581526020016224ea00426102ac9190610b7a565b9052600180840180546001600160801b03600160801b91829004811660009081526020888152604090912086518155908601519401939093558154939450909204169060106102fa83610b92565b91906101000a8154816001600160801b0302191690836001600160801b0316021790555050838360010160008282546103339190610bb9565b909155505060405184815233907fb735793e7250527232d5f7e07e8691c383c85e0c77673ac750944e8bd40e71c8906020015b60405180910390a250505050565b33600090815260208181526040808320600192839052908320918201549092906001600160801b03600160801b8204811691165b8181101561044b57600081815260208590526040902060018101544210156103d0575061044b565b80546103dc9085610b7a565b60008381526020879052604081208181556001908101829055870180549296506001600160801b03909216919061041283610b92565b91906101000a8154816001600160801b0302191690836001600160801b031602179055505050808061044390610bd0565b9150506103a8565b50600082116104925760405162461bcd60e51b81526020600482015260136024820152726e6f7468696e6720746f20776974686472617760681b6044820152606401610281565b818460000160008282546104a69190610bb9565b909155506104e090506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163384610827565b60405182815233907f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b6590602001610366565b3360009081526020819052604081208054839290610531908490610b7a565b90915550503360009081526020819052604081206001018054839290610558908490610b7a565b9091555061059390506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308461088f565b60405181815233907f98edbb47e4ea313ba4379bcb77201a01b70c9ceb0211dd0508dbfd24a58f5aa99060200160405180910390a250565b6001600160a01b038116600090815260016020819052604082209081015482906001600160801b03600160801b8204811691165b8181101561065b576000818152602085905260409020600181015442101561062c57509195945050505050565b6000828152602086905260409020546106459085610b7a565b935050808061065390610bd0565b9150506105ff565b5090949350505050565b336000908152602081815260408083206001928390529220908201548254849161068e91610bb9565b10156106dc5760405162461bcd60e51b815260206004820152601a60248201527f6e6f7420656e6f75676820756e626f6e64696e672066756e64730000000000006044820152606401610281565b60018082015484916001600160801b0380831692600092610706929091600160801b900416610beb565b6001600160801b031690505b8181106107d15760008181526020859052604090208054841161074f57838160000160008282546107439190610bb9565b909155506107d1915050565b805461075b9085610bb9565b600083815260208790526040812081815560019081019190915586018054919550600160801b9091046001600160801b031690601061079983610c13565b91906101000a8154816001600160801b0302191690836001600160801b031602179055505050806107c981610c36565b915050610712565b50848460010160008282546107e69190610b7a565b909155505060405185815233907fbbf25f13a3a6b23be022d923bb6d81fee70ba64dee8c862779b22714d5da759b9060200160405180910390a25050505050565b6040516001600160a01b03831660248201526044810182905261088a90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526108cd565b505050565b6040516001600160a01b03808516602483015283166044820152606481018290526108c79085906323b872dd60e01b90608401610853565b50505050565b6000610922826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661099f9092919063ffffffff16565b80519091501561088a57808060200190518101906109409190610c4d565b61088a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610281565b60606109ae84846000856109b8565b90505b9392505050565b606082471015610a195760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610281565b6001600160a01b0385163b610a705760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610281565b600080866001600160a01b03168587604051610a8c9190610c9b565b60006040518083038185875af1925050503d8060008114610ac9576040519150601f19603f3d011682016040523d82523d6000602084013e610ace565b606091505b5091509150610ade828286610ae9565b979650505050505050565b60608315610af85750816109b1565b825115610b085782518084602001fd5b8160405162461bcd60e51b81526004016102819190610cb7565b600060208284031215610b3457600080fd5b81356001600160a01b03811681146109b157600080fd5b600060208284031215610b5d57600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610b8d57610b8d610b64565b500190565b60006001600160801b0380831681811415610baf57610baf610b64565b6001019392505050565b600082821015610bcb57610bcb610b64565b500390565b6000600019821415610be457610be4610b64565b5060010190565b60006001600160801b0383811690831681811015610c0b57610c0b610b64565b039392505050565b60006001600160801b03821680610c2c57610c2c610b64565b6000190192915050565b600081610c4557610c45610b64565b506000190190565b600060208284031215610c5f57600080fd5b815180151581146109b157600080fd5b60005b83811015610c8a578181015183820152602001610c72565b838111156108c75750506000910152565b60008251610cad818460208701610c6f565b9190910192915050565b6020815260008251806020840152610cd6816040850160208701610c6f565b601f01601f1916919091016040019291505056fea2646970667358221220a9e1f40059c520e9b9042f8ca601bed77e846df19bafc7906be417bf6cb45b7464736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "rebond(uint256)": {
        "details": "Emits a `Rebond` event.",
        "params": {
          "amount": "The amount of tokens to rebond."
        }
      },
      "stake(uint256)": {
        "details": "Emits a `Stake` event.",
        "params": {
          "amount": "The amount of tokens to stake."
        }
      },
      "unbond(uint256)": {
        "details": "Emits a `Unbond` event.Uses a mapping to handle the different unbondings, but from the caller's side it's treated as a single pool.",
        "params": {
          "amount": "The amount of tokens to unbond."
        }
      },
      "withdraw()": {
        "details": "Emits a `Withdrawal` event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "rebond(uint256)": {
        "notice": "Rebonds the given amount of tokens for `msg.sender`. It requires that there are enough funds that are still unbonding or that have been unbonded but not yet withdrawn."
      },
      "stake(uint256)": {
        "notice": "Stakes the given amount of tokens, using the `msg.sender` as the staker."
      },
      "stakes(address)": {
        "notice": "account => stakes"
      },
      "token()": {
        "notice": "The token to stake"
      },
      "unbond(uint256)": {
        "notice": "Unbonds the given amount of tokens, using the `msg.sender` as the staker. The staker must have already staked the given amount of tokens."
      },
      "unbondings(address)": {
        "notice": "account => unbondings"
      },
      "withdraw()": {
        "notice": "TODO add a gas meter to prevent this function from crashing if too many unbondings exist"
      },
      "withdrawable(address)": {
        "notice": "Computes how many tokens waiting for unbonding can already be withdrawn"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4890,
        "contract": "contracts/discovery/Staking.sol:Staking",
        "label": "stakes",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Stake)4839_storage)"
      },
      {
        "astId": 4896,
        "contract": "contracts/discovery/Staking.sol:Staking",
        "label": "unbondings",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(UnbondingList)4849_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Stake)4839_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Staking.Stake)",
        "numberOfBytes": "32",
        "value": "t_struct(Stake)4839_storage"
      },
      "t_mapping(t_address,t_struct(UnbondingList)4849_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Staking.UnbondingList)",
        "numberOfBytes": "32",
        "value": "t_struct(UnbondingList)4849_storage"
      },
      "t_mapping(t_uint256,t_struct(Unbonding)4854_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Staking.Unbonding)",
        "numberOfBytes": "32",
        "value": "t_struct(Unbonding)4854_storage"
      },
      "t_struct(Stake)4839_storage": {
        "encoding": "inplace",
        "label": "struct Staking.Stake",
        "members": [
          {
            "astId": 4836,
            "contract": "contracts/discovery/Staking.sol:Staking",
            "label": "total",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4838,
            "contract": "contracts/discovery/Staking.sol:Staking",
            "label": "bonded",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Unbonding)4854_storage": {
        "encoding": "inplace",
        "label": "struct Staking.Unbonding",
        "members": [
          {
            "astId": 4851,
            "contract": "contracts/discovery/Staking.sol:Staking",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4853,
            "contract": "contracts/discovery/Staking.sol:Staking",
            "label": "time",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UnbondingList)4849_storage": {
        "encoding": "inplace",
        "label": "struct Staking.UnbondingList",
        "members": [
          {
            "astId": 4844,
            "contract": "contracts/discovery/Staking.sol:Staking",
            "label": "list",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(Unbonding)4854_storage)"
          },
          {
            "astId": 4846,
            "contract": "contracts/discovery/Staking.sol:Staking",
            "label": "first",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 4848,
            "contract": "contracts/discovery/Staking.sol:Staking",
            "label": "next",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}