{
  "address": "0xCC022d3713280EF49Af7993a87b233BCC7Fe86C8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_root",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "addDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "fractalId",
          "type": "bytes32"
        }
      ],
      "name": "addUserAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "userId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "listId",
          "type": "string"
        }
      ],
      "name": "addUserToList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "getFractalId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "userId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "listId",
          "type": "string"
        }
      ],
      "name": "isUserInList",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "removeDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "removeUserAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "userId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "listId",
          "type": "string"
        }
      ],
      "name": "removeUserFromList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c718a35ee8b3b1fbad46aed9ec10270da4ac04d9b651876c75c48500bf3ad10",
  "receipt": {
    "to": null,
    "from": "0x74319C333f26677688e58a72C4C0DafC508728d8",
    "contractAddress": "0xCC022d3713280EF49Af7993a87b233BCC7Fe86C8",
    "transactionIndex": 0,
    "gasUsed": "383445",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x710fe65e6538cc022ef07de7535642c1737cab429941900be99bf6771613c0ce",
    "transactionHash": "0x7c718a35ee8b3b1fbad46aed9ec10270da4ac04d9b651876c75c48500bf3ad10",
    "logs": [],
    "blockNumber": 1033648,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x74319C333f26677688e58a72C4C0DafC508728d8"
  ],
  "numDeployments": 2,
  "solcInputHash": "dfb224aae55ceb1d52b02ce7efbb10f7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_root\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"fractalId\",\"type\":\"bytes32\"}],\"name\":\"addUserAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"userId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"listId\",\"type\":\"string\"}],\"name\":\"addUserToList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getFractalId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"userId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"listId\",\"type\":\"string\"}],\"name\":\"isUserInList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeUserAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"userId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"listId\",\"type\":\"string\"}],\"name\":\"removeUserFromList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Antoni Dikov and Shelby Doolittle\",\"kind\":\"dev\",\"methods\":{\"addDelegate(address)\":{\"params\":{\"addr\":\"is Eth address\"}},\"addUserAddress(address,bytes32)\":{\"params\":{\"addr\":\"is Eth address.\",\"fractalId\":\"is FractalId in bytes32.\"}},\"addUserToList(bytes32,string)\":{\"params\":{\"listId\":\"is the list id.\",\"userId\":\"is FractalId in bytes32.\"}},\"getFractalId(address)\":{\"params\":{\"addr\":\"is Eth address\"},\"returns\":{\"_0\":\"FractalId as bytes32\"}},\"isUserInList(bytes32,string)\":{\"params\":{\"listId\":\"is the list id.\",\"userId\":\"is FractalId in bytes32.\"},\"returns\":{\"_0\":\"bool if the user is the specified list.\"}},\"removeDelegate(address)\":{\"params\":{\"addr\":\"is Eth address\"}},\"removeUserAddress(address)\":{\"params\":{\"addr\":\"is Eth address.\"}},\"removeUserFromList(bytes32,string)\":{\"params\":{\"listId\":\"is the list id.\",\"userId\":\"is FractalId in bytes32.\"}}},\"title\":\"Fractal registry v0\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addDelegate(address)\":{\"notice\":\"Only root can add delegates. Delegates have mutate permissions.\"},\"addUserAddress(address,bytes32)\":{\"notice\":\"Adds a user to the mapping of Eth address to FractalId.\"},\"addUserToList(bytes32,string)\":{\"notice\":\"Add user by FractalId to a specific list.\"},\"isUserInList(bytes32,string)\":{\"notice\":\"Checks if a user by FractalId exists in a specific list.\"},\"removeDelegate(address)\":{\"notice\":\"Removing delegates is only posible from root or by himself.\"},\"removeUserAddress(address)\":{\"notice\":\"Removes an address from the mapping of Eth address to FractalId.\"},\"removeUserFromList(bytes32,string)\":{\"notice\":\"Remove user by FractalId from a specific list.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/fractal_registry/FractalRegistry.sol\":\"FractalRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":300},\"remappings\":[]},\"sources\":{\"contracts/fractal_registry/FractalRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Fractal registry v0\\n/// @author Antoni Dikov and Shelby Doolittle\\ncontract FractalRegistry {\\n    address root;\\n    mapping(address => bool) delegates;\\n\\n    mapping(address => bytes32) fractalIdForAddress;\\n    mapping(string => mapping(bytes32 => bool)) userLists;\\n\\n    constructor(address _root) {\\n        root = _root;\\n    }\\n\\n    /// @param addr is Eth address\\n    /// @return FractalId as bytes32\\n    function getFractalId(address addr) external view returns (bytes32) {\\n        return fractalIdForAddress[addr];\\n    }\\n\\n    /// @notice Adds a user to the mapping of Eth address to FractalId.\\n    /// @param addr is Eth address.\\n    /// @param fractalId is FractalId in bytes32.\\n    function addUserAddress(address addr, bytes32 fractalId) external {\\n        requireMutatePermission();\\n        fractalIdForAddress[addr] = fractalId;\\n    }\\n\\n    /// @notice Removes an address from the mapping of Eth address to FractalId.\\n    /// @param addr is Eth address.\\n    function removeUserAddress(address addr) external {\\n        requireMutatePermission();\\n        delete fractalIdForAddress[addr];\\n    }\\n\\n    /// @notice Checks if a user by FractalId exists in a specific list.\\n    /// @param userId is FractalId in bytes32.\\n    /// @param listId is the list id.\\n    /// @return bool if the user is the specified list.\\n    function isUserInList(bytes32 userId, string memory listId)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return userLists[listId][userId];\\n    }\\n\\n    /// @notice Add user by FractalId to a specific list.\\n    /// @param userId is FractalId in bytes32.\\n    /// @param listId is the list id.\\n    function addUserToList(bytes32 userId, string memory listId) external {\\n        requireMutatePermission();\\n        userLists[listId][userId] = true;\\n    }\\n\\n    /// @notice Remove user by FractalId from a specific list.\\n    /// @param userId is FractalId in bytes32.\\n    /// @param listId is the list id.\\n    function removeUserFromList(bytes32 userId, string memory listId) external {\\n        requireMutatePermission();\\n        delete userLists[listId][userId];\\n    }\\n\\n    /// @notice Only root can add delegates. Delegates have mutate permissions.\\n    /// @param addr is Eth address\\n    function addDelegate(address addr) external {\\n        require(msg.sender == root, \\\"Must be root\\\");\\n        delegates[addr] = true;\\n    }\\n\\n    /// @notice Removing delegates is only posible from root or by himself.\\n    /// @param addr is Eth address\\n    function removeDelegate(address addr) external {\\n        require(\\n            msg.sender == root || msg.sender == addr,\\n            \\\"Not allowed to remove address\\\"\\n        );\\n        delete delegates[addr];\\n    }\\n\\n    function requireMutatePermission() private view {\\n        require(\\n            msg.sender == root || delegates[msg.sender],\\n            \\\"Not allowed to mutate\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xeb758b84c74d60804219786b08dcd51513c411c66fcfdf53a740c3c382f730a3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161061c38038061061c83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b610589806100936000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063ce8767b21161005b578063ce8767b2146100f0578063d18c216e14610103578063e71bdf411461013a578063ef8b57731461014d57600080fd5b806367e7646f1461008d57806370491d7e146100a2578063a2af447a146100b5578063a535f5e9146100c8575b600080fd5b6100a061009b3660046103fb565b610160565b005b6100a06100b0366004610433565b6101f3565b6100a06100c33660046103fb565b61023c565b6100db6100d6366004610433565b61025e565b60405190151581526020015b60405180910390f35b6100a06100fe366004610433565b610296565b61012c6101113660046103fb565b6001600160a01b031660009081526002602052604090205490565b6040519081526020016100e7565b6100a06101483660046103fb565b6102d5565b6100a061015b3660046104ee565b610345565b6000546001600160a01b03163314806101815750336001600160a01b038216145b6101d25760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420616c6c6f77656420746f2072656d6f7665206164647265737300000060448201526064015b60405180910390fd5b6001600160a01b03166000908152600160205260409020805460ff19169055565b6101fb610369565b600160038260405161020d9190610518565b90815260408051602092819003830190206000958652909152909220805460ff19169215159290921790915550565b610244610369565b6001600160a01b0316600090815260026020526040812055565b60006003826040516102709190610518565b908152604080516020928190038301902060009586529091529092205460ff1692915050565b61029e610369565b6003816040516102ae9190610518565b90815260408051602092819003830190206000948552909152909120805460ff1916905550565b6000546001600160a01b0316331461031e5760405162461bcd60e51b815260206004820152600c60248201526b135d5cdd081899481c9bdbdd60a21b60448201526064016101c9565b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b61034d610369565b6001600160a01b03909116600090815260026020526040902055565b6000546001600160a01b031633148061039157503360009081526001602052604090205460ff165b6103dd5760405162461bcd60e51b815260206004820152601560248201527f4e6f7420616c6c6f77656420746f206d7574617465000000000000000000000060448201526064016101c9565b565b80356001600160a01b03811681146103f657600080fd5b919050565b60006020828403121561040d57600080fd5b610416826103df565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561044657600080fd5b82359150602083013567ffffffffffffffff8082111561046557600080fd5b818501915085601f83011261047957600080fd5b81358181111561048b5761048b61041d565b604051601f8201601f19908116603f011681019083821181831017156104b3576104b361041d565b816040528281528860208487010111156104cc57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806040838503121561050157600080fd5b61050a836103df565b946020939093013593505050565b6000825160005b81811015610539576020818601810151858301520161051f565b81811115610548576000828501525b50919091019291505056fea2646970667358221220a2148d69dba0f1e76f823cbee0ba6c30a2c7a56d068847c0cf9af548c220550d64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063ce8767b21161005b578063ce8767b2146100f0578063d18c216e14610103578063e71bdf411461013a578063ef8b57731461014d57600080fd5b806367e7646f1461008d57806370491d7e146100a2578063a2af447a146100b5578063a535f5e9146100c8575b600080fd5b6100a061009b3660046103fb565b610160565b005b6100a06100b0366004610433565b6101f3565b6100a06100c33660046103fb565b61023c565b6100db6100d6366004610433565b61025e565b60405190151581526020015b60405180910390f35b6100a06100fe366004610433565b610296565b61012c6101113660046103fb565b6001600160a01b031660009081526002602052604090205490565b6040519081526020016100e7565b6100a06101483660046103fb565b6102d5565b6100a061015b3660046104ee565b610345565b6000546001600160a01b03163314806101815750336001600160a01b038216145b6101d25760405162461bcd60e51b815260206004820152601d60248201527f4e6f7420616c6c6f77656420746f2072656d6f7665206164647265737300000060448201526064015b60405180910390fd5b6001600160a01b03166000908152600160205260409020805460ff19169055565b6101fb610369565b600160038260405161020d9190610518565b90815260408051602092819003830190206000958652909152909220805460ff19169215159290921790915550565b610244610369565b6001600160a01b0316600090815260026020526040812055565b60006003826040516102709190610518565b908152604080516020928190038301902060009586529091529092205460ff1692915050565b61029e610369565b6003816040516102ae9190610518565b90815260408051602092819003830190206000948552909152909120805460ff1916905550565b6000546001600160a01b0316331461031e5760405162461bcd60e51b815260206004820152600c60248201526b135d5cdd081899481c9bdbdd60a21b60448201526064016101c9565b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b61034d610369565b6001600160a01b03909116600090815260026020526040902055565b6000546001600160a01b031633148061039157503360009081526001602052604090205460ff165b6103dd5760405162461bcd60e51b815260206004820152601560248201527f4e6f7420616c6c6f77656420746f206d7574617465000000000000000000000060448201526064016101c9565b565b80356001600160a01b03811681146103f657600080fd5b919050565b60006020828403121561040d57600080fd5b610416826103df565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561044657600080fd5b82359150602083013567ffffffffffffffff8082111561046557600080fd5b818501915085601f83011261047957600080fd5b81358181111561048b5761048b61041d565b604051601f8201601f19908116603f011681019083821181831017156104b3576104b361041d565b816040528281528860208487010111156104cc57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806040838503121561050157600080fd5b61050a836103df565b946020939093013593505050565b6000825160005b81811015610539576020818601810151858301520161051f565b81811115610548576000828501525b50919091019291505056fea2646970667358221220a2148d69dba0f1e76f823cbee0ba6c30a2c7a56d068847c0cf9af548c220550d64736f6c634300080c0033",
  "devdoc": {
    "author": "Antoni Dikov and Shelby Doolittle",
    "kind": "dev",
    "methods": {
      "addDelegate(address)": {
        "params": {
          "addr": "is Eth address"
        }
      },
      "addUserAddress(address,bytes32)": {
        "params": {
          "addr": "is Eth address.",
          "fractalId": "is FractalId in bytes32."
        }
      },
      "addUserToList(bytes32,string)": {
        "params": {
          "listId": "is the list id.",
          "userId": "is FractalId in bytes32."
        }
      },
      "getFractalId(address)": {
        "params": {
          "addr": "is Eth address"
        },
        "returns": {
          "_0": "FractalId as bytes32"
        }
      },
      "isUserInList(bytes32,string)": {
        "params": {
          "listId": "is the list id.",
          "userId": "is FractalId in bytes32."
        },
        "returns": {
          "_0": "bool if the user is the specified list."
        }
      },
      "removeDelegate(address)": {
        "params": {
          "addr": "is Eth address"
        }
      },
      "removeUserAddress(address)": {
        "params": {
          "addr": "is Eth address."
        }
      },
      "removeUserFromList(bytes32,string)": {
        "params": {
          "listId": "is the list id.",
          "userId": "is FractalId in bytes32."
        }
      }
    },
    "title": "Fractal registry v0",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addDelegate(address)": {
        "notice": "Only root can add delegates. Delegates have mutate permissions."
      },
      "addUserAddress(address,bytes32)": {
        "notice": "Adds a user to the mapping of Eth address to FractalId."
      },
      "addUserToList(bytes32,string)": {
        "notice": "Add user by FractalId to a specific list."
      },
      "isUserInList(bytes32,string)": {
        "notice": "Checks if a user by FractalId exists in a specific list."
      },
      "removeDelegate(address)": {
        "notice": "Removing delegates is only posible from root or by himself."
      },
      "removeUserAddress(address)": {
        "notice": "Removes an address from the mapping of Eth address to FractalId."
      },
      "removeUserFromList(bytes32,string)": {
        "notice": "Remove user by FractalId from a specific list."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6008,
        "contract": "contracts/fractal_registry/FractalRegistry.sol:FractalRegistry",
        "label": "root",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6012,
        "contract": "contracts/fractal_registry/FractalRegistry.sol:FractalRegistry",
        "label": "delegates",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6016,
        "contract": "contracts/fractal_registry/FractalRegistry.sol:FractalRegistry",
        "label": "fractalIdForAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 6022,
        "contract": "contracts/fractal_registry/FractalRegistry.sol:FractalRegistry",
        "label": "userLists",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_bytes32,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_bytes32,t_bool))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(bytes32 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_bool)"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}